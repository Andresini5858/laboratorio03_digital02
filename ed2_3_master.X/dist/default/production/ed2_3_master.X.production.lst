

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Feb 03 00:42:36 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    31                           	dabs	1,0x7E,2
    32     0000                     
    33                           ; Version 2.40
    34                           ; Generated 17/11/2021 GMT
    35                           ; 
    36                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68     0000                     	;# 
    69     0001                     	;# 
    70     0002                     	;# 
    71     0003                     	;# 
    72     0004                     	;# 
    73     0005                     	;# 
    74     0006                     	;# 
    75     0007                     	;# 
    76     0008                     	;# 
    77     0009                     	;# 
    78     000A                     	;# 
    79     000B                     	;# 
    80     000C                     	;# 
    81     000D                     	;# 
    82     000E                     	;# 
    83     000E                     	;# 
    84     000F                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0013                     	;# 
    89     0014                     	;# 
    90     0015                     	;# 
    91     0015                     	;# 
    92     0016                     	;# 
    93     0017                     	;# 
    94     0018                     	;# 
    95     0019                     	;# 
    96     001A                     	;# 
    97     001B                     	;# 
    98     001B                     	;# 
    99     001C                     	;# 
   100     001D                     	;# 
   101     001E                     	;# 
   102     001F                     	;# 
   103     0081                     	;# 
   104     0085                     	;# 
   105     0086                     	;# 
   106     0087                     	;# 
   107     0088                     	;# 
   108     0089                     	;# 
   109     008C                     	;# 
   110     008D                     	;# 
   111     008E                     	;# 
   112     008F                     	;# 
   113     0090                     	;# 
   114     0091                     	;# 
   115     0092                     	;# 
   116     0093                     	;# 
   117     0093                     	;# 
   118     0093                     	;# 
   119     0094                     	;# 
   120     0095                     	;# 
   121     0096                     	;# 
   122     0097                     	;# 
   123     0098                     	;# 
   124     0099                     	;# 
   125     009A                     	;# 
   126     009B                     	;# 
   127     009C                     	;# 
   128     009D                     	;# 
   129     009E                     	;# 
   130     009F                     	;# 
   131     0105                     	;# 
   132     0107                     	;# 
   133     0108                     	;# 
   134     0109                     	;# 
   135     010C                     	;# 
   136     010C                     	;# 
   137     010D                     	;# 
   138     010E                     	;# 
   139     010F                     	;# 
   140     0185                     	;# 
   141     0187                     	;# 
   142     0188                     	;# 
   143     0189                     	;# 
   144     018C                     	;# 
   145     018D                     	;# 
   146     0000                     	;# 
   147     0001                     	;# 
   148     0002                     	;# 
   149     0003                     	;# 
   150     0004                     	;# 
   151     0005                     	;# 
   152     0006                     	;# 
   153     0007                     	;# 
   154     0008                     	;# 
   155     0009                     	;# 
   156     000A                     	;# 
   157     000B                     	;# 
   158     000C                     	;# 
   159     000D                     	;# 
   160     000E                     	;# 
   161     000E                     	;# 
   162     000F                     	;# 
   163     0010                     	;# 
   164     0011                     	;# 
   165     0012                     	;# 
   166     0013                     	;# 
   167     0014                     	;# 
   168     0015                     	;# 
   169     0015                     	;# 
   170     0016                     	;# 
   171     0017                     	;# 
   172     0018                     	;# 
   173     0019                     	;# 
   174     001A                     	;# 
   175     001B                     	;# 
   176     001B                     	;# 
   177     001C                     	;# 
   178     001D                     	;# 
   179     001E                     	;# 
   180     001F                     	;# 
   181     0081                     	;# 
   182     0085                     	;# 
   183     0086                     	;# 
   184     0087                     	;# 
   185     0088                     	;# 
   186     0089                     	;# 
   187     008C                     	;# 
   188     008D                     	;# 
   189     008E                     	;# 
   190     008F                     	;# 
   191     0090                     	;# 
   192     0091                     	;# 
   193     0092                     	;# 
   194     0093                     	;# 
   195     0093                     	;# 
   196     0093                     	;# 
   197     0094                     	;# 
   198     0095                     	;# 
   199     0096                     	;# 
   200     0097                     	;# 
   201     0098                     	;# 
   202     0099                     	;# 
   203     009A                     	;# 
   204     009B                     	;# 
   205     009C                     	;# 
   206     009D                     	;# 
   207     009E                     	;# 
   208     009F                     	;# 
   209     0105                     	;# 
   210     0107                     	;# 
   211     0108                     	;# 
   212     0109                     	;# 
   213     010C                     	;# 
   214     010C                     	;# 
   215     010D                     	;# 
   216     010E                     	;# 
   217     010F                     	;# 
   218     0185                     	;# 
   219     0187                     	;# 
   220     0188                     	;# 
   221     0189                     	;# 
   222     018C                     	;# 
   223     018D                     	;# 
   224     0000                     	;# 
   225     0001                     	;# 
   226     0002                     	;# 
   227     0003                     	;# 
   228     0004                     	;# 
   229     0005                     	;# 
   230     0006                     	;# 
   231     0007                     	;# 
   232     0008                     	;# 
   233     0009                     	;# 
   234     000A                     	;# 
   235     000B                     	;# 
   236     000C                     	;# 
   237     000D                     	;# 
   238     000E                     	;# 
   239     000E                     	;# 
   240     000F                     	;# 
   241     0010                     	;# 
   242     0011                     	;# 
   243     0012                     	;# 
   244     0013                     	;# 
   245     0014                     	;# 
   246     0015                     	;# 
   247     0015                     	;# 
   248     0016                     	;# 
   249     0017                     	;# 
   250     0018                     	;# 
   251     0019                     	;# 
   252     001A                     	;# 
   253     001B                     	;# 
   254     001B                     	;# 
   255     001C                     	;# 
   256     001D                     	;# 
   257     001E                     	;# 
   258     001F                     	;# 
   259     0081                     	;# 
   260     0085                     	;# 
   261     0086                     	;# 
   262     0087                     	;# 
   263     0088                     	;# 
   264     0089                     	;# 
   265     008C                     	;# 
   266     008D                     	;# 
   267     008E                     	;# 
   268     008F                     	;# 
   269     0090                     	;# 
   270     0091                     	;# 
   271     0092                     	;# 
   272     0093                     	;# 
   273     0093                     	;# 
   274     0093                     	;# 
   275     0094                     	;# 
   276     0095                     	;# 
   277     0096                     	;# 
   278     0097                     	;# 
   279     0098                     	;# 
   280     0099                     	;# 
   281     009A                     	;# 
   282     009B                     	;# 
   283     009C                     	;# 
   284     009D                     	;# 
   285     009E                     	;# 
   286     009F                     	;# 
   287     0105                     	;# 
   288     0107                     	;# 
   289     0108                     	;# 
   290     0109                     	;# 
   291     010C                     	;# 
   292     010C                     	;# 
   293     010D                     	;# 
   294     010E                     	;# 
   295     010F                     	;# 
   296     0185                     	;# 
   297     0187                     	;# 
   298     0188                     	;# 
   299     0189                     	;# 
   300     018C                     	;# 
   301     018D                     	;# 
   302     0000                     	;# 
   303     0001                     	;# 
   304     0002                     	;# 
   305     0003                     	;# 
   306     0004                     	;# 
   307     0005                     	;# 
   308     0006                     	;# 
   309     0007                     	;# 
   310     0008                     	;# 
   311     0009                     	;# 
   312     000A                     	;# 
   313     000B                     	;# 
   314     000C                     	;# 
   315     000D                     	;# 
   316     000E                     	;# 
   317     000E                     	;# 
   318     000F                     	;# 
   319     0010                     	;# 
   320     0011                     	;# 
   321     0012                     	;# 
   322     0013                     	;# 
   323     0014                     	;# 
   324     0015                     	;# 
   325     0015                     	;# 
   326     0016                     	;# 
   327     0017                     	;# 
   328     0018                     	;# 
   329     0019                     	;# 
   330     001A                     	;# 
   331     001B                     	;# 
   332     001B                     	;# 
   333     001C                     	;# 
   334     001D                     	;# 
   335     001E                     	;# 
   336     001F                     	;# 
   337     0081                     	;# 
   338     0085                     	;# 
   339     0086                     	;# 
   340     0087                     	;# 
   341     0088                     	;# 
   342     0089                     	;# 
   343     008C                     	;# 
   344     008D                     	;# 
   345     008E                     	;# 
   346     008F                     	;# 
   347     0090                     	;# 
   348     0091                     	;# 
   349     0092                     	;# 
   350     0093                     	;# 
   351     0093                     	;# 
   352     0093                     	;# 
   353     0094                     	;# 
   354     0095                     	;# 
   355     0096                     	;# 
   356     0097                     	;# 
   357     0098                     	;# 
   358     0099                     	;# 
   359     009A                     	;# 
   360     009B                     	;# 
   361     009C                     	;# 
   362     009D                     	;# 
   363     009E                     	;# 
   364     009F                     	;# 
   365     0105                     	;# 
   366     0107                     	;# 
   367     0108                     	;# 
   368     0109                     	;# 
   369     010C                     	;# 
   370     010C                     	;# 
   371     010D                     	;# 
   372     010E                     	;# 
   373     010F                     	;# 
   374     0185                     	;# 
   375     0187                     	;# 
   376     0188                     	;# 
   377     0189                     	;# 
   378     018C                     	;# 
   379     018D                     	;# 
   380                           
   381                           	psect	strings
   382     0003                     __pstrings:
   383     0003                     stringtab:
   384     0003                     __stringtab:
   385                           
   386                           ;	String table - string pointers are 1 byte each
   387     0003  1BFF               	btfsc	btemp+1,7
   388     0004  280D               	ljmp	stringcode
   389     0005  1383               	bcf	3,7
   390     0006  187F               	btfsc	btemp+1,0
   391     0007  1783               	bsf	3,7
   392     0008  0800               	movf	0,w
   393     0009  0A84               	incf	4,f
   394     000A  1903               	skipnz
   395     000B  0AFF               	incf	btemp+1,f
   396     000C  0008               	return
   397     000D                     stringcode:
   398     000D                     stringdir:
   399     000D  3000               	movlw	high stringdir
   400     000E  008A               	movwf	10
   401     000F  0804               	movf	4,w
   402     0010  0A84               	incf	4,f
   403     0011  0782               	addwf	2,f
   404     0012                     __stringbase:
   405     0012  3400               	retlw	0
   406     0013                     __end_of__stringtab:
   407     0013                     _dpowers:
   408     0013  3401               	retlw	1
   409     0014  3400               	retlw	0
   410     0015  340A               	retlw	10
   411     0016  3400               	retlw	0
   412     0017  3464               	retlw	100
   413     0018  3400               	retlw	0
   414     0019  34E8               	retlw	232
   415     001A  3403               	retlw	3
   416     001B  3410               	retlw	16
   417     001C  3427               	retlw	39
   418     001D                     __end_of_dpowers:
   419     0013                     _SSPBUF	set	19
   420     0014                     _SSPCON	set	20
   421     0008                     _PORTDbits	set	8
   422     0006                     _PORTBbits	set	6
   423     0008                     _PORTD	set	8
   424     0006                     _PORTB	set	6
   425     0007                     _PORTCbits	set	7
   426     0094                     _SSPSTATbits	set	148
   427     0094                     _SSPSTAT	set	148
   428     008F                     _OSCCONbits	set	143
   429     0088                     _TRISD	set	136
   430     0086                     _TRISB	set	134
   431     0087                     _TRISCbits	set	135
   432     0189                     _ANSELH	set	393
   433     0188                     _ANSEL	set	392
   434     001D                     STR_4:
   435     001D  3425               	retlw	37	;'%'
   436     001E  3464               	retlw	100	;'d'
   437     001F  342E               	retlw	46	;'.'
   438     0020  3425               	retlw	37	;'%'
   439     0021  3464               	retlw	100	;'d'
   440     0022  3425               	retlw	37	;'%'
   441     0023  3464               	retlw	100	;'d'
   442     0024  3456               	retlw	86	;'V'
   443     0025  3400               	retlw	0
   444     0026                     STR_2:
   445     0026  3453               	retlw	83	;'S'
   446     0027  3431               	retlw	49	;'1'
   447     0028  343A               	retlw	58	;':'
   448     0029  3400               	retlw	0
   449     002A                     STR_1:
   450     002A  3453               	retlw	83	;'S'
   451     002B  3432               	retlw	50	;'2'
   452     002C  343A               	retlw	58	;':'
   453     002D  3400               	retlw	0
   454     002E                     STR_3:
   455     002E  3453               	retlw	83	;'S'
   456     002F  3433               	retlw	51	;'3'
   457     0030  343A               	retlw	58	;':'
   458     0031  3400               	retlw	0
   459                           
   460                           	psect	cinit
   461     07F3                     start_initialization:	
   462                           ; #config settings
   463                           
   464     07F3                     __initialization:
   465                           
   466                           ; Clear objects allocated to BANK0
   467     07F3  1383               	bcf	3,7	;select IRP bank0
   468     07F4  3020               	movlw	low __pbssBANK0
   469     07F5  0084               	movwf	4
   470     07F6  3045               	movlw	low (__pbssBANK0+37)
   471     07F7  120A  118A  22C7  120A  118A  	fcall	clear_ram0
   472     07FC                     end_of_initialization:	
   473                           ;End of C runtime variable initialization code
   474                           
   475     07FC                     __end_of__initialization:
   476     07FC  0183               	clrf	3
   477     07FD  120A  118A  2ED6   	ljmp	_main	;jump to C main() function
   478                           
   479                           	psect	bssBANK0
   480     0020                     __pbssBANK0:
   481     0020                     _centesima2:
   482     0020                     	ds	2
   483     0022                     _decima2:
   484     0022                     	ds	2
   485     0024                     _unidad2:
   486     0024                     	ds	2
   487     0026                     _centesima1:
   488     0026                     	ds	2
   489     0028                     _decima1:
   490     0028                     	ds	2
   491     002A                     _unidad1:
   492     002A                     	ds	2
   493     002C                     _vol2:
   494     002C                     	ds	2
   495     002E                     _vol1:
   496     002E                     	ds	2
   497     0030                     _voltaje1:
   498     0030                     	ds	1
   499     0031                     _buffer:
   500     0031                     	ds	20
   501                           
   502                           	psect	clrtext
   503     02C7                     clear_ram0:	
   504                           ;	Called with FSR containing the base address, and
   505                           ;	W with the last address+1
   506                           
   507     02C7  0064               	clrwdt	;clear the watchdog before getting into this loop
   508     02C8                     clrloop0:
   509     02C8  0180               	clrf	0	;clear RAM location pointed to by FSR
   510     02C9  0A84               	incf	4,f	;increment pointer
   511     02CA  0604               	xorwf	4,w	;XOR with final address
   512     02CB  1903               	btfsc	3,2	;have we reached the end yet?
   513     02CC  3400               	retlw	0	;all done for this memory range, return
   514     02CD  0604               	xorwf	4,w	;XOR again to restore value
   515     02CE  2AC8               	goto	clrloop0	;do the next byte
   516                           
   517                           	psect	cstackCOMMON
   518     0070                     __pcstackCOMMON:
   519     0070                     ?_setup:
   520     0070                     ?_Lcd_Init:	
   521                           ; 1 bytes @ 0x0
   522                           
   523     0070                     ?_spiWrite:	
   524                           ; 1 bytes @ 0x0
   525                           
   526     0070                     ??_spiWrite:	
   527                           ; 1 bytes @ 0x0
   528                           
   529     0070                     ?_spiRead:	
   530                           ; 1 bytes @ 0x0
   531                           
   532     0070                     ??_spiRead:	
   533                           ; 1 bytes @ 0x0
   534                           
   535     0070                     ?_spiInit:	
   536                           ; 1 bytes @ 0x0
   537                           
   538     0070                     ?_main:	
   539                           ; 1 bytes @ 0x0
   540                           
   541     0070                     ?_Lcd_Port:	
   542                           ; 1 bytes @ 0x0
   543                           
   544     0070                     ??_Lcd_Port:	
   545                           ; 1 bytes @ 0x0
   546                           
   547     0070                     ?_Lcd_Cmd:	
   548                           ; 1 bytes @ 0x0
   549                           
   550     0070                     ?_Lcd_Write_Char:	
   551                           ; 1 bytes @ 0x0
   552                           
   553     0070                     ?_spiReceiveWait:	
   554                           ; 1 bytes @ 0x0
   555                           
   556     0070                     ??_spiReceiveWait:	
   557                           ; 1 bytes @ 0x0
   558                           
   559     0070                     ?___wmul:	
   560                           ; 1 bytes @ 0x0
   561                           
   562     0070                     ?___lwdiv:	
   563                           ; 2 bytes @ 0x0
   564                           
   565     0070                     Lcd_Port@a:	
   566                           ; 2 bytes @ 0x0
   567                           
   568     0070                     spiInit@sDataSample:	
   569                           ; 1 bytes @ 0x0
   570                           
   571     0070                     spiWrite@dat:	
   572                           ; 1 bytes @ 0x0
   573                           
   574     0070                     ___wmul@multiplier:	
   575                           ; 1 bytes @ 0x0
   576                           
   577     0070                     ___lwdiv@divisor:	
   578                           ; 2 bytes @ 0x0
   579                           
   580                           
   581                           ; 2 bytes @ 0x0
   582     0070                     	ds	1
   583     0071                     ??_Lcd_Cmd:
   584     0071                     ??_Lcd_Write_Char:	
   585                           ; 1 bytes @ 0x1
   586                           
   587     0071                     spiInit@sClockIdle:	
   588                           ; 1 bytes @ 0x1
   589                           
   590                           
   591                           ; 1 bytes @ 0x1
   592     0071                     	ds	1
   593     0072                     Lcd_Write_Char@temp:
   594     0072                     spiInit@sTransmitEdge:	
   595                           ; 1 bytes @ 0x2
   596                           
   597     0072                     ___wmul@multiplicand:	
   598                           ; 1 bytes @ 0x2
   599                           
   600     0072                     ___lwdiv@dividend:	
   601                           ; 2 bytes @ 0x2
   602                           
   603                           
   604                           ; 2 bytes @ 0x2
   605     0072                     	ds	1
   606     0073                     ??_spiInit:
   607     0073                     Lcd_Cmd@a:	
   608                           ; 1 bytes @ 0x3
   609                           
   610     0073                     Lcd_Write_Char@y:	
   611                           ; 1 bytes @ 0x3
   612                           
   613     0073                     spiInit@sType:	
   614                           ; 1 bytes @ 0x3
   615                           
   616                           
   617                           ; 1 bytes @ 0x3
   618     0073                     	ds	1
   619     0074                     ??_setup:
   620     0074                     ??_Lcd_Init:	
   621                           ; 1 bytes @ 0x4
   622                           
   623     0074                     ?_Lcd_Set_Cursor:	
   624                           ; 1 bytes @ 0x4
   625                           
   626     0074                     ??___wmul:	
   627                           ; 1 bytes @ 0x4
   628                           
   629     0074                     ??___lwdiv:	
   630                           ; 1 bytes @ 0x4
   631                           
   632     0074                     Lcd_Set_Cursor@b:	
   633                           ; 1 bytes @ 0x4
   634                           
   635     0074                     Lcd_Write_Char@a:	
   636                           ; 1 bytes @ 0x4
   637                           
   638     0074                     ___wmul@product:	
   639                           ; 1 bytes @ 0x4
   640                           
   641                           
   642                           ; 2 bytes @ 0x4
   643     0074                     	ds	1
   644     0075                     ??_Lcd_Set_Cursor:
   645     0075                     ?_Lcd_Write_String:	
   646                           ; 1 bytes @ 0x5
   647                           
   648     0075                     Lcd_Write_String@a:	
   649                           ; 1 bytes @ 0x5
   650                           
   651     0075                     ___lwdiv@quotient:	
   652                           ; 2 bytes @ 0x5
   653                           
   654                           
   655                           ; 2 bytes @ 0x5
   656     0075                     	ds	1
   657     0076                     ?___awdiv:
   658     0076                     Lcd_Set_Cursor@a:	
   659                           ; 2 bytes @ 0x6
   660                           
   661     0076                     ___awdiv@divisor:	
   662                           ; 1 bytes @ 0x6
   663                           
   664                           
   665                           ; 2 bytes @ 0x6
   666     0076                     	ds	1
   667     0077                     ??_Lcd_Write_String:
   668     0077                     Lcd_Set_Cursor@z:	
   669                           ; 1 bytes @ 0x7
   670                           
   671     0077                     ___lwdiv@counter:	
   672                           ; 1 bytes @ 0x7
   673                           
   674                           
   675                           ; 1 bytes @ 0x7
   676     0077                     	ds	1
   677     0078                     ?___lwmod:
   678     0078                     Lcd_Set_Cursor@y:	
   679                           ; 2 bytes @ 0x8
   680                           
   681     0078                     ___awdiv@dividend:	
   682                           ; 1 bytes @ 0x8
   683                           
   684     0078                     ___lwmod@divisor:	
   685                           ; 2 bytes @ 0x8
   686                           
   687                           
   688                           ; 2 bytes @ 0x8
   689     0078                     	ds	1
   690     0079                     Lcd_Set_Cursor@temp:
   691                           
   692                           ; 1 bytes @ 0x9
   693     0079                     	ds	1
   694     007A                     ??___awdiv:
   695     007A                     Lcd_Write_String@i:	
   696                           ; 1 bytes @ 0xA
   697                           
   698     007A                     ___lwmod@dividend:	
   699                           ; 2 bytes @ 0xA
   700                           
   701                           
   702                           ; 2 bytes @ 0xA
   703     007A                     	ds	1
   704     007B                     ??_map:
   705     007B                     ??___awmod:	
   706                           ; 1 bytes @ 0xB
   707                           
   708                           
   709                           ; 1 bytes @ 0xB
   710     007B                     	ds	1
   711     007C                     ??___lwmod:
   712     007C                     map@value:	
   713                           ; 1 bytes @ 0xC
   714                           
   715     007C                     ___awmod@counter:	
   716                           ; 1 bytes @ 0xC
   717                           
   718                           
   719                           ; 1 bytes @ 0xC
   720     007C                     	ds	1
   721     007D                     ___awmod@sign:
   722     007D                     ___lwmod@counter:	
   723                           ; 1 bytes @ 0xD
   724                           
   725                           
   726                           ; 1 bytes @ 0xD
   727     007D                     	ds	1
   728                           
   729                           	psect	cstackBANK0
   730     0045                     __pcstackBANK0:
   731     0045                     ?_sprintf:
   732     0045                     sprintf@f:	
   733                           ; 2 bytes @ 0x0
   734                           
   735     0045                     ___awdiv@counter:	
   736                           ; 1 bytes @ 0x0
   737                           
   738                           
   739                           ; 1 bytes @ 0x0
   740     0045                     	ds	1
   741     0046                     ___awdiv@sign:
   742                           
   743                           ; 1 bytes @ 0x1
   744     0046                     	ds	1
   745     0047                     ___awdiv@quotient:
   746                           
   747                           ; 2 bytes @ 0x2
   748     0047                     	ds	2
   749     0049                     ?_map:
   750     0049                     ?___awmod:	
   751                           ; 2 bytes @ 0x4
   752                           
   753     0049                     map@inputmin:	
   754                           ; 2 bytes @ 0x4
   755                           
   756     0049                     ___awmod@divisor:	
   757                           ; 2 bytes @ 0x4
   758                           
   759                           
   760                           ; 2 bytes @ 0x4
   761     0049                     	ds	2
   762     004B                     map@inputmax:
   763     004B                     ___awmod@dividend:	
   764                           ; 2 bytes @ 0x6
   765                           
   766                           
   767                           ; 2 bytes @ 0x6
   768     004B                     	ds	1
   769     004C                     ??_sprintf:
   770                           
   771                           ; 1 bytes @ 0x7
   772     004C                     	ds	1
   773     004D                     map@outmin:
   774                           
   775                           ; 2 bytes @ 0x8
   776     004D                     	ds	2
   777     004F                     sprintf@ap:
   778     004F                     map@outmax:	
   779                           ; 1 bytes @ 0xA
   780                           
   781                           
   782                           ; 2 bytes @ 0xA
   783     004F                     	ds	1
   784     0050                     sprintf@flag:
   785                           
   786                           ; 1 bytes @ 0xB
   787     0050                     	ds	1
   788     0051                     sprintf@prec:
   789                           
   790                           ; 1 bytes @ 0xC
   791     0051                     	ds	1
   792     0052                     sprintf@val:
   793                           
   794                           ; 2 bytes @ 0xD
   795     0052                     	ds	2
   796     0054                     sprintf@sp:
   797                           
   798                           ; 1 bytes @ 0xF
   799     0054                     	ds	1
   800     0055                     sprintf@c:
   801                           
   802                           ; 1 bytes @ 0x10
   803     0055                     	ds	1
   804     0056                     ??_main:
   805                           
   806                           ; 1 bytes @ 0x11
   807     0056                     	ds	3
   808                           
   809                           	psect	maintext
   810     06D6                     __pmaintext:	
   811 ;;
   812 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   813 ;;
   814 ;; *************** function _main *****************
   815 ;; Defined at:
   816 ;;		line 48 in file "main.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;		None
   819 ;; Auto vars:     Size  Location     Type
   820 ;;		None
   821 ;; Return value:  Size  Location     Type
   822 ;;                  1    wreg      void 
   823 ;; Registers used:
   824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   825 ;; Tracked objects:
   826 ;;		On entry : B00/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   830 ;;      Params:         0       0       0       0       0
   831 ;;      Locals:         0       0       0       0       0
   832 ;;      Temps:          0       3       0       0       0
   833 ;;      Totals:         0       3       0       0       0
   834 ;;Total ram usage:        3 bytes
   835 ;; Hardware stack levels required when called: 3
   836 ;; This function calls:
   837 ;;		_Lcd_Init
   838 ;;		_Lcd_Set_Cursor
   839 ;;		_Lcd_Write_String
   840 ;;		___awdiv
   841 ;;		___awmod
   842 ;;		___wmul
   843 ;;		_map
   844 ;;		_setup
   845 ;;		_spiRead
   846 ;;		_spiWrite
   847 ;;		_sprintf
   848 ;; This function is called by:
   849 ;;		Startup code after reset
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853     06D6                     _main:	
   854                           ;psect for function _main
   855                           
   856     06D6                     l1479:	
   857                           ;incstack = 0
   858                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   859                           
   860                           
   861                           ;main.c: 49:     setup();
   862     06D6  120A  118A  2308  120A  118A  	fcall	_setup
   863                           
   864                           ;main.c: 50:     Lcd_Init();
   865     06DB  120A  118A  2536  120A  118A  	fcall	_Lcd_Init
   866                           
   867                           ;main.c: 52:     Lcd_Set_Cursor(1,7);
   868     06E0  3007               	movlw	7
   869     06E1  00F4               	movwf	Lcd_Set_Cursor@b
   870     06E2  3001               	movlw	1
   871     06E3  120A  118A  2495  120A  118A  	fcall	_Lcd_Set_Cursor
   872     06E8                     l1481:
   873                           
   874                           ;main.c: 53:     Lcd_Write_String("S2:");
   875     06E8  3018               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   876     06E9  00F5               	movwf	Lcd_Write_String@a
   877     06EA  3080               	movlw	128
   878     06EB  00F6               	movwf	Lcd_Write_String@a+1
   879     06EC  120A  118A  240F  120A  118A  	fcall	_Lcd_Write_String
   880     06F1                     l1483:
   881                           
   882                           ;main.c: 54:     Lcd_Set_Cursor(1,1);
   883     06F1  01F4               	clrf	Lcd_Set_Cursor@b
   884     06F2  0AF4               	incf	Lcd_Set_Cursor@b,f
   885     06F3  3001               	movlw	1
   886     06F4  120A  118A  2495  120A  118A  	fcall	_Lcd_Set_Cursor
   887                           
   888                           ;main.c: 55:     Lcd_Write_String("S1:");
   889     06F9  3014               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   890     06FA  00F5               	movwf	Lcd_Write_String@a
   891     06FB  3080               	movlw	128
   892     06FC  00F6               	movwf	Lcd_Write_String@a+1
   893     06FD  120A  118A  240F  120A  118A  	fcall	_Lcd_Write_String
   894     0702                     l1485:
   895                           
   896                           ;main.c: 56:     Lcd_Set_Cursor(1,14);
   897     0702  300E               	movlw	14
   898     0703  00F4               	movwf	Lcd_Set_Cursor@b
   899     0704  3001               	movlw	1
   900     0705  120A  118A  2495  120A  118A  	fcall	_Lcd_Set_Cursor
   901     070A                     l1487:
   902                           
   903                           ;main.c: 57:     Lcd_Write_String("S3:");
   904     070A  301C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   905     070B  00F5               	movwf	Lcd_Write_String@a
   906     070C  3080               	movlw	128
   907     070D  00F6               	movwf	Lcd_Write_String@a+1
   908     070E  120A  118A  240F  120A  118A  	fcall	_Lcd_Write_String
   909     0713                     l1489:
   910                           
   911                           ;main.c: 58:     _delay((unsigned long)((1000)*(4000000/4000.0)));
   912     0713  3006               	movlw	6
   913     0714  1283               	bcf	3,5	;RP0=0, select bank0
   914     0715  1303               	bcf	3,6	;RP1=0, select bank0
   915     0716  00D8               	movwf	??_main+2
   916     0717  3013               	movlw	19
   917     0718  00D7               	movwf	??_main+1
   918     0719  30AD               	movlw	173
   919     071A  00D6               	movwf	??_main
   920     071B                     u1157:
   921     071B  0BD6               	decfsz	??_main,f
   922     071C  2F1B               	goto	u1157
   923     071D  0BD7               	decfsz	??_main+1,f
   924     071E  2F1B               	goto	u1157
   925     071F  0BD8               	decfsz	??_main+2,f
   926     0720  2F1B               	goto	u1157
   927     0721                     l1491:
   928                           
   929                           ;main.c: 60:         PORTCbits.RC2 = 0;
   930     0721  1283               	bcf	3,5	;RP0=0, select bank0
   931     0722  1303               	bcf	3,6	;RP1=0, select bank0
   932     0723  1107               	bcf	7,2	;volatile
   933     0724                     l1493:
   934                           
   935                           ;main.c: 61:         spiWrite(1);
   936     0724  3001               	movlw	1
   937     0725  120A  118A  22BA  120A  118A  	fcall	_spiWrite
   938     072A                     l1495:
   939                           
   940                           ;main.c: 62:         voltaje1 = spiRead();
   941     072A  120A  118A  22CF  120A  118A  	fcall	_spiRead
   942     072F  1283               	bcf	3,5	;RP0=0, select bank0
   943     0730  1303               	bcf	3,6	;RP1=0, select bank0
   944     0731  00B0               	movwf	_voltaje1
   945     0732                     l1497:
   946                           
   947                           ;main.c: 63:         _delay((unsigned long)((1)*(4000000/4000.0)));
   948     0732  30C7               	movlw	199
   949     0733  1283               	bcf	3,5	;RP0=0, select bank0
   950     0734  1303               	bcf	3,6	;RP1=0, select bank0
   951     0735  00D6               	movwf	??_main
   952     0736                     u1167:
   953     0736  2F37               	nop2
   954     0737  0BD6               	decfsz	??_main,f
   955     0738  2F36               	goto	u1167
   956     0739  2F3A               	nop2
   957     073A                     l1499:
   958                           
   959                           ;main.c: 64:         PORTCbits.RC2 = 1;
   960     073A  1283               	bcf	3,5	;RP0=0, select bank0
   961     073B  1303               	bcf	3,6	;RP1=0, select bank0
   962     073C  1507               	bsf	7,2	;volatile
   963                           
   964                           ;main.c: 66:         vol1 = map(voltaje1, 0, 255, 0, 100);
   965     073D  3000               	movlw	0
   966     073E  00C9               	movwf	map@inputmin
   967     073F  00CA               	movwf	map@inputmin+1
   968     0740  30FF               	movlw	255
   969     0741  00CB               	movwf	map@inputmax
   970     0742  3000               	movlw	0
   971     0743  00CC               	movwf	map@inputmax+1
   972     0744  3000               	movlw	0
   973     0745  00CD               	movwf	map@outmin
   974     0746  00CE               	movwf	map@outmin+1
   975     0747  3064               	movlw	100
   976     0748  00CF               	movwf	map@outmax
   977     0749  3000               	movlw	0
   978     074A  00D0               	movwf	map@outmax+1
   979     074B  0830               	movf	_voltaje1,w
   980     074C  120A  118A  23A0  120A  118A  	fcall	_map
   981     0751  1283               	bcf	3,5	;RP0=0, select bank0
   982     0752  1303               	bcf	3,6	;RP1=0, select bank0
   983     0753  084A               	movf	?_map+1,w
   984     0754  00AF               	movwf	_vol1+1
   985     0755  0849               	movf	?_map,w
   986     0756  00AE               	movwf	_vol1
   987                           
   988                           ;main.c: 67:         unidad1 = (vol1*5)/100;
   989     0757  3064               	movlw	100
   990     0758  00F6               	movwf	___awdiv@divisor
   991     0759  3000               	movlw	0
   992     075A  00F7               	movwf	___awdiv@divisor+1
   993     075B  082F               	movf	_vol1+1,w
   994     075C  00F1               	movwf	___wmul@multiplier+1
   995     075D  082E               	movf	_vol1,w
   996     075E  00F0               	movwf	___wmul@multiplier
   997     075F  3005               	movlw	5
   998     0760  00F2               	movwf	___wmul@multiplicand
   999     0761  3000               	movlw	0
  1000     0762  00F3               	movwf	___wmul@multiplicand+1
  1001     0763  120A  118A  2348  120A  118A  	fcall	___wmul
  1002     0768  0871               	movf	?___wmul+1,w
  1003     0769  00F9               	movwf	___awdiv@dividend+1
  1004     076A  0870               	movf	?___wmul,w
  1005     076B  00F8               	movwf	___awdiv@dividend
  1006     076C  120A  118A  2593  120A  118A  	fcall	___awdiv
  1007     0771  0877               	movf	?___awdiv+1,w
  1008     0772  1283               	bcf	3,5	;RP0=0, select bank0
  1009     0773  1303               	bcf	3,6	;RP1=0, select bank0
  1010     0774  00AB               	movwf	_unidad1+1
  1011     0775  0876               	movf	?___awdiv,w
  1012     0776  00AA               	movwf	_unidad1
  1013                           
  1014                           ;main.c: 68:         decima1 = ((vol1*5)/10)%10;
  1015     0777  300A               	movlw	10
  1016     0778  00C9               	movwf	___awmod@divisor
  1017     0779  3000               	movlw	0
  1018     077A  00CA               	movwf	___awmod@divisor+1
  1019     077B  300A               	movlw	10
  1020     077C  00F6               	movwf	___awdiv@divisor
  1021     077D  3000               	movlw	0
  1022     077E  00F7               	movwf	___awdiv@divisor+1
  1023     077F  082F               	movf	_vol1+1,w
  1024     0780  00F1               	movwf	___wmul@multiplier+1
  1025     0781  082E               	movf	_vol1,w
  1026     0782  00F0               	movwf	___wmul@multiplier
  1027     0783  3005               	movlw	5
  1028     0784  00F2               	movwf	___wmul@multiplicand
  1029     0785  3000               	movlw	0
  1030     0786  00F3               	movwf	___wmul@multiplicand+1
  1031     0787  120A  118A  2348  120A  118A  	fcall	___wmul
  1032     078C  0871               	movf	?___wmul+1,w
  1033     078D  00F9               	movwf	___awdiv@dividend+1
  1034     078E  0870               	movf	?___wmul,w
  1035     078F  00F8               	movwf	___awdiv@dividend
  1036     0790  120A  118A  2593  120A  118A  	fcall	___awdiv
  1037     0795  0877               	movf	?___awdiv+1,w
  1038     0796  1283               	bcf	3,5	;RP0=0, select bank0
  1039     0797  1303               	bcf	3,6	;RP1=0, select bank0
  1040     0798  00CC               	movwf	___awmod@dividend+1
  1041     0799  0876               	movf	?___awdiv,w
  1042     079A  00CB               	movwf	___awmod@dividend
  1043     079B  120A  118A  24DB  120A  118A  	fcall	___awmod
  1044     07A0  1283               	bcf	3,5	;RP0=0, select bank0
  1045     07A1  1303               	bcf	3,6	;RP1=0, select bank0
  1046     07A2  084A               	movf	?___awmod+1,w
  1047     07A3  00A9               	movwf	_decima1+1
  1048     07A4  0849               	movf	?___awmod,w
  1049     07A5  00A8               	movwf	_decima1
  1050                           
  1051                           ;main.c: 69:         centesima1 = (vol1*5)%10;
  1052     07A6  300A               	movlw	10
  1053     07A7  00C9               	movwf	___awmod@divisor
  1054     07A8  3000               	movlw	0
  1055     07A9  00CA               	movwf	___awmod@divisor+1
  1056     07AA  082F               	movf	_vol1+1,w
  1057     07AB  00F1               	movwf	___wmul@multiplier+1
  1058     07AC  082E               	movf	_vol1,w
  1059     07AD  00F0               	movwf	___wmul@multiplier
  1060     07AE  3005               	movlw	5
  1061     07AF  00F2               	movwf	___wmul@multiplicand
  1062     07B0  3000               	movlw	0
  1063     07B1  00F3               	movwf	___wmul@multiplicand+1
  1064     07B2  120A  118A  2348  120A  118A  	fcall	___wmul
  1065     07B7  0871               	movf	?___wmul+1,w
  1066     07B8  1283               	bcf	3,5	;RP0=0, select bank0
  1067     07B9  1303               	bcf	3,6	;RP1=0, select bank0
  1068     07BA  00CC               	movwf	___awmod@dividend+1
  1069     07BB  0870               	movf	?___wmul,w
  1070     07BC  00CB               	movwf	___awmod@dividend
  1071     07BD  120A  118A  24DB  120A  118A  	fcall	___awmod
  1072     07C2  1283               	bcf	3,5	;RP0=0, select bank0
  1073     07C3  1303               	bcf	3,6	;RP1=0, select bank0
  1074     07C4  084A               	movf	?___awmod+1,w
  1075     07C5  00A7               	movwf	_centesima1+1
  1076     07C6  0849               	movf	?___awmod,w
  1077     07C7  00A6               	movwf	_centesima1
  1078                           
  1079                           ;main.c: 70:         Lcd_Set_Cursor(2,1);
  1080     07C8  01F4               	clrf	Lcd_Set_Cursor@b
  1081     07C9  0AF4               	incf	Lcd_Set_Cursor@b,f
  1082     07CA  3002               	movlw	2
  1083     07CB  120A  118A  2495  120A  118A  	fcall	_Lcd_Set_Cursor
  1084     07D0                     l1501:
  1085                           
  1086                           ;main.c: 71:         sprintf(buffer, "%d.%d%dV" , unidad1 , decima1 , centesima1 );
  1087     07D0  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1088     07D1  1283               	bcf	3,5	;RP0=0, select bank0
  1089     07D2  1303               	bcf	3,6	;RP1=0, select bank0
  1090     07D3  00C5               	movwf	sprintf@f
  1091     07D4  082B               	movf	_unidad1+1,w
  1092     07D5  00C7               	movwf	?_sprintf+2
  1093     07D6  082A               	movf	_unidad1,w
  1094     07D7  00C6               	movwf	?_sprintf+1
  1095     07D8  0829               	movf	_decima1+1,w
  1096     07D9  00C9               	movwf	?_sprintf+4
  1097     07DA  0828               	movf	_decima1,w
  1098     07DB  00C8               	movwf	?_sprintf+3
  1099     07DC  0827               	movf	_centesima1+1,w
  1100     07DD  00CB               	movwf	?_sprintf+6
  1101     07DE  0826               	movf	_centesima1,w
  1102     07DF  00CA               	movwf	?_sprintf+5
  1103     07E0  3031               	movlw	(low (_buffer| 0))& (0+255)
  1104     07E1  120A  118A  25FC  120A  118A  	fcall	_sprintf
  1105     07E6                     l1503:
  1106                           
  1107                           ;main.c: 72:         Lcd_Write_String(buffer);
  1108     07E6  3031               	movlw	(low (_buffer| 0))& (0+255)
  1109     07E7  00F5               	movwf	Lcd_Write_String@a
  1110     07E8  3000               	movlw	0
  1111     07E9  00F6               	movwf	Lcd_Write_String@a+1
  1112     07EA  120A  118A  240F  120A  118A  	fcall	_Lcd_Write_String
  1113     07EF  2F21               	goto	l1491
  1114     07F0  120A  118A  2800   	ljmp	start
  1115     07F3                     __end_of_main:
  1116                           
  1117                           	psect	text1
  1118     05FC                     __ptext1:	
  1119 ;; *************** function _sprintf *****************
  1120 ;; Defined at:
  1121 ;;		line 505 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  sp              1    wreg     PTR unsigned char 
  1124 ;;		 -> buffer(20), 
  1125 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1126 ;;		 -> STR_4(9), 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  sp              1   15[BANK0 ] PTR unsigned char 
  1129 ;;		 -> buffer(20), 
  1130 ;;  tmpval          4    0        struct .
  1131 ;;  val             2   13[BANK0 ] unsigned int 
  1132 ;;  cp              2    0        PTR const unsigned char 
  1133 ;;  len             2    0        unsigned int 
  1134 ;;  c               1   16[BANK0 ] unsigned char 
  1135 ;;  prec            1   12[BANK0 ] char 
  1136 ;;  flag            1   11[BANK0 ] unsigned char 
  1137 ;;  ap              1   10[BANK0 ] PTR void [1]
  1138 ;;		 -> ?_sprintf(2), 
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  2    0[BANK0 ] int 
  1141 ;; Registers used:
  1142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1148 ;;      Params:         0       7       0       0       0
  1149 ;;      Locals:         0       7       0       0       0
  1150 ;;      Temps:          0       3       0       0       0
  1151 ;;      Totals:         0      17       0       0       0
  1152 ;;Total ram usage:       17 bytes
  1153 ;; Hardware stack levels used: 1
  1154 ;; Hardware stack levels required when called: 1
  1155 ;; This function calls:
  1156 ;;		___lwdiv
  1157 ;;		___lwmod
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163     05FC                     _sprintf:	
  1164                           ;psect for function _sprintf
  1165                           
  1166                           
  1167                           ;incstack = 0
  1168                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1169                           ;sprintf@sp stored from wreg
  1170     05FC  1283               	bcf	3,5	;RP0=0, select bank0
  1171     05FD  1303               	bcf	3,6	;RP1=0, select bank0
  1172     05FE  00D4               	movwf	sprintf@sp
  1173     05FF                     l1379:
  1174                           
  1175                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1176     05FF  3046               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1177     0600  00CF               	movwf	sprintf@ap
  1178                           
  1179                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1180     0601  2EC1               	goto	l1431
  1181     0602                     l1381:
  1182                           
  1183                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1184     0602  3025               	movlw	37
  1185     0603  0655               	xorwf	sprintf@c,w
  1186     0604  1903               	btfsc	3,2
  1187     0605  2E07               	goto	u991
  1188     0606  2E08               	goto	u990
  1189     0607                     u991:
  1190     0607  2E12               	goto	l1387
  1191     0608                     u990:
  1192     0608                     l1383:
  1193                           
  1194                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;E:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1195     0608  0854               	movf	sprintf@sp,w
  1196     0609  0084               	movwf	4
  1197     060A  0855               	movf	sprintf@c,w
  1198     060B  1383               	bcf	3,7	;select IRP bank0
  1199     060C  0080               	movwf	0
  1200     060D                     l1385:
  1201     060D  3001               	movlw	1
  1202     060E  00CC               	movwf	??_sprintf
  1203     060F  084C               	movf	??_sprintf,w
  1204     0610  07D4               	addwf	sprintf@sp,f
  1205                           
  1206                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1207     0611  2EC1               	goto	l1431
  1208     0612                     l1387:
  1209                           
  1210                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1211     0612  01D0               	clrf	sprintf@flag
  1212     0613                     l1391:	
  1213                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1214                           
  1215     0613  3001               	movlw	1
  1216     0614  07C5               	addwf	sprintf@f,f
  1217     0615  30FF               	movlw	-1
  1218     0616  0745               	addwf	sprintf@f,w
  1219     0617  0084               	movwf	4
  1220     0618  120A  118A  200D  120A  118A  	fcall	stringdir
  1221     061D  00D5               	movwf	sprintf@c
  1222     061E  00CC               	movwf	??_sprintf
  1223     061F  01CD               	clrf	??_sprintf+1
  1224                           
  1225                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1226                           ; Switch size 1, requested type "simple"
  1227                           ; Number of cases is 1, Range of values is 0 to 0
  1228                           ; switch strategies available:
  1229                           ; Name         Instructions Cycles
  1230                           ; simple_byte            4     3 (average)
  1231                           ; direct_byte           11     8 (fixed)
  1232                           ; jumptable            260     6 (fixed)
  1233                           ;	Chosen strategy is simple_byte
  1234     0620  084D               	movf	??_sprintf+1,w
  1235     0621  3A00               	xorlw	0	; case 0
  1236     0622  1903               	skipnz
  1237     0623  2E25               	goto	l1531
  1238     0624  2EC1               	goto	l1431
  1239     0625                     l1531:
  1240                           
  1241                           ; Switch size 1, requested type "simple"
  1242                           ; Number of cases is 3, Range of values is 0 to 105
  1243                           ; switch strategies available:
  1244                           ; Name         Instructions Cycles
  1245                           ; simple_byte           10     6 (average)
  1246                           ; jumptable            260     6 (fixed)
  1247                           ;	Chosen strategy is simple_byte
  1248     0625  084C               	movf	??_sprintf,w
  1249     0626  3A00               	xorlw	0	; case 0
  1250     0627  1903               	skipnz
  1251     0628  2ED1               	goto	l1433
  1252     0629  3A64               	xorlw	100	; case 100
  1253     062A  1903               	skipnz
  1254     062B  2E30               	goto	l1393
  1255     062C  3A0D               	xorlw	13	; case 105
  1256     062D  1903               	skipnz
  1257     062E  2E30               	goto	l1393
  1258     062F  2EC1               	goto	l1431
  1259     0630                     l1393:
  1260                           
  1261                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1262     0630  084F               	movf	sprintf@ap,w
  1263     0631  0084               	movwf	4
  1264     0632  1383               	bcf	3,7	;select IRP bank0
  1265     0633  0800               	movf	0,w
  1266     0634  00D2               	movwf	sprintf@val
  1267     0635  0A84               	incf	4,f
  1268     0636  0800               	movf	0,w
  1269     0637  00D3               	movwf	sprintf@val+1
  1270     0638                     l1395:
  1271     0638  3002               	movlw	2
  1272     0639  00CC               	movwf	??_sprintf
  1273     063A  084C               	movf	??_sprintf,w
  1274     063B  07CF               	addwf	sprintf@ap,f
  1275     063C                     l1397:
  1276                           
  1277                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1278     063C  1FD3               	btfss	sprintf@val+1,7
  1279     063D  2E3F               	goto	u1001
  1280     063E  2E40               	goto	u1000
  1281     063F                     u1001:
  1282     063F  2E49               	goto	l1403
  1283     0640                     u1000:
  1284     0640                     l1399:
  1285                           
  1286                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1287     0640  3003               	movlw	3
  1288     0641  00CC               	movwf	??_sprintf
  1289     0642  084C               	movf	??_sprintf,w
  1290     0643  04D0               	iorwf	sprintf@flag,f
  1291     0644                     l1401:
  1292                           
  1293                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1294     0644  09D2               	comf	sprintf@val,f
  1295     0645  09D3               	comf	sprintf@val+1,f
  1296     0646  0AD2               	incf	sprintf@val,f
  1297     0647  1903               	skipnz
  1298     0648  0AD3               	incf	sprintf@val+1,f
  1299     0649                     l1403:
  1300                           
  1301                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1302     0649  01D5               	clrf	sprintf@c
  1303     064A  0AD5               	incf	sprintf@c,f
  1304     064B                     l1409:
  1305                           
  1306                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1307     064B  0855               	movf	sprintf@c,w
  1308     064C  00CC               	movwf	??_sprintf
  1309     064D  074C               	addwf	??_sprintf,w
  1310     064E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1311     064F  0084               	movwf	4
  1312     0650  120A  118A  200D  120A  118A  	fcall	stringdir
  1313     0655  00CD               	movwf	??_sprintf+1
  1314     0656  120A  118A  200D  120A  118A  	fcall	stringdir
  1315     065B  00CE               	movwf	??_sprintf+2
  1316     065C  084E               	movf	??_sprintf+2,w
  1317     065D  0253               	subwf	sprintf@val+1,w
  1318     065E  1D03               	skipz
  1319     065F  2E62               	goto	u1015
  1320     0660  084D               	movf	??_sprintf+1,w
  1321     0661  0252               	subwf	sprintf@val,w
  1322     0662                     u1015:
  1323     0662  1803               	skipnc
  1324     0663  2E65               	goto	u1011
  1325     0664  2E66               	goto	u1010
  1326     0665                     u1011:
  1327     0665  2E67               	goto	l1413
  1328     0666                     u1010:
  1329     0666  2E71               	goto	l1415
  1330     0667                     l1413:
  1331     0667  3001               	movlw	1
  1332     0668  00CC               	movwf	??_sprintf
  1333     0669  084C               	movf	??_sprintf,w
  1334     066A  07D5               	addwf	sprintf@c,f
  1335     066B  3005               	movlw	5
  1336     066C  0655               	xorwf	sprintf@c,w
  1337     066D  1D03               	btfss	3,2
  1338     066E  2E70               	goto	u1021
  1339     066F  2E71               	goto	u1020
  1340     0670                     u1021:
  1341     0670  2E4B               	goto	l1409
  1342     0671                     u1020:
  1343     0671                     l1415:
  1344                           
  1345                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1346     0671  0850               	movf	sprintf@flag,w
  1347     0672  3903               	andlw	3
  1348     0673  1903               	btfsc	3,2
  1349     0674  2E76               	goto	u1031
  1350     0675  2E77               	goto	u1030
  1351     0676                     u1031:
  1352     0676  2E80               	goto	l1421
  1353     0677                     u1030:
  1354     0677                     l1417:
  1355                           
  1356                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1357     0677  0854               	movf	sprintf@sp,w
  1358     0678  0084               	movwf	4
  1359     0679  302D               	movlw	45
  1360     067A  1383               	bcf	3,7	;select IRP bank0
  1361     067B  0080               	movwf	0
  1362     067C                     l1419:
  1363     067C  3001               	movlw	1
  1364     067D  00CC               	movwf	??_sprintf
  1365     067E  084C               	movf	??_sprintf,w
  1366     067F  07D4               	addwf	sprintf@sp,f
  1367     0680                     l1421:
  1368                           
  1369                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1370     0680  0855               	movf	sprintf@c,w
  1371     0681  00D1               	movwf	sprintf@prec
  1372                           
  1373                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1374     0682  2EB8               	goto	l1429
  1375     0683                     l1423:
  1376                           
  1377                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;E:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1378     0683  300A               	movlw	10
  1379     0684  00F8               	movwf	___lwmod@divisor
  1380     0685  3000               	movlw	0
  1381     0686  00F9               	movwf	___lwmod@divisor+1
  1382     0687  0851               	movf	sprintf@prec,w
  1383     0688  00CC               	movwf	??_sprintf
  1384     0689  074C               	addwf	??_sprintf,w
  1385     068A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1386     068B  0084               	movwf	4
  1387     068C  120A  118A  200D  120A  118A  	fcall	stringdir
  1388     0691  00F0               	movwf	___lwdiv@divisor
  1389     0692  120A  118A  200D  120A  118A  	fcall	stringdir
  1390     0697  00F1               	movwf	___lwdiv@divisor+1
  1391     0698  0853               	movf	sprintf@val+1,w
  1392     0699  00F3               	movwf	___lwdiv@dividend+1
  1393     069A  0852               	movf	sprintf@val,w
  1394     069B  00F2               	movwf	___lwdiv@dividend
  1395     069C  120A  118A  2451  120A  118A  	fcall	___lwdiv
  1396     06A1  0871               	movf	?___lwdiv+1,w
  1397     06A2  00FB               	movwf	___lwmod@dividend+1
  1398     06A3  0870               	movf	?___lwdiv,w
  1399     06A4  00FA               	movwf	___lwmod@dividend
  1400     06A5  120A  118A  23D5  120A  118A  	fcall	___lwmod
  1401     06AA  0878               	movf	?___lwmod,w
  1402     06AB  3E30               	addlw	48
  1403     06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1404     06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1405     06AE  00D5               	movwf	sprintf@c
  1406     06AF                     l1425:
  1407                           
  1408                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };E:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1409     06AF  0854               	movf	sprintf@sp,w
  1410     06B0  0084               	movwf	4
  1411     06B1  0855               	movf	sprintf@c,w
  1412     06B2  1383               	bcf	3,7	;select IRP bank0
  1413     06B3  0080               	movwf	0
  1414     06B4                     l1427:
  1415     06B4  3001               	movlw	1
  1416     06B5  00CC               	movwf	??_sprintf
  1417     06B6  084C               	movf	??_sprintf,w
  1418     06B7  07D4               	addwf	sprintf@sp,f
  1419     06B8                     l1429:
  1420                           
  1421                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1422     06B8  30FF               	movlw	255
  1423     06B9  00CC               	movwf	??_sprintf
  1424     06BA  084C               	movf	??_sprintf,w
  1425     06BB  07D1               	addwf	sprintf@prec,f
  1426     06BC  0A51               	incf	sprintf@prec,w
  1427     06BD  1D03               	btfss	3,2
  1428     06BE  2EC0               	goto	u1041
  1429     06BF  2EC1               	goto	u1040
  1430     06C0                     u1041:
  1431     06C0  2E83               	goto	l1423
  1432     06C1                     u1040:
  1433     06C1                     l1431:
  1434                           
  1435                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1436     06C1  3001               	movlw	1
  1437     06C2  07C5               	addwf	sprintf@f,f
  1438     06C3  30FF               	movlw	-1
  1439     06C4  0745               	addwf	sprintf@f,w
  1440     06C5  0084               	movwf	4
  1441     06C6  120A  118A  200D  120A  118A  	fcall	stringdir
  1442     06CB  00D5               	movwf	sprintf@c
  1443     06CC  0855               	movf	sprintf@c,w
  1444     06CD  1D03               	btfss	3,2
  1445     06CE  2ED0               	goto	u1051
  1446     06CF  2ED1               	goto	u1050
  1447     06D0                     u1051:
  1448     06D0  2E02               	goto	l1381
  1449     06D1                     u1050:
  1450     06D1                     l1433:
  1451                           
  1452                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1453     06D1  0854               	movf	sprintf@sp,w
  1454     06D2  0084               	movwf	4
  1455     06D3  1383               	bcf	3,7	;select IRP bank0
  1456     06D4  0180               	clrf	0
  1457     06D5                     l259:
  1458     06D5  0008               	return
  1459     06D6                     __end_of_sprintf:
  1460                           
  1461                           	psect	text2
  1462     03D5                     __ptext2:	
  1463 ;; *************** function ___lwmod *****************
  1464 ;; Defined at:
  1465 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  divisor         2    8[COMMON] unsigned int 
  1468 ;;  dividend        2   10[COMMON] unsigned int 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  counter         1   13[COMMON] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2    8[COMMON] unsigned int 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1480 ;;      Params:         4       0       0       0       0
  1481 ;;      Locals:         1       0       0       0       0
  1482 ;;      Temps:          1       0       0       0       0
  1483 ;;      Totals:         6       0       0       0       0
  1484 ;;Total ram usage:        6 bytes
  1485 ;; Hardware stack levels used: 1
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_sprintf
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493     03D5                     ___lwmod:	
  1494                           ;psect for function ___lwmod
  1495                           
  1496     03D5                     l1289:	
  1497                           ;incstack = 0
  1498                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1499                           
  1500     03D5  0878               	movf	___lwmod@divisor,w
  1501     03D6  0479               	iorwf	___lwmod@divisor+1,w
  1502     03D7  1903               	btfsc	3,2
  1503     03D8  2BDA               	goto	u861
  1504     03D9  2BDB               	goto	u860
  1505     03DA                     u861:
  1506     03DA  2C0A               	goto	l1307
  1507     03DB                     u860:
  1508     03DB                     l1291:
  1509     03DB  01FD               	clrf	___lwmod@counter
  1510     03DC  0AFD               	incf	___lwmod@counter,f
  1511     03DD  2BE9               	goto	l1297
  1512     03DE                     l1293:
  1513     03DE  3001               	movlw	1
  1514     03DF                     u875:
  1515     03DF  1003               	clrc
  1516     03E0  0DF8               	rlf	___lwmod@divisor,f
  1517     03E1  0DF9               	rlf	___lwmod@divisor+1,f
  1518     03E2  3EFF               	addlw	-1
  1519     03E3  1D03               	skipz
  1520     03E4  2BDF               	goto	u875
  1521     03E5                     l1295:
  1522     03E5  3001               	movlw	1
  1523     03E6  00FC               	movwf	??___lwmod
  1524     03E7  087C               	movf	??___lwmod,w
  1525     03E8  07FD               	addwf	___lwmod@counter,f
  1526     03E9                     l1297:
  1527     03E9  1FF9               	btfss	___lwmod@divisor+1,7
  1528     03EA  2BEC               	goto	u881
  1529     03EB  2BED               	goto	u880
  1530     03EC                     u881:
  1531     03EC  2BDE               	goto	l1293
  1532     03ED                     u880:
  1533     03ED                     l1299:
  1534     03ED  0879               	movf	___lwmod@divisor+1,w
  1535     03EE  027B               	subwf	___lwmod@dividend+1,w
  1536     03EF  1D03               	skipz
  1537     03F0  2BF3               	goto	u895
  1538     03F1  0878               	movf	___lwmod@divisor,w
  1539     03F2  027A               	subwf	___lwmod@dividend,w
  1540     03F3                     u895:
  1541     03F3  1C03               	skipc
  1542     03F4  2BF6               	goto	u891
  1543     03F5  2BF7               	goto	u890
  1544     03F6                     u891:
  1545     03F6  2BFD               	goto	l1303
  1546     03F7                     u890:
  1547     03F7                     l1301:
  1548     03F7  0878               	movf	___lwmod@divisor,w
  1549     03F8  02FA               	subwf	___lwmod@dividend,f
  1550     03F9  0879               	movf	___lwmod@divisor+1,w
  1551     03FA  1C03               	skipc
  1552     03FB  03FB               	decf	___lwmod@dividend+1,f
  1553     03FC  02FB               	subwf	___lwmod@dividend+1,f
  1554     03FD                     l1303:
  1555     03FD  3001               	movlw	1
  1556     03FE                     u905:
  1557     03FE  1003               	clrc
  1558     03FF  0CF9               	rrf	___lwmod@divisor+1,f
  1559     0400  0CF8               	rrf	___lwmod@divisor,f
  1560     0401  3EFF               	addlw	-1
  1561     0402  1D03               	skipz
  1562     0403  2BFE               	goto	u905
  1563     0404                     l1305:
  1564     0404  3001               	movlw	1
  1565     0405  02FD               	subwf	___lwmod@counter,f
  1566     0406  1D03               	btfss	3,2
  1567     0407  2C09               	goto	u911
  1568     0408  2C0A               	goto	u910
  1569     0409                     u911:
  1570     0409  2BED               	goto	l1299
  1571     040A                     u910:
  1572     040A                     l1307:
  1573     040A  087B               	movf	___lwmod@dividend+1,w
  1574     040B  00F9               	movwf	?___lwmod+1
  1575     040C  087A               	movf	___lwmod@dividend,w
  1576     040D  00F8               	movwf	?___lwmod
  1577     040E                     l545:
  1578     040E  0008               	return
  1579     040F                     __end_of___lwmod:
  1580                           
  1581                           	psect	text3
  1582     0451                     __ptext3:	
  1583 ;; *************** function ___lwdiv *****************
  1584 ;; Defined at:
  1585 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;  divisor         2    0[COMMON] unsigned int 
  1588 ;;  dividend        2    2[COMMON] unsigned int 
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  quotient        2    5[COMMON] unsigned int 
  1591 ;;  counter         1    7[COMMON] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  2    0[COMMON] unsigned int 
  1594 ;; Registers used:
  1595 ;;		wreg, status,2, status,0
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1601 ;;      Params:         4       0       0       0       0
  1602 ;;      Locals:         3       0       0       0       0
  1603 ;;      Temps:          1       0       0       0       0
  1604 ;;      Totals:         8       0       0       0       0
  1605 ;;Total ram usage:        8 bytes
  1606 ;; Hardware stack levels used: 1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_sprintf
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614     0451                     ___lwdiv:	
  1615                           ;psect for function ___lwdiv
  1616                           
  1617     0451                     l1263:	
  1618                           ;incstack = 0
  1619                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1620                           
  1621     0451  01F5               	clrf	___lwdiv@quotient
  1622     0452  01F6               	clrf	___lwdiv@quotient+1
  1623     0453                     l1265:
  1624     0453  0870               	movf	___lwdiv@divisor,w
  1625     0454  0471               	iorwf	___lwdiv@divisor+1,w
  1626     0455  1903               	btfsc	3,2
  1627     0456  2C58               	goto	u791
  1628     0457  2C59               	goto	u790
  1629     0458                     u791:
  1630     0458  2C90               	goto	l1285
  1631     0459                     u790:
  1632     0459                     l1267:
  1633     0459  01F7               	clrf	___lwdiv@counter
  1634     045A  0AF7               	incf	___lwdiv@counter,f
  1635     045B  2C67               	goto	l1273
  1636     045C                     l1269:
  1637     045C  3001               	movlw	1
  1638     045D                     u805:
  1639     045D  1003               	clrc
  1640     045E  0DF0               	rlf	___lwdiv@divisor,f
  1641     045F  0DF1               	rlf	___lwdiv@divisor+1,f
  1642     0460  3EFF               	addlw	-1
  1643     0461  1D03               	skipz
  1644     0462  2C5D               	goto	u805
  1645     0463                     l1271:
  1646     0463  3001               	movlw	1
  1647     0464  00F4               	movwf	??___lwdiv
  1648     0465  0874               	movf	??___lwdiv,w
  1649     0466  07F7               	addwf	___lwdiv@counter,f
  1650     0467                     l1273:
  1651     0467  1FF1               	btfss	___lwdiv@divisor+1,7
  1652     0468  2C6A               	goto	u811
  1653     0469  2C6B               	goto	u810
  1654     046A                     u811:
  1655     046A  2C5C               	goto	l1269
  1656     046B                     u810:
  1657     046B                     l1275:
  1658     046B  3001               	movlw	1
  1659     046C                     u825:
  1660     046C  1003               	clrc
  1661     046D  0DF5               	rlf	___lwdiv@quotient,f
  1662     046E  0DF6               	rlf	___lwdiv@quotient+1,f
  1663     046F  3EFF               	addlw	-1
  1664     0470  1D03               	skipz
  1665     0471  2C6C               	goto	u825
  1666     0472  0871               	movf	___lwdiv@divisor+1,w
  1667     0473  0273               	subwf	___lwdiv@dividend+1,w
  1668     0474  1D03               	skipz
  1669     0475  2C78               	goto	u835
  1670     0476  0870               	movf	___lwdiv@divisor,w
  1671     0477  0272               	subwf	___lwdiv@dividend,w
  1672     0478                     u835:
  1673     0478  1C03               	skipc
  1674     0479  2C7B               	goto	u831
  1675     047A  2C7C               	goto	u830
  1676     047B                     u831:
  1677     047B  2C83               	goto	l1281
  1678     047C                     u830:
  1679     047C                     l1277:
  1680     047C  0870               	movf	___lwdiv@divisor,w
  1681     047D  02F2               	subwf	___lwdiv@dividend,f
  1682     047E  0871               	movf	___lwdiv@divisor+1,w
  1683     047F  1C03               	skipc
  1684     0480  03F3               	decf	___lwdiv@dividend+1,f
  1685     0481  02F3               	subwf	___lwdiv@dividend+1,f
  1686     0482                     l1279:
  1687     0482  1475               	bsf	___lwdiv@quotient,0
  1688     0483                     l1281:
  1689     0483  3001               	movlw	1
  1690     0484                     u845:
  1691     0484  1003               	clrc
  1692     0485  0CF1               	rrf	___lwdiv@divisor+1,f
  1693     0486  0CF0               	rrf	___lwdiv@divisor,f
  1694     0487  3EFF               	addlw	-1
  1695     0488  1D03               	skipz
  1696     0489  2C84               	goto	u845
  1697     048A                     l1283:
  1698     048A  3001               	movlw	1
  1699     048B  02F7               	subwf	___lwdiv@counter,f
  1700     048C  1D03               	btfss	3,2
  1701     048D  2C8F               	goto	u851
  1702     048E  2C90               	goto	u850
  1703     048F                     u851:
  1704     048F  2C6B               	goto	l1275
  1705     0490                     u850:
  1706     0490                     l1285:
  1707     0490  0876               	movf	___lwdiv@quotient+1,w
  1708     0491  00F1               	movwf	?___lwdiv+1
  1709     0492  0875               	movf	___lwdiv@quotient,w
  1710     0493  00F0               	movwf	?___lwdiv
  1711     0494                     l535:
  1712     0494  0008               	return
  1713     0495                     __end_of___lwdiv:
  1714                           
  1715                           	psect	text4
  1716     02BA                     __ptext4:	
  1717 ;; *************** function _spiWrite *****************
  1718 ;; Defined at:
  1719 ;;		line 34 in file "SPI.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  dat             1    wreg     unsigned char 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  dat             1    0[COMMON] unsigned char 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1733 ;;      Params:         0       0       0       0       0
  1734 ;;      Locals:         1       0       0       0       0
  1735 ;;      Temps:          0       0       0       0       0
  1736 ;;      Totals:         1       0       0       0       0
  1737 ;;Total ram usage:        1 bytes
  1738 ;; Hardware stack levels used: 1
  1739 ;; This function calls:
  1740 ;;		Nothing
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746     02BA                     _spiWrite:	
  1747                           ;psect for function _spiWrite
  1748                           
  1749                           
  1750                           ;incstack = 0
  1751                           ; Regs used in _spiWrite: [wreg]
  1752                           ;spiWrite@dat stored from wreg
  1753     02BA  00F0               	movwf	spiWrite@dat
  1754     02BB                     l1371:
  1755                           
  1756                           ;SPI.c: 34: void spiWrite(unsigned char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  1757     02BB  0870               	movf	spiWrite@dat,w
  1758     02BC  1283               	bcf	3,5	;RP0=0, select bank0
  1759     02BD  1303               	bcf	3,6	;RP1=0, select bank0
  1760     02BE  0093               	movwf	19	;volatile
  1761     02BF                     l141:
  1762     02BF  0008               	return
  1763     02C0                     __end_of_spiWrite:
  1764                           
  1765                           	psect	text5
  1766     02CF                     __ptext5:	
  1767 ;; *************** function _spiRead *****************
  1768 ;; Defined at:
  1769 ;;		line 47 in file "SPI.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      unsigned char 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, pclath, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1783 ;;      Params:         0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0
  1786 ;;      Totals:         0       0       0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; Hardware stack levels required when called: 1
  1790 ;; This function calls:
  1791 ;;		_spiReceiveWait
  1792 ;; This function is called by:
  1793 ;;		_main
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797     02CF                     _spiRead:	
  1798                           ;psect for function _spiRead
  1799                           
  1800     02CF                     l1373:	
  1801                           ;incstack = 0
  1802                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1803                           
  1804                           
  1805                           ;SPI.c: 49:     spiReceiveWait();
  1806     02CF  120A  118A  22C0  120A  118A  	fcall	_spiReceiveWait
  1807     02D4                     l1375:
  1808                           
  1809                           ;SPI.c: 50:     return(SSPBUF);
  1810     02D4  1283               	bcf	3,5	;RP0=0, select bank0
  1811     02D5  1303               	bcf	3,6	;RP1=0, select bank0
  1812     02D6  0813               	movf	19,w	;volatile
  1813     02D7                     l149:
  1814     02D7  0008               	return
  1815     02D8                     __end_of_spiRead:
  1816                           
  1817                           	psect	text6
  1818     02C0                     __ptext6:	
  1819 ;; *************** function _spiReceiveWait *****************
  1820 ;; Defined at:
  1821 ;;		line 29 in file "SPI.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;		None
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;		None
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  1    wreg      void 
  1828 ;; Registers used:
  1829 ;;		None
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1835 ;;      Params:         0       0       0       0       0
  1836 ;;      Locals:         0       0       0       0       0
  1837 ;;      Temps:          0       0       0       0       0
  1838 ;;      Totals:         0       0       0       0       0
  1839 ;;Total ram usage:        0 bytes
  1840 ;; Hardware stack levels used: 1
  1841 ;; This function calls:
  1842 ;;		Nothing
  1843 ;; This function is called by:
  1844 ;;		_spiRead
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848     02C0                     _spiReceiveWait:	
  1849                           ;psect for function _spiReceiveWait
  1850                           
  1851     02C0                     l1203:	
  1852                           ;incstack = 0
  1853                           ; Regs used in _spiReceiveWait: []
  1854                           
  1855     02C0                     l135:	
  1856                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  1857                           
  1858     02C0  1683               	bsf	3,5	;RP0=1, select bank1
  1859     02C1  1303               	bcf	3,6	;RP1=0, select bank1
  1860     02C2  1C14               	btfss	20,0	;volatile
  1861     02C3  2AC5               	goto	u641
  1862     02C4  2AC6               	goto	u640
  1863     02C5                     u641:
  1864     02C5  2AC0               	goto	l135
  1865     02C6                     u640:
  1866     02C6                     l138:
  1867     02C6  0008               	return
  1868     02C7                     __end_of_spiReceiveWait:
  1869                           
  1870                           	psect	text7
  1871     0308                     __ptext7:	
  1872 ;; *************** function _setup *****************
  1873 ;; Defined at:
  1874 ;;		line 76 in file "main.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		wreg, status,2, status,0, pclath, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1888 ;;      Params:         0       0       0       0       0
  1889 ;;      Locals:         0       0       0       0       0
  1890 ;;      Temps:          0       0       0       0       0
  1891 ;;      Totals:         0       0       0       0       0
  1892 ;;Total ram usage:        0 bytes
  1893 ;; Hardware stack levels used: 1
  1894 ;; Hardware stack levels required when called: 1
  1895 ;; This function calls:
  1896 ;;		_spiInit
  1897 ;; This function is called by:
  1898 ;;		_main
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902     0308                     _setup:	
  1903                           ;psect for function _setup
  1904                           
  1905     0308                     l1315:	
  1906                           ;incstack = 0
  1907                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1908                           
  1909                           
  1910                           ;main.c: 77:     ANSEL = 0;
  1911     0308  1683               	bsf	3,5	;RP0=1, select bank3
  1912     0309  1703               	bsf	3,6	;RP1=1, select bank3
  1913     030A  0188               	clrf	8	;volatile
  1914                           
  1915                           ;main.c: 78:     ANSELH = 0;
  1916     030B  0189               	clrf	9	;volatile
  1917     030C                     l1317:
  1918                           
  1919                           ;main.c: 80:     TRISCbits.TRISC2 = 0;
  1920     030C  1683               	bsf	3,5	;RP0=1, select bank1
  1921     030D  1303               	bcf	3,6	;RP1=0, select bank1
  1922     030E  1107               	bcf	7,2	;volatile
  1923                           
  1924                           ;main.c: 81:     TRISB = 0;
  1925     030F  0186               	clrf	6	;volatile
  1926                           
  1927                           ;main.c: 82:     TRISD = 0;
  1928     0310  0188               	clrf	8	;volatile
  1929                           
  1930                           ;main.c: 83:     PORTB = 0;
  1931     0311  1283               	bcf	3,5	;RP0=0, select bank0
  1932     0312  1303               	bcf	3,6	;RP1=0, select bank0
  1933     0313  0186               	clrf	6	;volatile
  1934                           
  1935                           ;main.c: 84:     PORTD = 0;
  1936     0314  0188               	clrf	8	;volatile
  1937     0315                     l1319:
  1938                           
  1939                           ;main.c: 85:     PORTCbits.RC2 = 1;
  1940     0315  1507               	bsf	7,2	;volatile
  1941     0316                     l1321:
  1942                           
  1943                           ;main.c: 87:     OSCCONbits.IRCF2 = 1;
  1944     0316  1683               	bsf	3,5	;RP0=1, select bank1
  1945     0317  1303               	bcf	3,6	;RP1=0, select bank1
  1946     0318  170F               	bsf	15,6	;volatile
  1947     0319                     l1323:
  1948                           
  1949                           ;main.c: 88:     OSCCONbits.IRCF1 = 1;
  1950     0319  168F               	bsf	15,5	;volatile
  1951     031A                     l1325:
  1952                           
  1953                           ;main.c: 89:     OSCCONbits.IRCF0 = 0;
  1954     031A  120F               	bcf	15,4	;volatile
  1955     031B                     l1327:
  1956                           
  1957                           ;main.c: 90:     OSCCONbits.SCS = 1;
  1958     031B  140F               	bsf	15,0	;volatile
  1959     031C                     l1329:
  1960                           
  1961                           ;main.c: 92:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW
      +                          , SPI_IDLE_2_ACTIVE);
  1962     031C  01F0               	clrf	spiInit@sDataSample
  1963     031D  01F1               	clrf	spiInit@sClockIdle
  1964     031E  01F2               	clrf	spiInit@sTransmitEdge
  1965     031F  3020               	movlw	32
  1966     0320  120A  118A  22D8  120A  118A  	fcall	_spiInit
  1967     0325                     l70:
  1968     0325  0008               	return
  1969     0326                     __end_of_setup:
  1970                           
  1971                           	psect	text8
  1972     02D8                     __ptext8:	
  1973 ;; *************** function _spiInit *****************
  1974 ;; Defined at:
  1975 ;;		line 12 in file "SPI.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  sType           1    wreg     enum E1292
  1978 ;;  sDataSample     1    0[COMMON] enum E1300
  1979 ;;  sClockIdle      1    1[COMMON] enum E1304
  1980 ;;  sTransmitEdg    1    2[COMMON] enum E1308
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  sType           1    3[COMMON] enum E1292
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1992 ;;      Params:         3       0       0       0       0
  1993 ;;      Locals:         1       0       0       0       0
  1994 ;;      Temps:          0       0       0       0       0
  1995 ;;      Totals:         4       0       0       0       0
  1996 ;;Total ram usage:        4 bytes
  1997 ;; Hardware stack levels used: 1
  1998 ;; This function calls:
  1999 ;;		Nothing
  2000 ;; This function is called by:
  2001 ;;		_setup
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005     02D8                     _spiInit:	
  2006                           ;psect for function _spiInit
  2007                           
  2008                           
  2009                           ;incstack = 0
  2010                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2011                           ;spiInit@sType stored from wreg
  2012     02D8  00F3               	movwf	spiInit@sType
  2013     02D9                     l1163:
  2014                           
  2015                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISCbits.TRISC5 =
      +                           0;
  2016     02D9  1683               	bsf	3,5	;RP0=1, select bank1
  2017     02DA  1303               	bcf	3,6	;RP1=0, select bank1
  2018     02DB  1287               	bcf	7,5	;volatile
  2019                           
  2020                           ;SPI.c: 15:     if(sType & 0b00000100)
  2021     02DC  1D73               	btfss	spiInit@sType,2
  2022     02DD  2ADF               	goto	u621
  2023     02DE  2AE0               	goto	u620
  2024     02DF                     u621:
  2025     02DF  2AE4               	goto	l1169
  2026     02E0                     u620:
  2027     02E0                     l1165:
  2028                           
  2029                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  2030     02E0  0872               	movf	spiInit@sTransmitEdge,w
  2031     02E1  0094               	movwf	20	;volatile
  2032     02E2                     l1167:
  2033                           
  2034                           ;SPI.c: 18:         TRISCbits.TRISC3 = 1;
  2035     02E2  1587               	bsf	7,3	;volatile
  2036                           
  2037                           ;SPI.c: 19:     }
  2038     02E3  2AE8               	goto	l131
  2039     02E4                     l1169:
  2040                           
  2041                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2042     02E4  0870               	movf	spiInit@sDataSample,w
  2043     02E5  0472               	iorwf	spiInit@sTransmitEdge,w
  2044     02E6  0094               	movwf	20	;volatile
  2045     02E7                     l1171:
  2046                           
  2047                           ;SPI.c: 23:         TRISCbits.TRISC3 = 0;
  2048     02E7  1187               	bcf	7,3	;volatile
  2049     02E8                     l131:	
  2050                           ;SPI.c: 24:     }
  2051                           
  2052                           
  2053                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  2054     02E8  0873               	movf	spiInit@sType,w
  2055     02E9  0471               	iorwf	spiInit@sClockIdle,w
  2056     02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2057     02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2058     02EC  0094               	movwf	20	;volatile
  2059     02ED                     l132:
  2060     02ED  0008               	return
  2061     02EE                     __end_of_spiInit:
  2062                           
  2063                           	psect	text9
  2064     03A0                     __ptext9:	
  2065 ;; *************** function _map *****************
  2066 ;; Defined at:
  2067 ;;		line 45 in file "main.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;  value           1    wreg     unsigned char 
  2070 ;;  inputmin        2    4[BANK0 ] int 
  2071 ;;  inputmax        2    6[BANK0 ] int 
  2072 ;;  outmin          2    8[BANK0 ] int 
  2073 ;;  outmax          2   10[BANK0 ] int 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;  value           1   12[COMMON] unsigned char 
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  2    4[BANK0 ] int 
  2078 ;; Registers used:
  2079 ;;		wreg, status,2, status,0, pclath, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2085 ;;      Params:         0       8       0       0       0
  2086 ;;      Locals:         1       0       0       0       0
  2087 ;;      Temps:          1       0       0       0       0
  2088 ;;      Totals:         2       8       0       0       0
  2089 ;;Total ram usage:       10 bytes
  2090 ;; Hardware stack levels used: 1
  2091 ;; Hardware stack levels required when called: 1
  2092 ;; This function calls:
  2093 ;;		___awdiv
  2094 ;;		___wmul
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100     03A0                     _map:	
  2101                           ;psect for function _map
  2102                           
  2103                           
  2104                           ;incstack = 0
  2105                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  2106                           ;map@value stored from wreg
  2107     03A0  00FC               	movwf	map@value
  2108     03A1                     l1311:
  2109                           
  2110                           ;main.c: 46:     return ((value - inputmin)*(outmax-outmin)) / (inputmax-inputmin)+outmi
      +                          n;}
  2111     03A1  1283               	bcf	3,5	;RP0=0, select bank0
  2112     03A2  1303               	bcf	3,6	;RP1=0, select bank0
  2113     03A3  0849               	movf	map@inputmin,w
  2114     03A4  024B               	subwf	map@inputmax,w
  2115     03A5  00F6               	movwf	___awdiv@divisor
  2116     03A6  084A               	movf	map@inputmin+1,w
  2117     03A7  1C03               	skipc
  2118     03A8  0A4A               	incf	map@inputmin+1,w
  2119     03A9  024C               	subwf	map@inputmax+1,w
  2120     03AA  00F7               	movwf	___awdiv@divisor+1
  2121     03AB  087C               	movf	map@value,w
  2122     03AC  00FB               	movwf	??_map
  2123     03AD  0849               	movf	map@inputmin,w
  2124     03AE  027B               	subwf	??_map,w
  2125     03AF  00F0               	movwf	___wmul@multiplier
  2126     03B0  094A               	comf	map@inputmin+1,w
  2127     03B1  1803               	skipnc
  2128     03B2  3E01               	addlw	1
  2129     03B3  00F1               	movwf	___wmul@multiplier+1
  2130     03B4  084D               	movf	map@outmin,w
  2131     03B5  024F               	subwf	map@outmax,w
  2132     03B6  00F2               	movwf	___wmul@multiplicand
  2133     03B7  084E               	movf	map@outmin+1,w
  2134     03B8  1C03               	skipc
  2135     03B9  0A4E               	incf	map@outmin+1,w
  2136     03BA  0250               	subwf	map@outmax+1,w
  2137     03BB  00F3               	movwf	___wmul@multiplicand+1
  2138     03BC  120A  118A  2348  120A  118A  	fcall	___wmul
  2139     03C1  0871               	movf	?___wmul+1,w
  2140     03C2  00F9               	movwf	___awdiv@dividend+1
  2141     03C3  0870               	movf	?___wmul,w
  2142     03C4  00F8               	movwf	___awdiv@dividend
  2143     03C5  120A  118A  2593  120A  118A  	fcall	___awdiv
  2144     03CA  1283               	bcf	3,5	;RP0=0, select bank0
  2145     03CB  1303               	bcf	3,6	;RP1=0, select bank0
  2146     03CC  084D               	movf	map@outmin,w
  2147     03CD  0776               	addwf	?___awdiv,w
  2148     03CE  00C9               	movwf	?_map
  2149     03CF  084E               	movf	map@outmin+1,w
  2150     03D0  1803               	skipnc
  2151     03D1  0A4E               	incf	map@outmin+1,w
  2152     03D2  0777               	addwf	?___awdiv+1,w
  2153     03D3  00CA               	movwf	?_map+1
  2154     03D4                     l59:
  2155     03D4  0008               	return
  2156     03D5                     __end_of_map:
  2157                           
  2158                           	psect	text10
  2159     0348                     __ptext10:	
  2160 ;; *************** function ___wmul *****************
  2161 ;; Defined at:
  2162 ;;		line 15 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  multiplier      2    0[COMMON] unsigned int 
  2165 ;;  multiplicand    2    2[COMMON] unsigned int 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  product         2    4[COMMON] unsigned int 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  2    0[COMMON] unsigned int 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2177 ;;      Params:         4       0       0       0       0
  2178 ;;      Locals:         2       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0
  2180 ;;      Totals:         6       0       0       0       0
  2181 ;;Total ram usage:        6 bytes
  2182 ;; Hardware stack levels used: 1
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		_map
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191     0348                     ___wmul:	
  2192                           ;psect for function ___wmul
  2193                           
  2194     0348                     l1205:	
  2195                           ;incstack = 0
  2196                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2197                           
  2198     0348  01F4               	clrf	___wmul@product
  2199     0349  01F5               	clrf	___wmul@product+1
  2200     034A                     l1207:
  2201     034A  1C70               	btfss	___wmul@multiplier,0
  2202     034B  2B4D               	goto	u651
  2203     034C  2B4E               	goto	u650
  2204     034D                     u651:
  2205     034D  2B54               	goto	l263
  2206     034E                     u650:
  2207     034E                     l1209:
  2208     034E  0872               	movf	___wmul@multiplicand,w
  2209     034F  07F4               	addwf	___wmul@product,f
  2210     0350  1803               	skipnc
  2211     0351  0AF5               	incf	___wmul@product+1,f
  2212     0352  0873               	movf	___wmul@multiplicand+1,w
  2213     0353  07F5               	addwf	___wmul@product+1,f
  2214     0354                     l263:
  2215     0354  3001               	movlw	1
  2216     0355                     u665:
  2217     0355  1003               	clrc
  2218     0356  0DF2               	rlf	___wmul@multiplicand,f
  2219     0357  0DF3               	rlf	___wmul@multiplicand+1,f
  2220     0358  3EFF               	addlw	-1
  2221     0359  1D03               	skipz
  2222     035A  2B55               	goto	u665
  2223     035B                     l1211:
  2224     035B  3001               	movlw	1
  2225     035C                     u675:
  2226     035C  1003               	clrc
  2227     035D  0CF1               	rrf	___wmul@multiplier+1,f
  2228     035E  0CF0               	rrf	___wmul@multiplier,f
  2229     035F  3EFF               	addlw	-1
  2230     0360  1D03               	skipz
  2231     0361  2B5C               	goto	u675
  2232     0362                     l1213:
  2233     0362  0870               	movf	___wmul@multiplier,w
  2234     0363  0471               	iorwf	___wmul@multiplier+1,w
  2235     0364  1D03               	btfss	3,2
  2236     0365  2B67               	goto	u681
  2237     0366  2B68               	goto	u680
  2238     0367                     u681:
  2239     0367  2B4A               	goto	l1207
  2240     0368                     u680:
  2241     0368                     l1215:
  2242     0368  0875               	movf	___wmul@product+1,w
  2243     0369  00F1               	movwf	?___wmul+1
  2244     036A  0874               	movf	___wmul@product,w
  2245     036B  00F0               	movwf	?___wmul
  2246     036C                     l265:
  2247     036C  0008               	return
  2248     036D                     __end_of___wmul:
  2249                           
  2250                           	psect	text11
  2251     0593                     __ptext11:	
  2252 ;; *************** function ___awdiv *****************
  2253 ;; Defined at:
  2254 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  divisor         2    6[COMMON] int 
  2257 ;;  dividend        2    8[COMMON] int 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  quotient        2    2[BANK0 ] int 
  2260 ;;  sign            1    1[BANK0 ] unsigned char 
  2261 ;;  counter         1    0[BANK0 ] unsigned char 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  2    6[COMMON] int 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, status,0
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2271 ;;      Params:         4       0       0       0       0
  2272 ;;      Locals:         0       4       0       0       0
  2273 ;;      Temps:          1       0       0       0       0
  2274 ;;      Totals:         5       4       0       0       0
  2275 ;;Total ram usage:        9 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_map
  2281 ;;		_main
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285     0593                     ___awdiv:	
  2286                           ;psect for function ___awdiv
  2287                           
  2288     0593                     l1219:	
  2289                           ;incstack = 0
  2290                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2291                           
  2292     0593  1283               	bcf	3,5	;RP0=0, select bank0
  2293     0594  1303               	bcf	3,6	;RP1=0, select bank0
  2294     0595  01C6               	clrf	___awdiv@sign
  2295     0596                     l1221:
  2296     0596  1FF7               	btfss	___awdiv@divisor+1,7
  2297     0597  2D99               	goto	u691
  2298     0598  2D9A               	goto	u690
  2299     0599                     u691:
  2300     0599  2DA1               	goto	l1227
  2301     059A                     u690:
  2302     059A                     l1223:
  2303     059A  09F6               	comf	___awdiv@divisor,f
  2304     059B  09F7               	comf	___awdiv@divisor+1,f
  2305     059C  0AF6               	incf	___awdiv@divisor,f
  2306     059D  1903               	skipnz
  2307     059E  0AF7               	incf	___awdiv@divisor+1,f
  2308     059F                     l1225:
  2309     059F  01C6               	clrf	___awdiv@sign
  2310     05A0  0AC6               	incf	___awdiv@sign,f
  2311     05A1                     l1227:
  2312     05A1  1FF9               	btfss	___awdiv@dividend+1,7
  2313     05A2  2DA4               	goto	u701
  2314     05A3  2DA5               	goto	u700
  2315     05A4                     u701:
  2316     05A4  2DAE               	goto	l1233
  2317     05A5                     u700:
  2318     05A5                     l1229:
  2319     05A5  09F8               	comf	___awdiv@dividend,f
  2320     05A6  09F9               	comf	___awdiv@dividend+1,f
  2321     05A7  0AF8               	incf	___awdiv@dividend,f
  2322     05A8  1903               	skipnz
  2323     05A9  0AF9               	incf	___awdiv@dividend+1,f
  2324     05AA                     l1231:
  2325     05AA  3001               	movlw	1
  2326     05AB  00FA               	movwf	??___awdiv
  2327     05AC  087A               	movf	??___awdiv,w
  2328     05AD  06C6               	xorwf	___awdiv@sign,f
  2329     05AE                     l1233:
  2330     05AE  01C7               	clrf	___awdiv@quotient
  2331     05AF  01C8               	clrf	___awdiv@quotient+1
  2332     05B0                     l1235:
  2333     05B0  0876               	movf	___awdiv@divisor,w
  2334     05B1  0477               	iorwf	___awdiv@divisor+1,w
  2335     05B2  1903               	btfsc	3,2
  2336     05B3  2DB5               	goto	u711
  2337     05B4  2DB6               	goto	u710
  2338     05B5                     u711:
  2339     05B5  2DED               	goto	l1255
  2340     05B6                     u710:
  2341     05B6                     l1237:
  2342     05B6  01C5               	clrf	___awdiv@counter
  2343     05B7  0AC5               	incf	___awdiv@counter,f
  2344     05B8  2DC4               	goto	l1243
  2345     05B9                     l1239:
  2346     05B9  3001               	movlw	1
  2347     05BA                     u725:
  2348     05BA  1003               	clrc
  2349     05BB  0DF6               	rlf	___awdiv@divisor,f
  2350     05BC  0DF7               	rlf	___awdiv@divisor+1,f
  2351     05BD  3EFF               	addlw	-1
  2352     05BE  1D03               	skipz
  2353     05BF  2DBA               	goto	u725
  2354     05C0                     l1241:
  2355     05C0  3001               	movlw	1
  2356     05C1  00FA               	movwf	??___awdiv
  2357     05C2  087A               	movf	??___awdiv,w
  2358     05C3  07C5               	addwf	___awdiv@counter,f
  2359     05C4                     l1243:
  2360     05C4  1FF7               	btfss	___awdiv@divisor+1,7
  2361     05C5  2DC7               	goto	u731
  2362     05C6  2DC8               	goto	u730
  2363     05C7                     u731:
  2364     05C7  2DB9               	goto	l1239
  2365     05C8                     u730:
  2366     05C8                     l1245:
  2367     05C8  3001               	movlw	1
  2368     05C9                     u745:
  2369     05C9  1003               	clrc
  2370     05CA  0DC7               	rlf	___awdiv@quotient,f
  2371     05CB  0DC8               	rlf	___awdiv@quotient+1,f
  2372     05CC  3EFF               	addlw	-1
  2373     05CD  1D03               	skipz
  2374     05CE  2DC9               	goto	u745
  2375     05CF  0877               	movf	___awdiv@divisor+1,w
  2376     05D0  0279               	subwf	___awdiv@dividend+1,w
  2377     05D1  1D03               	skipz
  2378     05D2  2DD5               	goto	u755
  2379     05D3  0876               	movf	___awdiv@divisor,w
  2380     05D4  0278               	subwf	___awdiv@dividend,w
  2381     05D5                     u755:
  2382     05D5  1C03               	skipc
  2383     05D6  2DD8               	goto	u751
  2384     05D7  2DD9               	goto	u750
  2385     05D8                     u751:
  2386     05D8  2DE0               	goto	l1251
  2387     05D9                     u750:
  2388     05D9                     l1247:
  2389     05D9  0876               	movf	___awdiv@divisor,w
  2390     05DA  02F8               	subwf	___awdiv@dividend,f
  2391     05DB  0877               	movf	___awdiv@divisor+1,w
  2392     05DC  1C03               	skipc
  2393     05DD  03F9               	decf	___awdiv@dividend+1,f
  2394     05DE  02F9               	subwf	___awdiv@dividend+1,f
  2395     05DF                     l1249:
  2396     05DF  1447               	bsf	___awdiv@quotient,0
  2397     05E0                     l1251:
  2398     05E0  3001               	movlw	1
  2399     05E1                     u765:
  2400     05E1  1003               	clrc
  2401     05E2  0CF7               	rrf	___awdiv@divisor+1,f
  2402     05E3  0CF6               	rrf	___awdiv@divisor,f
  2403     05E4  3EFF               	addlw	-1
  2404     05E5  1D03               	skipz
  2405     05E6  2DE1               	goto	u765
  2406     05E7                     l1253:
  2407     05E7  3001               	movlw	1
  2408     05E8  02C5               	subwf	___awdiv@counter,f
  2409     05E9  1D03               	btfss	3,2
  2410     05EA  2DEC               	goto	u771
  2411     05EB  2DED               	goto	u770
  2412     05EC                     u771:
  2413     05EC  2DC8               	goto	l1245
  2414     05ED                     u770:
  2415     05ED                     l1255:
  2416     05ED  0846               	movf	___awdiv@sign,w
  2417     05EE  1903               	btfsc	3,2
  2418     05EF  2DF1               	goto	u781
  2419     05F0  2DF2               	goto	u780
  2420     05F1                     u781:
  2421     05F1  2DF7               	goto	l1259
  2422     05F2                     u780:
  2423     05F2                     l1257:
  2424     05F2  09C7               	comf	___awdiv@quotient,f
  2425     05F3  09C8               	comf	___awdiv@quotient+1,f
  2426     05F4  0AC7               	incf	___awdiv@quotient,f
  2427     05F5  1903               	skipnz
  2428     05F6  0AC8               	incf	___awdiv@quotient+1,f
  2429     05F7                     l1259:
  2430     05F7  0848               	movf	___awdiv@quotient+1,w
  2431     05F8  00F7               	movwf	?___awdiv+1
  2432     05F9  0847               	movf	___awdiv@quotient,w
  2433     05FA  00F6               	movwf	?___awdiv
  2434     05FB                     l416:
  2435     05FB  0008               	return
  2436     05FC                     __end_of___awdiv:
  2437                           
  2438                           	psect	text12
  2439     04DB                     __ptext12:	
  2440 ;; *************** function ___awmod *****************
  2441 ;; Defined at:
  2442 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  divisor         2    4[BANK0 ] int 
  2445 ;;  dividend        2    6[BANK0 ] int 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  sign            1   13[COMMON] unsigned char 
  2448 ;;  counter         1   12[COMMON] unsigned char 
  2449 ;; Return value:  Size  Location     Type
  2450 ;;                  2    4[BANK0 ] int 
  2451 ;; Registers used:
  2452 ;;		wreg, status,2, status,0
  2453 ;; Tracked objects:
  2454 ;;		On entry : 0/0
  2455 ;;		On exit  : 0/0
  2456 ;;		Unchanged: 0/0
  2457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2458 ;;      Params:         0       4       0       0       0
  2459 ;;      Locals:         2       0       0       0       0
  2460 ;;      Temps:          1       0       0       0       0
  2461 ;;      Totals:         3       4       0       0       0
  2462 ;;Total ram usage:        7 bytes
  2463 ;; Hardware stack levels used: 1
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471     04DB                     ___awmod:	
  2472                           ;psect for function ___awmod
  2473                           
  2474     04DB                     l1441:	
  2475                           ;incstack = 0
  2476                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2477                           
  2478     04DB  01FD               	clrf	___awmod@sign
  2479     04DC                     l1443:
  2480     04DC  1283               	bcf	3,5	;RP0=0, select bank0
  2481     04DD  1303               	bcf	3,6	;RP1=0, select bank0
  2482     04DE  1FCC               	btfss	___awmod@dividend+1,7
  2483     04DF  2CE1               	goto	u1061
  2484     04E0  2CE2               	goto	u1060
  2485     04E1                     u1061:
  2486     04E1  2CE9               	goto	l1449
  2487     04E2                     u1060:
  2488     04E2                     l1445:
  2489     04E2  09CB               	comf	___awmod@dividend,f
  2490     04E3  09CC               	comf	___awmod@dividend+1,f
  2491     04E4  0ACB               	incf	___awmod@dividend,f
  2492     04E5  1903               	skipnz
  2493     04E6  0ACC               	incf	___awmod@dividend+1,f
  2494     04E7                     l1447:
  2495     04E7  01FD               	clrf	___awmod@sign
  2496     04E8  0AFD               	incf	___awmod@sign,f
  2497     04E9                     l1449:
  2498     04E9  1FCA               	btfss	___awmod@divisor+1,7
  2499     04EA  2CEC               	goto	u1071
  2500     04EB  2CED               	goto	u1070
  2501     04EC                     u1071:
  2502     04EC  2CF2               	goto	l1453
  2503     04ED                     u1070:
  2504     04ED                     l1451:
  2505     04ED  09C9               	comf	___awmod@divisor,f
  2506     04EE  09CA               	comf	___awmod@divisor+1,f
  2507     04EF  0AC9               	incf	___awmod@divisor,f
  2508     04F0  1903               	skipnz
  2509     04F1  0ACA               	incf	___awmod@divisor+1,f
  2510     04F2                     l1453:
  2511     04F2  0849               	movf	___awmod@divisor,w
  2512     04F3  044A               	iorwf	___awmod@divisor+1,w
  2513     04F4  1903               	btfsc	3,2
  2514     04F5  2CF7               	goto	u1081
  2515     04F6  2CF8               	goto	u1080
  2516     04F7                     u1081:
  2517     04F7  2D27               	goto	l1471
  2518     04F8                     u1080:
  2519     04F8                     l1455:
  2520     04F8  01FC               	clrf	___awmod@counter
  2521     04F9  0AFC               	incf	___awmod@counter,f
  2522     04FA  2D06               	goto	l1461
  2523     04FB                     l1457:
  2524     04FB  3001               	movlw	1
  2525     04FC                     u1095:
  2526     04FC  1003               	clrc
  2527     04FD  0DC9               	rlf	___awmod@divisor,f
  2528     04FE  0DCA               	rlf	___awmod@divisor+1,f
  2529     04FF  3EFF               	addlw	-1
  2530     0500  1D03               	skipz
  2531     0501  2CFC               	goto	u1095
  2532     0502                     l1459:
  2533     0502  3001               	movlw	1
  2534     0503  00FB               	movwf	??___awmod
  2535     0504  087B               	movf	??___awmod,w
  2536     0505  07FC               	addwf	___awmod@counter,f
  2537     0506                     l1461:
  2538     0506  1FCA               	btfss	___awmod@divisor+1,7
  2539     0507  2D09               	goto	u1101
  2540     0508  2D0A               	goto	u1100
  2541     0509                     u1101:
  2542     0509  2CFB               	goto	l1457
  2543     050A                     u1100:
  2544     050A                     l1463:
  2545     050A  084A               	movf	___awmod@divisor+1,w
  2546     050B  024C               	subwf	___awmod@dividend+1,w
  2547     050C  1D03               	skipz
  2548     050D  2D10               	goto	u1115
  2549     050E  0849               	movf	___awmod@divisor,w
  2550     050F  024B               	subwf	___awmod@dividend,w
  2551     0510                     u1115:
  2552     0510  1C03               	skipc
  2553     0511  2D13               	goto	u1111
  2554     0512  2D14               	goto	u1110
  2555     0513                     u1111:
  2556     0513  2D1A               	goto	l1467
  2557     0514                     u1110:
  2558     0514                     l1465:
  2559     0514  0849               	movf	___awmod@divisor,w
  2560     0515  02CB               	subwf	___awmod@dividend,f
  2561     0516  084A               	movf	___awmod@divisor+1,w
  2562     0517  1C03               	skipc
  2563     0518  03CC               	decf	___awmod@dividend+1,f
  2564     0519  02CC               	subwf	___awmod@dividend+1,f
  2565     051A                     l1467:
  2566     051A  3001               	movlw	1
  2567     051B                     u1125:
  2568     051B  1003               	clrc
  2569     051C  0CCA               	rrf	___awmod@divisor+1,f
  2570     051D  0CC9               	rrf	___awmod@divisor,f
  2571     051E  3EFF               	addlw	-1
  2572     051F  1D03               	skipz
  2573     0520  2D1B               	goto	u1125
  2574     0521                     l1469:
  2575     0521  3001               	movlw	1
  2576     0522  02FC               	subwf	___awmod@counter,f
  2577     0523  1D03               	btfss	3,2
  2578     0524  2D26               	goto	u1131
  2579     0525  2D27               	goto	u1130
  2580     0526                     u1131:
  2581     0526  2D0A               	goto	l1463
  2582     0527                     u1130:
  2583     0527                     l1471:
  2584     0527  087D               	movf	___awmod@sign,w
  2585     0528  1903               	btfsc	3,2
  2586     0529  2D2B               	goto	u1141
  2587     052A  2D2C               	goto	u1140
  2588     052B                     u1141:
  2589     052B  2D31               	goto	l1475
  2590     052C                     u1140:
  2591     052C                     l1473:
  2592     052C  09CB               	comf	___awmod@dividend,f
  2593     052D  09CC               	comf	___awmod@dividend+1,f
  2594     052E  0ACB               	incf	___awmod@dividend,f
  2595     052F  1903               	skipnz
  2596     0530  0ACC               	incf	___awmod@dividend+1,f
  2597     0531                     l1475:
  2598     0531  084C               	movf	___awmod@dividend+1,w
  2599     0532  00CA               	movwf	?___awmod+1
  2600     0533  084B               	movf	___awmod@dividend,w
  2601     0534  00C9               	movwf	?___awmod
  2602     0535                     l429:
  2603     0535  0008               	return
  2604     0536                     __end_of___awmod:
  2605                           
  2606                           	psect	text13
  2607     040F                     __ptext13:	
  2608 ;; *************** function _Lcd_Write_String *****************
  2609 ;; Defined at:
  2610 ;;		line 98 in file "LCD.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  a               2    5[COMMON] PTR unsigned char 
  2613 ;;		 -> buffer(20), STR_3(4), STR_2(4), STR_1(4), 
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;  i               2   10[COMMON] int 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2625 ;;      Params:         2       0       0       0       0
  2626 ;;      Locals:         2       0       0       0       0
  2627 ;;      Temps:          3       0       0       0       0
  2628 ;;      Totals:         7       0       0       0       0
  2629 ;;Total ram usage:        7 bytes
  2630 ;; Hardware stack levels used: 1
  2631 ;; Hardware stack levels required when called: 2
  2632 ;; This function calls:
  2633 ;;		_Lcd_Write_Char
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639     040F                     _Lcd_Write_String:	
  2640                           ;psect for function _Lcd_Write_String
  2641                           
  2642     040F                     l1363:	
  2643                           ;incstack = 0
  2644                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2645                           
  2646                           
  2647                           ;LCD.c: 99:     int i;;LCD.c: 100:     for (i = 0; a[i] != '\0'; i++)
  2648     040F  01FA               	clrf	Lcd_Write_String@i
  2649     0410  01FB               	clrf	Lcd_Write_String@i+1
  2650     0411  2C34               	goto	l1369
  2651     0412                     l1365:
  2652                           
  2653                           ;LCD.c: 101:         Lcd_Write_Char(a[i]);
  2654     0412  087A               	movf	Lcd_Write_String@i,w
  2655     0413  0775               	addwf	Lcd_Write_String@a,w
  2656     0414  00F8               	movwf	??_Lcd_Write_String+1
  2657     0415  0876               	movf	Lcd_Write_String@a+1,w
  2658     0416  00F7               	movwf	??_Lcd_Write_String
  2659     0417  1803               	skipnc
  2660     0418  0AF7               	incf	??_Lcd_Write_String,f
  2661     0419  1FFA               	btfss	Lcd_Write_String@i,7
  2662     041A  2C1C               	goto	u960
  2663     041B  03F7               	decf	??_Lcd_Write_String,f
  2664     041C                     u960:
  2665     041C  0877               	movf	??_Lcd_Write_String,w
  2666     041D  00F9               	movwf	??_Lcd_Write_String+2
  2667     041E  0879               	movf	??_Lcd_Write_String+2,w
  2668     041F  1283               	bcf	3,5	;RP0=0, select bank0
  2669     0420  1303               	bcf	3,6	;RP1=0, select bank0
  2670     0421  00FF               	movwf	btemp+1
  2671     0422  0878               	movf	??_Lcd_Write_String+1,w
  2672     0423  0084               	movwf	4
  2673     0424  120A  118A  2003  120A  118A  	fcall	stringtab
  2674     0429  120A  118A  236D  120A  118A  	fcall	_Lcd_Write_Char
  2675     042E                     l1367:
  2676     042E  3001               	movlw	1
  2677     042F  07FA               	addwf	Lcd_Write_String@i,f
  2678     0430  1803               	skipnc
  2679     0431  0AFB               	incf	Lcd_Write_String@i+1,f
  2680     0432  3000               	movlw	0
  2681     0433  07FB               	addwf	Lcd_Write_String@i+1,f
  2682     0434                     l1369:
  2683     0434  087A               	movf	Lcd_Write_String@i,w
  2684     0435  0775               	addwf	Lcd_Write_String@a,w
  2685     0436  00F8               	movwf	??_Lcd_Write_String+1
  2686     0437  0876               	movf	Lcd_Write_String@a+1,w
  2687     0438  00F7               	movwf	??_Lcd_Write_String
  2688     0439  1803               	skipnc
  2689     043A  0AF7               	incf	??_Lcd_Write_String,f
  2690     043B  1FFA               	btfss	Lcd_Write_String@i,7
  2691     043C  2C3E               	goto	u970
  2692     043D  03F7               	decf	??_Lcd_Write_String,f
  2693     043E                     u970:
  2694     043E  0877               	movf	??_Lcd_Write_String,w
  2695     043F  00F9               	movwf	??_Lcd_Write_String+2
  2696     0440  0879               	movf	??_Lcd_Write_String+2,w
  2697     0441  1283               	bcf	3,5	;RP0=0, select bank0
  2698     0442  1303               	bcf	3,6	;RP1=0, select bank0
  2699     0443  00FF               	movwf	btemp+1
  2700     0444  0878               	movf	??_Lcd_Write_String+1,w
  2701     0445  0084               	movwf	4
  2702     0446  120A  118A  2003  120A  118A  	fcall	stringtab
  2703     044B  3A00               	xorlw	0
  2704     044C  1D03               	skipz
  2705     044D  2C4F               	goto	u981
  2706     044E  2C50               	goto	u980
  2707     044F                     u981:
  2708     044F  2C12               	goto	l1365
  2709     0450                     u980:
  2710     0450                     l111:
  2711     0450  0008               	return
  2712     0451                     __end_of_Lcd_Write_String:
  2713                           
  2714                           	psect	text14
  2715     036D                     __ptext14:	
  2716 ;; *************** function _Lcd_Write_Char *****************
  2717 ;; Defined at:
  2718 ;;		line 83 in file "LCD.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  a               1    wreg     unsigned char 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  a               1    4[COMMON] unsigned char 
  2723 ;;  y               1    3[COMMON] unsigned char 
  2724 ;;  temp            1    2[COMMON] unsigned char 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;                  1    wreg      void 
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, status,0, pclath, cstack
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2734 ;;      Params:         0       0       0       0       0
  2735 ;;      Locals:         3       0       0       0       0
  2736 ;;      Temps:          1       0       0       0       0
  2737 ;;      Totals:         4       0       0       0       0
  2738 ;;Total ram usage:        4 bytes
  2739 ;; Hardware stack levels used: 1
  2740 ;; Hardware stack levels required when called: 1
  2741 ;; This function calls:
  2742 ;;		_Lcd_Port
  2743 ;; This function is called by:
  2744 ;;		_Lcd_Write_String
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748     036D                     _Lcd_Write_Char:	
  2749                           ;psect for function _Lcd_Write_Char
  2750                           
  2751                           
  2752                           ;incstack = 0
  2753                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2754                           ;Lcd_Write_Char@a stored from wreg
  2755     036D  00F4               	movwf	Lcd_Write_Char@a
  2756     036E                     l1183:
  2757                           
  2758                           ;LCD.c: 84:     char temp, y;;LCD.c: 85:     temp = a & 0x0F;
  2759     036E  0874               	movf	Lcd_Write_Char@a,w
  2760     036F  390F               	andlw	15
  2761     0370  00F2               	movwf	Lcd_Write_Char@temp
  2762                           
  2763                           ;LCD.c: 86:     y = a & 0xF0;
  2764     0371  0874               	movf	Lcd_Write_Char@a,w
  2765     0372  39F0               	andlw	240
  2766     0373  00F3               	movwf	Lcd_Write_Char@y
  2767     0374                     l1185:
  2768                           
  2769                           ;LCD.c: 87:     PORTDbits.RD6 = 1;
  2770     0374  1283               	bcf	3,5	;RP0=0, select bank0
  2771     0375  1303               	bcf	3,6	;RP1=0, select bank0
  2772     0376  1708               	bsf	8,6	;volatile
  2773     0377                     l1187:
  2774                           
  2775                           ;LCD.c: 88:     Lcd_Port(y >> 4);
  2776     0377  0873               	movf	Lcd_Write_Char@y,w
  2777     0378  00F1               	movwf	??_Lcd_Write_Char
  2778     0379  3004               	movlw	4
  2779     037A                     u635:
  2780     037A  1003               	clrc
  2781     037B  0CF1               	rrf	??_Lcd_Write_Char,f
  2782     037C  3EFF               	addlw	-1
  2783     037D  1D03               	skipz
  2784     037E  2B7A               	goto	u635
  2785     037F  0871               	movf	??_Lcd_Write_Char,w
  2786     0380  120A  118A  2326  120A  118A  	fcall	_Lcd_Port
  2787     0385                     l1189:
  2788                           
  2789                           ;LCD.c: 89:     PORTDbits.RD7 = 1;
  2790     0385  1283               	bcf	3,5	;RP0=0, select bank0
  2791     0386  1303               	bcf	3,6	;RP1=0, select bank0
  2792     0387  1788               	bsf	8,7	;volatile
  2793     0388                     l1191:
  2794                           
  2795                           ;LCD.c: 90:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2796     0388  300D               	movlw	13
  2797     0389  00F1               	movwf	??_Lcd_Write_Char
  2798     038A                     u1177:
  2799     038A  0BF1               	decfsz	??_Lcd_Write_Char,f
  2800     038B  2B8A               	goto	u1177
  2801     038C                     l1193:
  2802                           
  2803                           ;LCD.c: 91:     PORTDbits.RD7 = 0;
  2804     038C  1283               	bcf	3,5	;RP0=0, select bank0
  2805     038D  1303               	bcf	3,6	;RP1=0, select bank0
  2806     038E  1388               	bcf	8,7	;volatile
  2807     038F                     l1195:
  2808                           
  2809                           ;LCD.c: 92:     Lcd_Port(temp);
  2810     038F  0872               	movf	Lcd_Write_Char@temp,w
  2811     0390  120A  118A  2326  120A  118A  	fcall	_Lcd_Port
  2812     0395                     l1197:
  2813                           
  2814                           ;LCD.c: 93:     PORTDbits.RD7 = 1;
  2815     0395  1283               	bcf	3,5	;RP0=0, select bank0
  2816     0396  1303               	bcf	3,6	;RP1=0, select bank0
  2817     0397  1788               	bsf	8,7	;volatile
  2818     0398                     l1199:
  2819                           
  2820                           ;LCD.c: 94:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2821     0398  300D               	movlw	13
  2822     0399  00F1               	movwf	??_Lcd_Write_Char
  2823     039A                     u1187:
  2824     039A  0BF1               	decfsz	??_Lcd_Write_Char,f
  2825     039B  2B9A               	goto	u1187
  2826     039C                     l1201:
  2827                           
  2828                           ;LCD.c: 95:     PORTDbits.RD7 = 0;
  2829     039C  1283               	bcf	3,5	;RP0=0, select bank0
  2830     039D  1303               	bcf	3,6	;RP1=0, select bank0
  2831     039E  1388               	bcf	8,7	;volatile
  2832     039F                     l105:
  2833     039F  0008               	return
  2834     03A0                     __end_of_Lcd_Write_Char:
  2835                           
  2836                           	psect	text15
  2837     0495                     __ptext15:	
  2838 ;; *************** function _Lcd_Set_Cursor *****************
  2839 ;; Defined at:
  2840 ;;		line 48 in file "LCD.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  a               1    wreg     unsigned char 
  2843 ;;  b               1    4[COMMON] unsigned char 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  a               1    6[COMMON] unsigned char 
  2846 ;;  temp            1    9[COMMON] unsigned char 
  2847 ;;  y               1    8[COMMON] unsigned char 
  2848 ;;  z               1    7[COMMON] unsigned char 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  1    wreg      void 
  2851 ;; Registers used:
  2852 ;;		wreg, status,2, status,0, pclath, cstack
  2853 ;; Tracked objects:
  2854 ;;		On entry : 0/0
  2855 ;;		On exit  : 0/0
  2856 ;;		Unchanged: 0/0
  2857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2858 ;;      Params:         1       0       0       0       0
  2859 ;;      Locals:         4       0       0       0       0
  2860 ;;      Temps:          1       0       0       0       0
  2861 ;;      Totals:         6       0       0       0       0
  2862 ;;Total ram usage:        6 bytes
  2863 ;; Hardware stack levels used: 1
  2864 ;; Hardware stack levels required when called: 2
  2865 ;; This function calls:
  2866 ;;		_Lcd_Cmd
  2867 ;; This function is called by:
  2868 ;;		_main
  2869 ;; This function uses a non-reentrant model
  2870 ;;
  2871                           
  2872     0495                     _Lcd_Set_Cursor:	
  2873                           ;psect for function _Lcd_Set_Cursor
  2874                           
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2878                           ;Lcd_Set_Cursor@a stored from wreg
  2879     0495  00F6               	movwf	Lcd_Set_Cursor@a
  2880     0496                     l1343:
  2881                           
  2882                           ;LCD.c: 49:     char temp, z, y;;LCD.c: 50:     if (a == 1) {
  2883     0496  0376               	decf	Lcd_Set_Cursor@a,w
  2884     0497  1D03               	btfss	3,2
  2885     0498  2C9A               	goto	u921
  2886     0499  2C9B               	goto	u920
  2887     049A                     u921:
  2888     049A  2CB8               	goto	l1353
  2889     049B                     u920:
  2890     049B                     l1345:
  2891                           
  2892                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  2893     049B  0874               	movf	Lcd_Set_Cursor@b,w
  2894     049C  3E7F               	addlw	127
  2895     049D  00F9               	movwf	Lcd_Set_Cursor@temp
  2896                           
  2897                           ;LCD.c: 52:         z = temp >> 4;
  2898     049E  0879               	movf	Lcd_Set_Cursor@temp,w
  2899     049F  00F5               	movwf	??_Lcd_Set_Cursor
  2900     04A0  3004               	movlw	4
  2901     04A1                     u935:
  2902     04A1  1003               	clrc
  2903     04A2  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2904     04A3  3EFF               	addlw	-1
  2905     04A4  1D03               	skipz
  2906     04A5  2CA1               	goto	u935
  2907     04A6  0875               	movf	??_Lcd_Set_Cursor,w
  2908     04A7  00F7               	movwf	Lcd_Set_Cursor@z
  2909     04A8                     l1347:
  2910                           
  2911                           ;LCD.c: 53:         y = temp & 0x0F;
  2912     04A8  0879               	movf	Lcd_Set_Cursor@temp,w
  2913     04A9  390F               	andlw	15
  2914     04AA  00F8               	movwf	Lcd_Set_Cursor@y
  2915     04AB                     l1349:
  2916                           
  2917                           ;LCD.c: 54:         Lcd_Cmd(z);
  2918     04AB  0877               	movf	Lcd_Set_Cursor@z,w
  2919     04AC  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  2920     04B1                     l1351:
  2921                           
  2922                           ;LCD.c: 55:         Lcd_Cmd(y);
  2923     04B1  0878               	movf	Lcd_Set_Cursor@y,w
  2924     04B2  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  2925                           
  2926                           ;LCD.c: 56:     } else if (a == 2) {
  2927     04B7  2CDA               	goto	l99
  2928     04B8                     l1353:
  2929     04B8  3002               	movlw	2
  2930     04B9  0676               	xorwf	Lcd_Set_Cursor@a,w
  2931     04BA  1D03               	btfss	3,2
  2932     04BB  2CBD               	goto	u941
  2933     04BC  2CBE               	goto	u940
  2934     04BD                     u941:
  2935     04BD  2CDA               	goto	l99
  2936     04BE                     u940:
  2937     04BE                     l1355:
  2938                           
  2939                           ;LCD.c: 57:         temp = 0xC0 + b - 1;
  2940     04BE  0874               	movf	Lcd_Set_Cursor@b,w
  2941     04BF  3EBF               	addlw	191
  2942     04C0  00F9               	movwf	Lcd_Set_Cursor@temp
  2943                           
  2944                           ;LCD.c: 58:         z = temp >> 4;
  2945     04C1  0879               	movf	Lcd_Set_Cursor@temp,w
  2946     04C2  00F5               	movwf	??_Lcd_Set_Cursor
  2947     04C3  3004               	movlw	4
  2948     04C4                     u955:
  2949     04C4  1003               	clrc
  2950     04C5  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2951     04C6  3EFF               	addlw	-1
  2952     04C7  1D03               	skipz
  2953     04C8  2CC4               	goto	u955
  2954     04C9  0875               	movf	??_Lcd_Set_Cursor,w
  2955     04CA  00F7               	movwf	Lcd_Set_Cursor@z
  2956     04CB                     l1357:
  2957                           
  2958                           ;LCD.c: 59:         y = temp & 0x0F;
  2959     04CB  0879               	movf	Lcd_Set_Cursor@temp,w
  2960     04CC  390F               	andlw	15
  2961     04CD  00F8               	movwf	Lcd_Set_Cursor@y
  2962     04CE                     l1359:
  2963                           
  2964                           ;LCD.c: 60:         Lcd_Cmd(z);
  2965     04CE  0877               	movf	Lcd_Set_Cursor@z,w
  2966     04CF  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  2967     04D4                     l1361:
  2968                           
  2969                           ;LCD.c: 61:         Lcd_Cmd(y);
  2970     04D4  0878               	movf	Lcd_Set_Cursor@y,w
  2971     04D5  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  2972     04DA                     l99:
  2973     04DA  0008               	return
  2974     04DB                     __end_of_Lcd_Set_Cursor:
  2975                           
  2976                           	psect	text16
  2977     0536                     __ptext16:	
  2978 ;; *************** function _Lcd_Init *****************
  2979 ;; Defined at:
  2980 ;;		line 65 in file "LCD.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;		None
  2985 ;; Return value:  Size  Location     Type
  2986 ;;                  1    wreg      void 
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0, pclath, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2994 ;;      Params:         0       0       0       0       0
  2995 ;;      Locals:         0       0       0       0       0
  2996 ;;      Temps:          2       0       0       0       0
  2997 ;;      Totals:         2       0       0       0       0
  2998 ;;Total ram usage:        2 bytes
  2999 ;; Hardware stack levels used: 1
  3000 ;; Hardware stack levels required when called: 2
  3001 ;; This function calls:
  3002 ;;		_Lcd_Cmd
  3003 ;;		_Lcd_Port
  3004 ;; This function is called by:
  3005 ;;		_main
  3006 ;; This function uses a non-reentrant model
  3007 ;;
  3008                           
  3009     0536                     _Lcd_Init:	
  3010                           ;psect for function _Lcd_Init
  3011                           
  3012     0536                     l1331:	
  3013                           ;incstack = 0
  3014                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3015                           
  3016                           
  3017                           ;LCD.c: 66:     Lcd_Port(0x00);
  3018     0536  3000               	movlw	0
  3019     0537  120A  118A  2326  120A  118A  	fcall	_Lcd_Port
  3020     053C                     l1333:
  3021                           
  3022                           ;LCD.c: 67:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3023     053C  301A               	movlw	26
  3024     053D  00F5               	movwf	??_Lcd_Init+1
  3025     053E  30F8               	movlw	248
  3026     053F  00F4               	movwf	??_Lcd_Init
  3027     0540                     u1197:
  3028     0540  0BF4               	decfsz	??_Lcd_Init,f
  3029     0541  2D40               	goto	u1197
  3030     0542  0BF5               	decfsz	??_Lcd_Init+1,f
  3031     0543  2D40               	goto	u1197
  3032     0544  0000               	nop
  3033     0545                     l1335:
  3034                           
  3035                           ;LCD.c: 68:     Lcd_Cmd(0x03);
  3036     0545  3003               	movlw	3
  3037     0546  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3038                           
  3039                           ;LCD.c: 69:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3040     054B  3007               	movlw	7
  3041     054C  00F5               	movwf	??_Lcd_Init+1
  3042     054D  307D               	movlw	125
  3043     054E  00F4               	movwf	??_Lcd_Init
  3044     054F                     u1207:
  3045     054F  0BF4               	decfsz	??_Lcd_Init,f
  3046     0550  2D4F               	goto	u1207
  3047     0551  0BF5               	decfsz	??_Lcd_Init+1,f
  3048     0552  2D4F               	goto	u1207
  3049     0553                     l1337:
  3050                           
  3051                           ;LCD.c: 70:     Lcd_Cmd(0x03);
  3052     0553  3003               	movlw	3
  3053     0554  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3054     0559                     l1339:
  3055                           
  3056                           ;LCD.c: 71:     _delay((unsigned long)((200)*(4000000/4000000.0)));
  3057     0559  3042               	movlw	66
  3058     055A  00F4               	movwf	??_Lcd_Init
  3059     055B                     u1217:
  3060     055B  0BF4               	decfsz	??_Lcd_Init,f
  3061     055C  2D5B               	goto	u1217
  3062     055D  0000               	nop
  3063                           
  3064                           ;LCD.c: 72:     Lcd_Cmd(0x03);
  3065     055E  3003               	movlw	3
  3066     055F  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3067                           
  3068                           ;LCD.c: 73:     Lcd_Cmd(0x02);
  3069     0564  3002               	movlw	2
  3070     0565  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3071                           
  3072                           ;LCD.c: 74:     Lcd_Cmd(0x02);
  3073     056A  3002               	movlw	2
  3074     056B  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3075                           
  3076                           ;LCD.c: 75:     Lcd_Cmd(0x08);
  3077     0570  3008               	movlw	8
  3078     0571  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3079                           
  3080                           ;LCD.c: 76:     Lcd_Cmd(0x00);
  3081     0576  3000               	movlw	0
  3082     0577  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3083                           
  3084                           ;LCD.c: 77:     Lcd_Cmd(0x0C);
  3085     057C  300C               	movlw	12
  3086     057D  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3087                           
  3088                           ;LCD.c: 78:     Lcd_Cmd(0x00);
  3089     0582  3000               	movlw	0
  3090     0583  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3091                           
  3092                           ;LCD.c: 79:     Lcd_Cmd(0x06);
  3093     0588  3006               	movlw	6
  3094     0589  120A  118A  22EE  120A  118A  	fcall	_Lcd_Cmd
  3095     058E                     l1341:
  3096                           
  3097                           ;LCD.c: 80:  _delay((unsigned long)((100)*(4000000/4000000.0)));
  3098     058E  3021               	movlw	33
  3099     058F  00F4               	movwf	??_Lcd_Init
  3100     0590                     u1227:
  3101     0590  0BF4               	decfsz	??_Lcd_Init,f
  3102     0591  2D90               	goto	u1227
  3103     0592                     l102:
  3104     0592  0008               	return
  3105     0593                     __end_of_Lcd_Init:
  3106                           
  3107                           	psect	text17
  3108     02EE                     __ptext17:	
  3109 ;; *************** function _Lcd_Cmd *****************
  3110 ;; Defined at:
  3111 ;;		line 35 in file "LCD.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  a               1    wreg     unsigned char 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  a               1    3[COMMON] unsigned char 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, status,2, status,0, pclath, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3125 ;;      Params:         0       0       0       0       0
  3126 ;;      Locals:         1       0       0       0       0
  3127 ;;      Temps:          2       0       0       0       0
  3128 ;;      Totals:         3       0       0       0       0
  3129 ;;Total ram usage:        3 bytes
  3130 ;; Hardware stack levels used: 1
  3131 ;; Hardware stack levels required when called: 1
  3132 ;; This function calls:
  3133 ;;		_Lcd_Port
  3134 ;; This function is called by:
  3135 ;;		_Lcd_Set_Cursor
  3136 ;;		_Lcd_Init
  3137 ;;		_Lcd_Clear
  3138 ;;		_Lcd_Shift_Right
  3139 ;;		_Lcd_Shift_Left
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143     02EE                     _Lcd_Cmd:	
  3144                           ;psect for function _Lcd_Cmd
  3145                           
  3146                           
  3147                           ;incstack = 0
  3148                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3149                           ;Lcd_Cmd@a stored from wreg
  3150     02EE  00F3               	movwf	Lcd_Cmd@a
  3151     02EF                     l1173:
  3152                           
  3153                           ;LCD.c: 36:     PORTDbits.RD6 = 0;
  3154     02EF  1283               	bcf	3,5	;RP0=0, select bank0
  3155     02F0  1303               	bcf	3,6	;RP1=0, select bank0
  3156     02F1  1308               	bcf	8,6	;volatile
  3157     02F2                     l1175:
  3158                           
  3159                           ;LCD.c: 37:     Lcd_Port(a);
  3160     02F2  0873               	movf	Lcd_Cmd@a,w
  3161     02F3  120A  118A  2326  120A  118A  	fcall	_Lcd_Port
  3162     02F8                     l1177:
  3163                           
  3164                           ;LCD.c: 38:     PORTDbits.RD7 = 1;
  3165     02F8  1283               	bcf	3,5	;RP0=0, select bank0
  3166     02F9  1303               	bcf	3,6	;RP1=0, select bank0
  3167     02FA  1788               	bsf	8,7	;volatile
  3168     02FB                     l1179:
  3169                           
  3170                           ;LCD.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3171     02FB  3006               	movlw	6
  3172     02FC  00F2               	movwf	??_Lcd_Cmd+1
  3173     02FD  3030               	movlw	48
  3174     02FE  00F1               	movwf	??_Lcd_Cmd
  3175     02FF                     u1237:
  3176     02FF  0BF1               	decfsz	??_Lcd_Cmd,f
  3177     0300  2AFF               	goto	u1237
  3178     0301  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3179     0302  2AFF               	goto	u1237
  3180     0303  0000               	nop
  3181     0304                     l1181:
  3182                           
  3183                           ;LCD.c: 40:     PORTDbits.RD7 = 0;
  3184     0304  1283               	bcf	3,5	;RP0=0, select bank0
  3185     0305  1303               	bcf	3,6	;RP1=0, select bank0
  3186     0306  1388               	bcf	8,7	;volatile
  3187     0307                     l90:
  3188     0307  0008               	return
  3189     0308                     __end_of_Lcd_Cmd:
  3190                           
  3191                           	psect	text18
  3192     0326                     __ptext18:	
  3193 ;; *************** function _Lcd_Port *****************
  3194 ;; Defined at:
  3195 ;;		line 13 in file "LCD.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  a               1    wreg     unsigned char 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  a               1    0[COMMON] unsigned char 
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  1    wreg      void 
  3202 ;; Registers used:
  3203 ;;		wreg
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3209 ;;      Params:         0       0       0       0       0
  3210 ;;      Locals:         1       0       0       0       0
  3211 ;;      Temps:          0       0       0       0       0
  3212 ;;      Totals:         1       0       0       0       0
  3213 ;;Total ram usage:        1 bytes
  3214 ;; Hardware stack levels used: 1
  3215 ;; This function calls:
  3216 ;;		Nothing
  3217 ;; This function is called by:
  3218 ;;		_Lcd_Cmd
  3219 ;;		_Lcd_Init
  3220 ;;		_Lcd_Write_Char
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224     0326                     _Lcd_Port:	
  3225                           ;psect for function _Lcd_Port
  3226                           
  3227                           
  3228                           ;incstack = 0
  3229                           ; Regs used in _Lcd_Port: [wreg]
  3230                           ;Lcd_Port@a stored from wreg
  3231     0326  00F0               	movwf	Lcd_Port@a
  3232     0327                     l1153:
  3233                           
  3234                           ;LCD.c: 14:     if (a & 1)
  3235     0327  1C70               	btfss	Lcd_Port@a,0
  3236     0328  2B2A               	goto	u581
  3237     0329  2B2B               	goto	u580
  3238     032A                     u581:
  3239     032A  2B2F               	goto	l79
  3240     032B                     u580:
  3241     032B                     l1155:
  3242                           
  3243                           ;LCD.c: 15:         PORTBbits.RB4 = 1;
  3244     032B  1283               	bcf	3,5	;RP0=0, select bank0
  3245     032C  1303               	bcf	3,6	;RP1=0, select bank0
  3246     032D  1606               	bsf	6,4	;volatile
  3247     032E  2B32               	goto	l80
  3248     032F                     l79:	
  3249                           ;LCD.c: 16:     else
  3250                           
  3251                           
  3252                           ;LCD.c: 17:         PORTBbits.RB4 = 0;
  3253     032F  1283               	bcf	3,5	;RP0=0, select bank0
  3254     0330  1303               	bcf	3,6	;RP1=0, select bank0
  3255     0331  1206               	bcf	6,4	;volatile
  3256     0332                     l80:
  3257                           
  3258                           ;LCD.c: 19:     if (a & 2)
  3259     0332  1CF0               	btfss	Lcd_Port@a,1
  3260     0333  2B35               	goto	u591
  3261     0334  2B36               	goto	u590
  3262     0335                     u591:
  3263     0335  2B38               	goto	l81
  3264     0336                     u590:
  3265     0336                     l1157:
  3266                           
  3267                           ;LCD.c: 20:         PORTBbits.RB5 = 1;
  3268     0336  1686               	bsf	6,5	;volatile
  3269     0337  2B39               	goto	l82
  3270     0338                     l81:	
  3271                           ;LCD.c: 21:     else
  3272                           
  3273                           
  3274                           ;LCD.c: 22:         PORTBbits.RB5 = 0;
  3275     0338  1286               	bcf	6,5	;volatile
  3276     0339                     l82:
  3277                           
  3278                           ;LCD.c: 24:     if (a & 4)
  3279     0339  1D70               	btfss	Lcd_Port@a,2
  3280     033A  2B3C               	goto	u601
  3281     033B  2B3D               	goto	u600
  3282     033C                     u601:
  3283     033C  2B3F               	goto	l83
  3284     033D                     u600:
  3285     033D                     l1159:
  3286                           
  3287                           ;LCD.c: 25:         PORTBbits.RB6 = 1;
  3288     033D  1706               	bsf	6,6	;volatile
  3289     033E  2B40               	goto	l84
  3290     033F                     l83:	
  3291                           ;LCD.c: 26:     else
  3292                           
  3293                           
  3294                           ;LCD.c: 27:         PORTBbits.RB6 = 0;
  3295     033F  1306               	bcf	6,6	;volatile
  3296     0340                     l84:
  3297                           
  3298                           ;LCD.c: 29:     if (a & 8)
  3299     0340  1DF0               	btfss	Lcd_Port@a,3
  3300     0341  2B43               	goto	u611
  3301     0342  2B44               	goto	u610
  3302     0343                     u611:
  3303     0343  2B46               	goto	l85
  3304     0344                     u610:
  3305     0344                     l1161:
  3306                           
  3307                           ;LCD.c: 30:         PORTBbits.RB7 = 1;
  3308     0344  1786               	bsf	6,7	;volatile
  3309     0345  2B47               	goto	l87
  3310     0346                     l85:	
  3311                           ;LCD.c: 31:     else
  3312                           
  3313                           
  3314                           ;LCD.c: 32:         PORTBbits.RB7 = 0;
  3315     0346  1386               	bcf	6,7	;volatile
  3316     0347                     l87:
  3317     0347  0008               	return
  3318     0348                     __end_of_Lcd_Port:
  3319     007E                     btemp	set	126	;btemp
  3320     007E                     wtemp0	set	126
  3321                           
  3322                           	psect	idloc
  3323                           
  3324                           ;Config register IDLOC0 @ 0x2000
  3325                           ;	unspecified, using default values
  3326     2000                     	org	8192
  3327     2000  3FFF               	dw	16383
  3328                           
  3329                           ;Config register IDLOC1 @ 0x2001
  3330                           ;	unspecified, using default values
  3331     2001                     	org	8193
  3332     2001  3FFF               	dw	16383
  3333                           
  3334                           ;Config register IDLOC2 @ 0x2002
  3335                           ;	unspecified, using default values
  3336     2002                     	org	8194
  3337     2002  3FFF               	dw	16383
  3338                           
  3339                           ;Config register IDLOC3 @ 0x2003
  3340                           ;	unspecified, using default values
  3341     2003                     	org	8195
  3342     2003  3FFF               	dw	16383
  3343                           
  3344                           	psect	config
  3345                           
  3346                           ;Config register CONFIG1 @ 0x2007
  3347                           ;	Oscillator Selection bits
  3348                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3349                           ;	Watchdog Timer Enable bit
  3350                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3351                           ;	Power-up Timer Enable bit
  3352                           ;	PWRTE = OFF, PWRT disabled
  3353                           ;	RE3/MCLR pin function select bit
  3354                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3355                           ;	Code Protection bit
  3356                           ;	CP = OFF, Program memory code protection is disabled
  3357                           ;	Data Code Protection bit
  3358                           ;	CPD = OFF, Data memory code protection is disabled
  3359                           ;	Brown Out Reset Selection bits
  3360                           ;	BOREN = OFF, BOR disabled
  3361                           ;	Internal External Switchover bit
  3362                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3363                           ;	Fail-Safe Clock Monitor Enabled bit
  3364                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3365                           ;	Low Voltage Programming Enable bit
  3366                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3367                           ;	In-Circuit Debugger Mode bit
  3368                           ;	DEBUG = 0x1, unprogramme  3369     2007                     	org	8199
  3370     2007  20D4               	dw	8404
  3371                           
  3372                           ;Config register CONFIG2 @ 0x2008
  3373                           ;	Brown-out Reset Selection bit
  3374                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3375                           ;	Flash Program Memory Self Write Enable bits
  3376                           ;	WRT = OFF, Write protection off
  3377     2008                     	org	8200
  3378     2008  3FFF               	dw	16383

Data Sizes:
    Strings     21
    Constant    10
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     20      57
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_4(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->___awmod
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_spiInit
    _map->___awdiv
    ___awdiv->___wmul
    ___awmod->___awdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _map->___awdiv
    ___awmod->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    7017
                                             17 BANK0      3     3      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                             ___wmul
                                _map
                              _setup
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    18      7    1211
                                              0 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     2      8    1914
                                             11 COMMON     2     2      0
                                              4 BANK0      8     0      8
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     700
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     756
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     600
                                             11 COMMON     3     3      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     572
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     684
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
     ___wmul (ARG)
   ___awmod
     ___awdiv (ARG)
     ___wmul (ARG)
   ___wmul
   _map
     ___awdiv
     ___wmul
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      47       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      39       5       71.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      47      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Feb 03 00:42:36 2023

                       pc 0002               map@inputmax 004B               map@inputmin 0049  
             _SSPSTATbits 0094                        l70 0325                        l80 0332  
                      l81 0338                        l82 0339                        l90 0307  
                      l83 033F                        l59 03D4                        l84 0340  
                      l85 0346                        l87 0347                        l79 032F  
                      l99 04DA              ___awdiv@sign 0046                        fsr 0004  
     ___wmul@multiplicand 0072                       l102 0592                       l111 0450  
                     l105 039F                       l131 02E8                       l132 02ED  
                     l141 02BF                       l135 02C0                       l138 02C6  
                     l149 02D7                       l263 0354                       l416 05FB  
                     l265 036C                       l259 06D5                       l429 0535  
                     l535 0494                       l545 040E                       u600 033D  
                     u601 033C                       u610 0344                       u611 0343  
                     u700 05A5                       u620 02E0                       u701 05A4  
                     u621 02DF                       u710 05B6                       u711 05B5  
                     u640 02C6                       u641 02C5                       u730 05C8  
                     u650 034E                       u810 046B                       u635 037A  
                     u731 05C7                       u651 034D                       u811 046A  
                     u580 032B                       u581 032A                       u725 05BA  
                     u805 045D                       u590 0336                       u750 05D9  
                     u830 047C                       u910 040A                       u591 0335  
                     u751 05D8                       u831 047B                       u911 0409  
                     u920 049B                       u680 0368                       u921 049A  
                     u745 05C9                       u681 0367                       u665 0355  
                     u825 046C                       u905 03FE                       u770 05ED  
                     u690 059A                       u850 0490                       u771 05EC  
                     u755 05D5                       u691 0599                       u675 035C  
                     u851 048F                       u835 0478                       u940 04BE  
                     u780 05F2                       u860 03DB                       u941 04BD  
                     u781 05F1                       u765 05E1                       u845 0484  
                     u861 03DA                       u790 0459                       u935 04A1  
                     u791 0458                       u960 041C                       u880 03ED  
                     u881 03EC                       u970 043E                       u890 03F7  
                     u955 04C4                       u891 03F6                       u875 03DF  
                     u980 0450                       u981 044F                       u990 0608  
                     u895 03F3                       u991 0607                       _map 03A0  
                     fsr0 0004                       indf 0000              ___awmod@sign 007D  
                    l1201 039C                      l1211 035B                      l1203 02C0  
                    l1221 0596                      l1213 0362                      l1205 0348  
                    l1301 03F7                      l1231 05AA                      l1223 059A  
                    l1215 0368                      l1207 034A                      l1311 03A1  
                    l1303 03FD                      l1161 0344                      l1153 0327  
                    l1241 05C0                      l1233 05AE                      l1225 059F  
                    l1209 034E                      l1321 0316                      l1305 0404  
                    l1401 0644                      l1155 032B                      l1331 0536  
                    l1251 05E0                      l1243 05C4                      l1235 05B0  
                    l1227 05A1                      l1219 0593                      l1171 02E7  
                    l1163 02D9                      l1323 0319                      l1315 0308  
                    l1307 040A                      l1403 0649                      l1157 0336  
                    l1181 0304                      l1173 02EF                      l1341 058E  
                    l1333 053C                      l1253 05E7                      l1245 05C8  
                    l1237 05B6                      l1229 05A5                      l1165 02E0  
                    l1325 031A                      l1317 030C                      l1421 0680  
                    l1413 0667                      l1501 07D0                      l1159 033D  
                    l1175 02F2                      l1335 0545                      l1351 04B1  
                    l1343 0496                      l1191 0388                      l1183 036E  
                    l1247 05D9                      l1239 05B9                      l1255 05ED  
                    l1167 02E2                      l1327 031B                      l1319 0315  
                    l1271 0463                      l1263 0451                      l1423 0683  
                    l1415 0671                      l1431 06C1                      l1503 07E6  
                    l1177 02F8                      l1337 0553                      l1361 04D4  
                    l1345 049B                      l1353 04B8                      l1193 038C  
                    l1185 0374                      l1441 04DB                      l1257 05F2  
                    l1249 05DF                      l1169 02E4                      l1329 031C  
                    l1281 0483                      l1273 0467                      l1265 0453  
                    l1425 06AF                      l1417 0677                      l1409 064B  
                    l1433 06D1                      l1179 02FB                      l1339 0559  
                    l1355 04BE                      l1347 04A8                      l1195 038F  
                    l1187 0377                      l1363 040F                      l1451 04ED  
                    l1443 04DC                      l1259 05F7                      l1371 02BB  
                    l1283 048A                      l1275 046B                      l1267 0459  
                    l1291 03DB                      l1427 06B4                      l1419 067C  
                    l1531 0625                      l1357 04CB                      l1349 04AB  
                    l1197 0395                      l1189 0385                      l1365 0412  
                    l1461 0506                      l1453 04F2                      l1445 04E2  
                    l1373 02CF                      l1277 047C                      l1269 045C  
                    l1285 0490                      l1293 03DE                      l1429 06B8  
                    l1381 0602                      l1359 04CE                      l1199 0398  
                    l1367 042E                      l1463 050A                      l1455 04F8  
                    l1471 0527                      l1447 04E7                      l1375 02D4  
                    l1279 0482                      l1295 03E5                      l1391 0613  
                    l1383 0608                      l1369 0434                      l1473 052C  
                    l1465 0514                      l1457 04FB                      l1449 04E9  
                    l1297 03E9                      l1289 03D5                      l1393 0630  
                    l1385 060D                      l1481 06E8                      l1475 0531  
                    l1467 051A                      l1459 0502                      l1299 03ED  
                    l1395 0638                      l1387 0612                      l1379 05FF  
                    l1491 0721                      l1483 06F1                      l1469 0521  
                    l1397 063C                      l1493 0724                      l1485 0702  
                    l1399 0640                      l1495 072A                      l1487 070A  
                    l1479 06D6                      l1497 0732                      l1489 0713  
                    l1499 073A                      ?_map 0049                      STR_1 002A  
                    STR_2 0026                      STR_3 002E                      STR_4 001D  
                    u1000 0640                      u1001 063F                      u1010 0666  
                    u1011 0665                      u1100 050A                      u1020 0671  
                    u1101 0509                      u1021 0670                      u1110 0514  
                    u1030 0677                      u1111 0513                      u1031 0676  
                    u1015 0662                      u1040 06C1                      u1041 06C0  
                    u1130 0527                      u1050 06D1                      u1131 0526  
                    u1115 0510                      u1051 06D0                      u1140 052C  
                    u1060 04E2                      u1141 052B                      u1125 051B  
                    u1061 04E1                      u1070 04ED                      u1207 054F  
                    u1071 04EC                      u1080 04F8                      u1217 055B  
                    u1081 04F7                      u1227 0590                      u1237 02FF  
                    u1157 071B                      u1095 04FC                      u1167 0736  
                    u1177 038A                      u1187 039A                      u1197 0540  
       ?_Lcd_Write_String 0075                      _main 06D6                      _vol1 002E  
                    _vol2 002C                      btemp 007E                      start 0000  
      ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 0308                     ??_map 007B  
                   ?_main 0070           __end_of___awdiv 05FC           __end_of___awmod 0536  
                   _ANSEL 0188           ___awdiv@divisor 0076           __end_of___lwdiv 0495  
         __end_of___lwmod 040F           ___awdiv@counter 0045                     _PORTB 0006  
                   _PORTD 0008                     _TRISB 0086                     _TRISD 0088  
         __end_of_dpowers 001D                     _setup 0308                     pclath 000A  
         __end_of_spiInit 02EE           __end_of_spiRead 02D8                     status 0003  
                   wtemp0 007E           __end_of_sprintf 06D6          __end_of_Lcd_Init 0593  
        __end_of_Lcd_Port 0348           __initialization 07F3              __end_of_main 07F3  
                  ??_main 0056          ___awdiv@dividend 0078                    ?_setup 0070  
                  _ANSELH 0189                 ??_Lcd_Cmd 0071                    _SSPCON 0014  
                  _SSPBUF 0013                    ___wmul 0348                 ??___awdiv 007A  
               ??___awmod 007B                 ??___lwdiv 0074                 ??___lwmod 007C  
                  _buffer 0031          ___awdiv@quotient 0047           ___awmod@divisor 0049  
         ___awmod@counter 007C          __end_of_spiWrite 02C0                 ??_spiInit 0073  
               ??_spiRead 0070                 ??_sprintf 004C           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
 __end_of__initialization 07FC            __pcstackCOMMON 0070             __end_of_setup 0326  
          _Lcd_Set_Cursor 0495                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
                 ??_setup 0074                __pbssBANK0 0020                __pmaintext 06D6  
                 ?___wmul 0070                _centesima1 0026                _centesima2 0020  
  __end_of_Lcd_Set_Cursor 04DB                ??_Lcd_Init 0074                ??_Lcd_Port 0070  
                 _SSPSTAT 0094                __stringtab 0003            _Lcd_Write_Char 036D  
                 _Lcd_Cmd 02EE                 ?_spiWrite 0070                   ___awdiv 0593  
                 ___awmod 04DB                   ___lwdiv 0451                   ___lwmod 03D5  
                 _decima1 0028                   _decima2 0022           ?_Lcd_Set_Cursor 0074  
                 __ptext1 05FC                   __ptext2 03D5                   __ptext3 0451  
                 __ptext4 02BA                   __ptext5 02CF                   __ptext6 02C0  
                 __ptext7 0308                   __ptext8 02D8                   __ptext9 03A0  
                 _dpowers 0013          ___awmod@dividend 004B                   _spiInit 02D8  
                 _spiRead 02CF                   _unidad1 002A                   _unidad2 0024  
                 _sprintf 05FC                   clrloop0 02C8    __end_of_Lcd_Write_Char 03A0  
    end_of_initialization 07FC                ??_spiWrite 0070                 Lcd_Port@a 0070  
               _PORTBbits 0006                 _PORTCbits 0007                 _PORTDbits 0008  
               _TRISCbits 0087               spiWrite@dat 0070           ?_Lcd_Write_Char 0070  
       Lcd_Write_String@a 0075         Lcd_Write_String@i 007A            _spiReceiveWait 02C0  
          __end_of___wmul 036D          _Lcd_Write_String 040F       start_initialization 07F3  
             __end_of_map 03D5    __end_of_spiReceiveWait 02C7                  ??___wmul 0074  
         Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073                 ___latbits 0002  
           __pcstackBANK0 0045                  ?_Lcd_Cmd 0070               sprintf@flag 0050  
             sprintf@prec 0051          ___lwdiv@dividend 0072           ?_spiReceiveWait 0070  
        ??_Lcd_Set_Cursor 0075                  ?___awdiv 0076                  ?___awmod 0049  
                ?___lwdiv 0070                  ?___lwmod 0078                 __pstrings 0003  
                ?_spiInit 0070                  ?_spiRead 0070          ___lwdiv@quotient 0075  
                ?_sprintf 0045      spiInit@sTransmitEdge 0072            ___wmul@product 0074  
               clear_ram0 02C7        spiInit@sDataSample 0070                  Lcd_Cmd@a 0073  
             __stringbase 0012         ___wmul@multiplier 0070                 map@outmax 004F  
               map@outmin 004D          ??_Lcd_Write_Char 0071                  _Lcd_Init 0536  
                _Lcd_Port 0326  __end_of_Lcd_Write_String 0451        __end_of__stringtab 0013  
              sprintf@val 0052           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 0348                  __ptext11 0593                  __ptext12 04DB  
                __ptext13 040F                  __ptext14 036D                  __ptext15 0495  
                __ptext16 0536                  __ptext17 02EE                  __ptext18 0326  
                _spiWrite 02BA              spiInit@sType 0073                  map@value 007C  
       spiInit@sClockIdle 0071                  _voltaje1 0030        Lcd_Write_Char@temp 0072  
               sprintf@ap 004F                 sprintf@sp 0054          ___lwmod@dividend 007A  
        ??_spiReceiveWait 0070                 stringcode 000D                _OSCCONbits 008F  
      Lcd_Set_Cursor@temp 0079                  sprintf@c 0055                  sprintf@f 0045  
         ___lwmod@divisor 0078           ___lwmod@counter 007D                  stringdir 000D  
                stringtab 0003  
