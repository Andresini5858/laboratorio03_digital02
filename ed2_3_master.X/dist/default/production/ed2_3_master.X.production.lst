

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Feb 03 02:18:41 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    31                           	dabs	1,0x7E,2
    32     0000                     
    33                           ; Version 2.40
    34                           ; Generated 17/11/2021 GMT
    35                           ; 
    36                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68     0000                     	;# 
    69     0001                     	;# 
    70     0002                     	;# 
    71     0003                     	;# 
    72     0004                     	;# 
    73     0005                     	;# 
    74     0006                     	;# 
    75     0007                     	;# 
    76     0008                     	;# 
    77     0009                     	;# 
    78     000A                     	;# 
    79     000B                     	;# 
    80     000C                     	;# 
    81     000D                     	;# 
    82     000E                     	;# 
    83     000E                     	;# 
    84     000F                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0013                     	;# 
    89     0014                     	;# 
    90     0015                     	;# 
    91     0015                     	;# 
    92     0016                     	;# 
    93     0017                     	;# 
    94     0018                     	;# 
    95     0019                     	;# 
    96     001A                     	;# 
    97     001B                     	;# 
    98     001B                     	;# 
    99     001C                     	;# 
   100     001D                     	;# 
   101     001E                     	;# 
   102     001F                     	;# 
   103     0081                     	;# 
   104     0085                     	;# 
   105     0086                     	;# 
   106     0087                     	;# 
   107     0088                     	;# 
   108     0089                     	;# 
   109     008C                     	;# 
   110     008D                     	;# 
   111     008E                     	;# 
   112     008F                     	;# 
   113     0090                     	;# 
   114     0091                     	;# 
   115     0092                     	;# 
   116     0093                     	;# 
   117     0093                     	;# 
   118     0093                     	;# 
   119     0094                     	;# 
   120     0095                     	;# 
   121     0096                     	;# 
   122     0097                     	;# 
   123     0098                     	;# 
   124     0099                     	;# 
   125     009A                     	;# 
   126     009B                     	;# 
   127     009C                     	;# 
   128     009D                     	;# 
   129     009E                     	;# 
   130     009F                     	;# 
   131     0105                     	;# 
   132     0107                     	;# 
   133     0108                     	;# 
   134     0109                     	;# 
   135     010C                     	;# 
   136     010C                     	;# 
   137     010D                     	;# 
   138     010E                     	;# 
   139     010F                     	;# 
   140     0185                     	;# 
   141     0187                     	;# 
   142     0188                     	;# 
   143     0189                     	;# 
   144     018C                     	;# 
   145     018D                     	;# 
   146     0000                     	;# 
   147     0001                     	;# 
   148     0002                     	;# 
   149     0003                     	;# 
   150     0004                     	;# 
   151     0005                     	;# 
   152     0006                     	;# 
   153     0007                     	;# 
   154     0008                     	;# 
   155     0009                     	;# 
   156     000A                     	;# 
   157     000B                     	;# 
   158     000C                     	;# 
   159     000D                     	;# 
   160     000E                     	;# 
   161     000E                     	;# 
   162     000F                     	;# 
   163     0010                     	;# 
   164     0011                     	;# 
   165     0012                     	;# 
   166     0013                     	;# 
   167     0014                     	;# 
   168     0015                     	;# 
   169     0015                     	;# 
   170     0016                     	;# 
   171     0017                     	;# 
   172     0018                     	;# 
   173     0019                     	;# 
   174     001A                     	;# 
   175     001B                     	;# 
   176     001B                     	;# 
   177     001C                     	;# 
   178     001D                     	;# 
   179     001E                     	;# 
   180     001F                     	;# 
   181     0081                     	;# 
   182     0085                     	;# 
   183     0086                     	;# 
   184     0087                     	;# 
   185     0088                     	;# 
   186     0089                     	;# 
   187     008C                     	;# 
   188     008D                     	;# 
   189     008E                     	;# 
   190     008F                     	;# 
   191     0090                     	;# 
   192     0091                     	;# 
   193     0092                     	;# 
   194     0093                     	;# 
   195     0093                     	;# 
   196     0093                     	;# 
   197     0094                     	;# 
   198     0095                     	;# 
   199     0096                     	;# 
   200     0097                     	;# 
   201     0098                     	;# 
   202     0099                     	;# 
   203     009A                     	;# 
   204     009B                     	;# 
   205     009C                     	;# 
   206     009D                     	;# 
   207     009E                     	;# 
   208     009F                     	;# 
   209     0105                     	;# 
   210     0107                     	;# 
   211     0108                     	;# 
   212     0109                     	;# 
   213     010C                     	;# 
   214     010C                     	;# 
   215     010D                     	;# 
   216     010E                     	;# 
   217     010F                     	;# 
   218     0185                     	;# 
   219     0187                     	;# 
   220     0188                     	;# 
   221     0189                     	;# 
   222     018C                     	;# 
   223     018D                     	;# 
   224     0000                     	;# 
   225     0001                     	;# 
   226     0002                     	;# 
   227     0003                     	;# 
   228     0004                     	;# 
   229     0005                     	;# 
   230     0006                     	;# 
   231     0007                     	;# 
   232     0008                     	;# 
   233     0009                     	;# 
   234     000A                     	;# 
   235     000B                     	;# 
   236     000C                     	;# 
   237     000D                     	;# 
   238     000E                     	;# 
   239     000E                     	;# 
   240     000F                     	;# 
   241     0010                     	;# 
   242     0011                     	;# 
   243     0012                     	;# 
   244     0013                     	;# 
   245     0014                     	;# 
   246     0015                     	;# 
   247     0015                     	;# 
   248     0016                     	;# 
   249     0017                     	;# 
   250     0018                     	;# 
   251     0019                     	;# 
   252     001A                     	;# 
   253     001B                     	;# 
   254     001B                     	;# 
   255     001C                     	;# 
   256     001D                     	;# 
   257     001E                     	;# 
   258     001F                     	;# 
   259     0081                     	;# 
   260     0085                     	;# 
   261     0086                     	;# 
   262     0087                     	;# 
   263     0088                     	;# 
   264     0089                     	;# 
   265     008C                     	;# 
   266     008D                     	;# 
   267     008E                     	;# 
   268     008F                     	;# 
   269     0090                     	;# 
   270     0091                     	;# 
   271     0092                     	;# 
   272     0093                     	;# 
   273     0093                     	;# 
   274     0093                     	;# 
   275     0094                     	;# 
   276     0095                     	;# 
   277     0096                     	;# 
   278     0097                     	;# 
   279     0098                     	;# 
   280     0099                     	;# 
   281     009A                     	;# 
   282     009B                     	;# 
   283     009C                     	;# 
   284     009D                     	;# 
   285     009E                     	;# 
   286     009F                     	;# 
   287     0105                     	;# 
   288     0107                     	;# 
   289     0108                     	;# 
   290     0109                     	;# 
   291     010C                     	;# 
   292     010C                     	;# 
   293     010D                     	;# 
   294     010E                     	;# 
   295     010F                     	;# 
   296     0185                     	;# 
   297     0187                     	;# 
   298     0188                     	;# 
   299     0189                     	;# 
   300     018C                     	;# 
   301     018D                     	;# 
   302     0000                     	;# 
   303     0001                     	;# 
   304     0002                     	;# 
   305     0003                     	;# 
   306     0004                     	;# 
   307     0005                     	;# 
   308     0006                     	;# 
   309     0007                     	;# 
   310     0008                     	;# 
   311     0009                     	;# 
   312     000A                     	;# 
   313     000B                     	;# 
   314     000C                     	;# 
   315     000D                     	;# 
   316     000E                     	;# 
   317     000E                     	;# 
   318     000F                     	;# 
   319     0010                     	;# 
   320     0011                     	;# 
   321     0012                     	;# 
   322     0013                     	;# 
   323     0014                     	;# 
   324     0015                     	;# 
   325     0015                     	;# 
   326     0016                     	;# 
   327     0017                     	;# 
   328     0018                     	;# 
   329     0019                     	;# 
   330     001A                     	;# 
   331     001B                     	;# 
   332     001B                     	;# 
   333     001C                     	;# 
   334     001D                     	;# 
   335     001E                     	;# 
   336     001F                     	;# 
   337     0081                     	;# 
   338     0085                     	;# 
   339     0086                     	;# 
   340     0087                     	;# 
   341     0088                     	;# 
   342     0089                     	;# 
   343     008C                     	;# 
   344     008D                     	;# 
   345     008E                     	;# 
   346     008F                     	;# 
   347     0090                     	;# 
   348     0091                     	;# 
   349     0092                     	;# 
   350     0093                     	;# 
   351     0093                     	;# 
   352     0093                     	;# 
   353     0094                     	;# 
   354     0095                     	;# 
   355     0096                     	;# 
   356     0097                     	;# 
   357     0098                     	;# 
   358     0099                     	;# 
   359     009A                     	;# 
   360     009B                     	;# 
   361     009C                     	;# 
   362     009D                     	;# 
   363     009E                     	;# 
   364     009F                     	;# 
   365     0105                     	;# 
   366     0107                     	;# 
   367     0108                     	;# 
   368     0109                     	;# 
   369     010C                     	;# 
   370     010C                     	;# 
   371     010D                     	;# 
   372     010E                     	;# 
   373     010F                     	;# 
   374     0185                     	;# 
   375     0187                     	;# 
   376     0188                     	;# 
   377     0189                     	;# 
   378     018C                     	;# 
   379     018D                     	;# 
   380                           
   381                           	psect	strings
   382     0003                     __pstrings:
   383     0003                     stringtab:
   384     0003                     __stringtab:
   385                           
   386                           ;	String table - string pointers are 1 byte each
   387     0003  1BFF               	btfsc	btemp+1,7
   388     0004  280D               	ljmp	stringcode
   389     0005  1383               	bcf	3,7
   390     0006  187F               	btfsc	btemp+1,0
   391     0007  1783               	bsf	3,7
   392     0008  0800               	movf	0,w
   393     0009  0A84               	incf	4,f
   394     000A  1903               	skipnz
   395     000B  0AFF               	incf	btemp+1,f
   396     000C  0008               	return
   397     000D                     stringcode:
   398     000D                     stringdir:
   399     000D  3000               	movlw	high stringdir
   400     000E  008A               	movwf	10
   401     000F  0804               	movf	4,w
   402     0010  0A84               	incf	4,f
   403     0011  0782               	addwf	2,f
   404     0012                     __stringbase:
   405     0012  3400               	retlw	0
   406     0013                     __end_of__stringtab:
   407     0013                     _dpowers:
   408     0013  3401               	retlw	1
   409     0014  3400               	retlw	0
   410     0015  340A               	retlw	10
   411     0016  3400               	retlw	0
   412     0017  3464               	retlw	100
   413     0018  3400               	retlw	0
   414     0019  34E8               	retlw	232
   415     001A  3403               	retlw	3
   416     001B  3410               	retlw	16
   417     001C  3427               	retlw	39
   418     001D                     __end_of_dpowers:
   419     0013                     _SSPBUF	set	19
   420     0014                     _SSPCON	set	20
   421     0006                     _PORTBbits	set	6
   422     0008                     _PORTD	set	8
   423     0006                     _PORTB	set	6
   424     0008                     _PORTDbits	set	8
   425     0007                     _PORTCbits	set	7
   426     0094                     _SSPSTATbits	set	148
   427     0094                     _SSPSTAT	set	148
   428     008F                     _OSCCONbits	set	143
   429     0088                     _TRISD	set	136
   430     0086                     _TRISB	set	134
   431     0088                     _TRISDbits	set	136
   432     0087                     _TRISCbits	set	135
   433     0189                     _ANSELH	set	393
   434     0188                     _ANSEL	set	392
   435     001D                     STR_4:
   436     001D  3425               	retlw	37	;'%'
   437     001E  3464               	retlw	100	;'d'
   438     001F  342E               	retlw	46	;'.'
   439     0020  3425               	retlw	37	;'%'
   440     0021  3464               	retlw	100	;'d'
   441     0022  3425               	retlw	37	;'%'
   442     0023  3464               	retlw	100	;'d'
   443     0024  3456               	retlw	86	;'V'
   444     0025  3400               	retlw	0
   445     0026                     STR_2:
   446     0026  3453               	retlw	83	;'S'
   447     0027  3431               	retlw	49	;'1'
   448     0028  343A               	retlw	58	;':'
   449     0029  3400               	retlw	0
   450     002A                     STR_1:
   451     002A  3453               	retlw	83	;'S'
   452     002B  3432               	retlw	50	;'2'
   453     002C  343A               	retlw	58	;':'
   454     002D  3400               	retlw	0
   455     002E                     STR_3:
   456     002E  3453               	retlw	83	;'S'
   457     002F  3433               	retlw	51	;'3'
   458     0030  343A               	retlw	58	;':'
   459     0031  3400               	retlw	0
   460     001D                     
   461                           	psect	cinit
   462     07F3                     start_initialization:	
   463                           ; #config settings
   464                           
   465     07F3                     __initialization:
   466                           
   467                           ; Clear objects allocated to BANK0
   468     07F3  1383               	bcf	3,7	;select IRP bank0
   469     07F4  3020               	movlw	low __pbssBANK0
   470     07F5  0084               	movwf	4
   471     07F6  3046               	movlw	low (__pbssBANK0+38)
   472     07F7  120A  118A  21F7  120A  118A  	fcall	clear_ram0
   473     07FC                     end_of_initialization:	
   474                           ;End of C runtime variable initialization code
   475                           
   476     07FC                     __end_of__initialization:
   477     07FC  0183               	clrf	3
   478     07FD  120A  118A  2E08   	ljmp	_main	;jump to C main() function
   479                           
   480                           	psect	bssBANK0
   481     0020                     __pbssBANK0:
   482     0020                     _centesima2:
   483     0020                     	ds	2
   484     0022                     _decima2:
   485     0022                     	ds	2
   486     0024                     _unidad2:
   487     0024                     	ds	2
   488     0026                     _centesima1:
   489     0026                     	ds	2
   490     0028                     _decima1:
   491     0028                     	ds	2
   492     002A                     _unidad1:
   493     002A                     	ds	2
   494     002C                     _vol2:
   495     002C                     	ds	2
   496     002E                     _vol1:
   497     002E                     	ds	2
   498     0030                     _voltaje2:
   499     0030                     	ds	1
   500     0031                     _voltaje1:
   501     0031                     	ds	1
   502     0032                     _buffer:
   503     0032                     	ds	20
   504                           
   505                           	psect	clrtext
   506     01F7                     clear_ram0:	
   507                           ;	Called with FSR containing the base address, and
   508                           ;	W with the last address+1
   509                           
   510     01F7  0064               	clrwdt	;clear the watchdog before getting into this loop
   511     01F8                     clrloop0:
   512     01F8  0180               	clrf	0	;clear RAM location pointed to by FSR
   513     01F9  0A84               	incf	4,f	;increment pointer
   514     01FA  0604               	xorwf	4,w	;XOR with final address
   515     01FB  1903               	btfsc	3,2	;have we reached the end yet?
   516     01FC  3400               	retlw	0	;all done for this memory range, return
   517     01FD  0604               	xorwf	4,w	;XOR again to restore value
   518     01FE  29F8               	goto	clrloop0	;do the next byte
   519                           
   520                           	psect	cstackCOMMON
   521     0070                     __pcstackCOMMON:
   522     0070                     ?_setup:
   523     0070                     ?_Lcd_Init:	
   524                           ; 1 bytes @ 0x0
   525                           
   526     0070                     ?_spiWrite:	
   527                           ; 1 bytes @ 0x0
   528                           
   529     0070                     ??_spiWrite:	
   530                           ; 1 bytes @ 0x0
   531                           
   532     0070                     ?_spiRead:	
   533                           ; 1 bytes @ 0x0
   534                           
   535     0070                     ??_spiRead:	
   536                           ; 1 bytes @ 0x0
   537                           
   538     0070                     ?_spiInit:	
   539                           ; 1 bytes @ 0x0
   540                           
   541     0070                     ?_main:	
   542                           ; 1 bytes @ 0x0
   543                           
   544     0070                     ?_Lcd_Port:	
   545                           ; 1 bytes @ 0x0
   546                           
   547     0070                     ??_Lcd_Port:	
   548                           ; 1 bytes @ 0x0
   549                           
   550     0070                     ?_Lcd_Cmd:	
   551                           ; 1 bytes @ 0x0
   552                           
   553     0070                     ?_Lcd_Write_Char:	
   554                           ; 1 bytes @ 0x0
   555                           
   556     0070                     ?_spiReceiveWait:	
   557                           ; 1 bytes @ 0x0
   558                           
   559     0070                     ??_spiReceiveWait:	
   560                           ; 1 bytes @ 0x0
   561                           
   562     0070                     ?___wmul:	
   563                           ; 1 bytes @ 0x0
   564                           
   565     0070                     ?___lwdiv:	
   566                           ; 2 bytes @ 0x0
   567                           
   568     0070                     Lcd_Port@a:	
   569                           ; 2 bytes @ 0x0
   570                           
   571     0070                     spiInit@sDataSample:	
   572                           ; 1 bytes @ 0x0
   573                           
   574     0070                     spiWrite@dat:	
   575                           ; 1 bytes @ 0x0
   576                           
   577     0070                     ___wmul@multiplier:	
   578                           ; 1 bytes @ 0x0
   579                           
   580     0070                     ___lwdiv@divisor:	
   581                           ; 2 bytes @ 0x0
   582                           
   583                           
   584                           ; 2 bytes @ 0x0
   585     0070                     	ds	1
   586     0071                     ??_Lcd_Cmd:
   587     0071                     ??_Lcd_Write_Char:	
   588                           ; 1 bytes @ 0x1
   589                           
   590     0071                     spiInit@sClockIdle:	
   591                           ; 1 bytes @ 0x1
   592                           
   593                           
   594                           ; 1 bytes @ 0x1
   595     0071                     	ds	1
   596     0072                     Lcd_Write_Char@temp:
   597     0072                     spiInit@sTransmitEdge:	
   598                           ; 1 bytes @ 0x2
   599                           
   600     0072                     ___wmul@multiplicand:	
   601                           ; 1 bytes @ 0x2
   602                           
   603     0072                     ___lwdiv@dividend:	
   604                           ; 2 bytes @ 0x2
   605                           
   606                           
   607                           ; 2 bytes @ 0x2
   608     0072                     	ds	1
   609     0073                     ??_spiInit:
   610     0073                     Lcd_Cmd@a:	
   611                           ; 1 bytes @ 0x3
   612                           
   613     0073                     Lcd_Write_Char@y:	
   614                           ; 1 bytes @ 0x3
   615                           
   616     0073                     spiInit@sType:	
   617                           ; 1 bytes @ 0x3
   618                           
   619                           
   620                           ; 1 bytes @ 0x3
   621     0073                     	ds	1
   622     0074                     ??_setup:
   623     0074                     ??_Lcd_Init:	
   624                           ; 1 bytes @ 0x4
   625                           
   626     0074                     ?_Lcd_Set_Cursor:	
   627                           ; 1 bytes @ 0x4
   628                           
   629     0074                     ??___wmul:	
   630                           ; 1 bytes @ 0x4
   631                           
   632     0074                     ??___lwdiv:	
   633                           ; 1 bytes @ 0x4
   634                           
   635     0074                     Lcd_Set_Cursor@b:	
   636                           ; 1 bytes @ 0x4
   637                           
   638     0074                     Lcd_Write_Char@a:	
   639                           ; 1 bytes @ 0x4
   640                           
   641     0074                     ___wmul@product:	
   642                           ; 1 bytes @ 0x4
   643                           
   644                           
   645                           ; 2 bytes @ 0x4
   646     0074                     	ds	1
   647     0075                     ??_Lcd_Set_Cursor:
   648     0075                     ?_Lcd_Write_String:	
   649                           ; 1 bytes @ 0x5
   650                           
   651     0075                     Lcd_Write_String@a:	
   652                           ; 1 bytes @ 0x5
   653                           
   654     0075                     ___lwdiv@quotient:	
   655                           ; 2 bytes @ 0x5
   656                           
   657                           
   658                           ; 2 bytes @ 0x5
   659     0075                     	ds	1
   660     0076                     ?___awdiv:
   661     0076                     Lcd_Set_Cursor@a:	
   662                           ; 2 bytes @ 0x6
   663                           
   664     0076                     ___awdiv@divisor:	
   665                           ; 1 bytes @ 0x6
   666                           
   667                           
   668                           ; 2 bytes @ 0x6
   669     0076                     	ds	1
   670     0077                     ??_Lcd_Write_String:
   671     0077                     Lcd_Set_Cursor@z:	
   672                           ; 1 bytes @ 0x7
   673                           
   674     0077                     ___lwdiv@counter:	
   675                           ; 1 bytes @ 0x7
   676                           
   677                           
   678                           ; 1 bytes @ 0x7
   679     0077                     	ds	1
   680     0078                     ?___lwmod:
   681     0078                     Lcd_Set_Cursor@y:	
   682                           ; 2 bytes @ 0x8
   683                           
   684     0078                     ___awdiv@dividend:	
   685                           ; 1 bytes @ 0x8
   686                           
   687     0078                     ___lwmod@divisor:	
   688                           ; 2 bytes @ 0x8
   689                           
   690                           
   691                           ; 2 bytes @ 0x8
   692     0078                     	ds	1
   693     0079                     Lcd_Set_Cursor@temp:
   694                           
   695                           ; 1 bytes @ 0x9
   696     0079                     	ds	1
   697     007A                     ??___awdiv:
   698     007A                     Lcd_Write_String@i:	
   699                           ; 1 bytes @ 0xA
   700                           
   701     007A                     ___lwmod@dividend:	
   702                           ; 2 bytes @ 0xA
   703                           
   704                           
   705                           ; 2 bytes @ 0xA
   706     007A                     	ds	1
   707     007B                     ??_map:
   708     007B                     ??___awmod:	
   709                           ; 1 bytes @ 0xB
   710                           
   711                           
   712                           ; 1 bytes @ 0xB
   713     007B                     	ds	1
   714     007C                     ??___lwmod:
   715     007C                     map@value:	
   716                           ; 1 bytes @ 0xC
   717                           
   718     007C                     ___awmod@counter:	
   719                           ; 1 bytes @ 0xC
   720                           
   721                           
   722                           ; 1 bytes @ 0xC
   723     007C                     	ds	1
   724     007D                     ___awmod@sign:
   725     007D                     ___lwmod@counter:	
   726                           ; 1 bytes @ 0xD
   727                           
   728                           
   729                           ; 1 bytes @ 0xD
   730     007D                     	ds	1
   731                           
   732                           	psect	cstackBANK0
   733     0046                     __pcstackBANK0:
   734     0046                     ?_sprintf:
   735     0046                     sprintf@f:	
   736                           ; 2 bytes @ 0x0
   737                           
   738     0046                     ___awdiv@counter:	
   739                           ; 1 bytes @ 0x0
   740                           
   741                           
   742                           ; 1 bytes @ 0x0
   743     0046                     	ds	1
   744     0047                     ___awdiv@sign:
   745                           
   746                           ; 1 bytes @ 0x1
   747     0047                     	ds	1
   748     0048                     ___awdiv@quotient:
   749                           
   750                           ; 2 bytes @ 0x2
   751     0048                     	ds	2
   752     004A                     ?_map:
   753     004A                     ?___awmod:	
   754                           ; 2 bytes @ 0x4
   755                           
   756     004A                     map@inputmin:	
   757                           ; 2 bytes @ 0x4
   758                           
   759     004A                     ___awmod@divisor:	
   760                           ; 2 bytes @ 0x4
   761                           
   762                           
   763                           ; 2 bytes @ 0x4
   764     004A                     	ds	2
   765     004C                     map@inputmax:
   766     004C                     ___awmod@dividend:	
   767                           ; 2 bytes @ 0x6
   768                           
   769                           
   770                           ; 2 bytes @ 0x6
   771     004C                     	ds	1
   772     004D                     ??_sprintf:
   773                           
   774                           ; 1 bytes @ 0x7
   775     004D                     	ds	1
   776     004E                     map@outmin:
   777                           
   778                           ; 2 bytes @ 0x8
   779     004E                     	ds	2
   780     0050                     sprintf@ap:
   781     0050                     map@outmax:	
   782                           ; 1 bytes @ 0xA
   783                           
   784                           
   785                           ; 2 bytes @ 0xA
   786     0050                     	ds	1
   787     0051                     sprintf@flag:
   788                           
   789                           ; 1 bytes @ 0xB
   790     0051                     	ds	1
   791     0052                     sprintf@prec:
   792                           
   793                           ; 1 bytes @ 0xC
   794     0052                     	ds	1
   795     0053                     sprintf@val:
   796                           
   797                           ; 2 bytes @ 0xD
   798     0053                     	ds	2
   799     0055                     sprintf@sp:
   800                           
   801                           ; 1 bytes @ 0xF
   802     0055                     	ds	1
   803     0056                     sprintf@c:
   804                           
   805                           ; 1 bytes @ 0x10
   806     0056                     	ds	1
   807     0057                     ??_main:
   808                           
   809                           ; 1 bytes @ 0x11
   810     0057                     	ds	3
   811                           
   812                           	psect	maintext
   813     0608                     __pmaintext:	
   814 ;;
   815 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   816 ;;
   817 ;; *************** function _main *****************
   818 ;; Defined at:
   819 ;;		line 49 in file "main.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : B00/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   833 ;;      Params:         0       0       0       0       0
   834 ;;      Locals:         0       0       0       0       0
   835 ;;      Temps:          0       3       0       0       0
   836 ;;      Totals:         0       3       0       0       0
   837 ;;Total ram usage:        3 bytes
   838 ;; Hardware stack levels required when called: 3
   839 ;; This function calls:
   840 ;;		_Lcd_Init
   841 ;;		_Lcd_Set_Cursor
   842 ;;		_Lcd_Write_String
   843 ;;		___awdiv
   844 ;;		___awmod
   845 ;;		___wmul
   846 ;;		_map
   847 ;;		_setup
   848 ;;		_spiRead
   849 ;;		_spiWrite
   850 ;;		_sprintf
   851 ;; This function is called by:
   852 ;;		Startup code after reset
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856     0608                     _main:	
   857                           ;psect for function _main
   858                           
   859     0608                     l1523:	
   860                           ;incstack = 0
   861                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   862                           
   863                           
   864                           ;main.c: 50:     setup();
   865     0608  120A  118A  2238  120A  118A  	fcall	_setup
   866                           
   867                           ;main.c: 51:     Lcd_Init();
   868     060D  120A  118A  2468  120A  118A  	fcall	_Lcd_Init
   869                           
   870                           ;main.c: 53:     Lcd_Set_Cursor(1,7);
   871     0612  3007               	movlw	7
   872     0613  00F4               	movwf	Lcd_Set_Cursor@b
   873     0614  3001               	movlw	1
   874     0615  120A  118A  23C7  120A  118A  	fcall	_Lcd_Set_Cursor
   875     061A                     l1525:
   876                           
   877                           ;main.c: 54:     Lcd_Write_String("S2:");
   878     061A  3018               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   879     061B  00F5               	movwf	Lcd_Write_String@a
   880     061C  3080               	movlw	128
   881     061D  00F6               	movwf	Lcd_Write_String@a+1
   882     061E  120A  118A  2341  120A  118A  	fcall	_Lcd_Write_String
   883     0623                     l1527:
   884                           
   885                           ;main.c: 55:     Lcd_Set_Cursor(1,1);
   886     0623  01F4               	clrf	Lcd_Set_Cursor@b
   887     0624  0AF4               	incf	Lcd_Set_Cursor@b,f
   888     0625  3001               	movlw	1
   889     0626  120A  118A  23C7  120A  118A  	fcall	_Lcd_Set_Cursor
   890                           
   891                           ;main.c: 56:     Lcd_Write_String("S1:");
   892     062B  3014               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   893     062C  00F5               	movwf	Lcd_Write_String@a
   894     062D  3080               	movlw	128
   895     062E  00F6               	movwf	Lcd_Write_String@a+1
   896     062F  120A  118A  2341  120A  118A  	fcall	_Lcd_Write_String
   897     0634                     l1529:
   898                           
   899                           ;main.c: 57:     Lcd_Set_Cursor(1,14);
   900     0634  300E               	movlw	14
   901     0635  00F4               	movwf	Lcd_Set_Cursor@b
   902     0636  3001               	movlw	1
   903     0637  120A  118A  23C7  120A  118A  	fcall	_Lcd_Set_Cursor
   904     063C                     l1531:
   905                           
   906                           ;main.c: 58:     Lcd_Write_String("S3:");
   907     063C  301C               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   908     063D  00F5               	movwf	Lcd_Write_String@a
   909     063E  3080               	movlw	128
   910     063F  00F6               	movwf	Lcd_Write_String@a+1
   911     0640  120A  118A  2341  120A  118A  	fcall	_Lcd_Write_String
   912     0645                     l1533:
   913                           
   914                           ;main.c: 59:     _delay((unsigned long)((1000)*(4000000/4000.0)));
   915     0645  3006               	movlw	6
   916     0646  1283               	bcf	3,5	;RP0=0, select bank0
   917     0647  1303               	bcf	3,6	;RP1=0, select bank0
   918     0648  00D9               	movwf	??_main+2
   919     0649  3013               	movlw	19
   920     064A  00D8               	movwf	??_main+1
   921     064B  30AD               	movlw	173
   922     064C  00D7               	movwf	??_main
   923     064D                     u1157:
   924     064D  0BD7               	decfsz	??_main,f
   925     064E  2E4D               	goto	u1157
   926     064F  0BD8               	decfsz	??_main+1,f
   927     0650  2E4D               	goto	u1157
   928     0651  0BD9               	decfsz	??_main+2,f
   929     0652  2E4D               	goto	u1157
   930     0653                     l1535:
   931                           
   932                           ;main.c: 61:         PORTCbits.RC2 = 0;
   933     0653  1283               	bcf	3,5	;RP0=0, select bank0
   934     0654  1303               	bcf	3,6	;RP1=0, select bank0
   935     0655  1107               	bcf	7,2	;volatile
   936     0656                     l1537:
   937                           
   938                           ;main.c: 62:         spiWrite(1);
   939     0656  3001               	movlw	1
   940     0657  120A  118A  21EA  120A  118A  	fcall	_spiWrite
   941     065C                     l1539:
   942                           
   943                           ;main.c: 63:         voltaje1 = spiRead();
   944     065C  120A  118A  21FF  120A  118A  	fcall	_spiRead
   945     0661  1283               	bcf	3,5	;RP0=0, select bank0
   946     0662  1303               	bcf	3,6	;RP1=0, select bank0
   947     0663  00B1               	movwf	_voltaje1
   948     0664                     l1541:
   949                           
   950                           ;main.c: 64:         _delay((unsigned long)((1)*(4000000/4000.0)));
   951     0664  30C7               	movlw	199
   952     0665  1283               	bcf	3,5	;RP0=0, select bank0
   953     0666  1303               	bcf	3,6	;RP1=0, select bank0
   954     0667  00D7               	movwf	??_main
   955     0668                     u1167:
   956     0668  2E69               	nop2
   957     0669  0BD7               	decfsz	??_main,f
   958     066A  2E68               	goto	u1167
   959     066B  2E6C               	nop2
   960     066C                     l1543:
   961                           
   962                           ;main.c: 65:         PORTCbits.RC2 = 1;
   963     066C  1283               	bcf	3,5	;RP0=0, select bank0
   964     066D  1303               	bcf	3,6	;RP1=0, select bank0
   965     066E  1507               	bsf	7,2	;volatile
   966     066F                     l1545:
   967                           
   968                           ;main.c: 67:         PORTDbits.RD5 = 0;
   969     066F  1288               	bcf	8,5	;volatile
   970                           
   971                           ;main.c: 68:         spiWrite(2);
   972     0670  3002               	movlw	2
   973     0671  120A  118A  21EA  120A  118A  	fcall	_spiWrite
   974                           
   975                           ;main.c: 69:         voltaje2 = spiRead();
   976     0676  120A  118A  21FF  120A  118A  	fcall	_spiRead
   977     067B  1283               	bcf	3,5	;RP0=0, select bank0
   978     067C  1303               	bcf	3,6	;RP1=0, select bank0
   979     067D  00B0               	movwf	_voltaje2
   980     067E                     l1547:
   981                           
   982                           ;main.c: 70:         _delay((unsigned long)((1)*(4000000/4000.0)));
   983     067E  30C7               	movlw	199
   984     067F  1283               	bcf	3,5	;RP0=0, select bank0
   985     0680  1303               	bcf	3,6	;RP1=0, select bank0
   986     0681  00D7               	movwf	??_main
   987     0682                     u1177:
   988     0682  2E83               	nop2
   989     0683  0BD7               	decfsz	??_main,f
   990     0684  2E82               	goto	u1177
   991     0685  2E86               	nop2
   992     0686                     l1549:
   993                           
   994                           ;main.c: 71:         PORTDbits.RD5 = 1;
   995     0686  1283               	bcf	3,5	;RP0=0, select bank0
   996     0687  1303               	bcf	3,6	;RP1=0, select bank0
   997     0688  1688               	bsf	8,5	;volatile
   998     0689                     l1551:
   999                           
  1000                           ;main.c: 73:         vol1 = map(voltaje1, 0, 255, 0, 100);
  1001     0689  3000               	movlw	0
  1002     068A  00CA               	movwf	map@inputmin
  1003     068B  00CB               	movwf	map@inputmin+1
  1004     068C  30FF               	movlw	255
  1005     068D  00CC               	movwf	map@inputmax
  1006     068E  3000               	movlw	0
  1007     068F  00CD               	movwf	map@inputmax+1
  1008     0690  3000               	movlw	0
  1009     0691  00CE               	movwf	map@outmin
  1010     0692  00CF               	movwf	map@outmin+1
  1011     0693  3064               	movlw	100
  1012     0694  00D0               	movwf	map@outmax
  1013     0695  3000               	movlw	0
  1014     0696  00D1               	movwf	map@outmax+1
  1015     0697  0831               	movf	_voltaje1,w
  1016     0698  120A  118A  22D2  120A  118A  	fcall	_map
  1017     069D  1283               	bcf	3,5	;RP0=0, select bank0
  1018     069E  1303               	bcf	3,6	;RP1=0, select bank0
  1019     069F  084B               	movf	?_map+1,w
  1020     06A0  00AF               	movwf	_vol1+1
  1021     06A1  084A               	movf	?_map,w
  1022     06A2  00AE               	movwf	_vol1
  1023     06A3                     l1553:
  1024                           
  1025                           ;main.c: 74:         unidad1 = (vol1*5)/100;
  1026     06A3  3064               	movlw	100
  1027     06A4  00F6               	movwf	___awdiv@divisor
  1028     06A5  3000               	movlw	0
  1029     06A6  00F7               	movwf	___awdiv@divisor+1
  1030     06A7  082F               	movf	_vol1+1,w
  1031     06A8  00F1               	movwf	___wmul@multiplier+1
  1032     06A9  082E               	movf	_vol1,w
  1033     06AA  00F0               	movwf	___wmul@multiplier
  1034     06AB  3005               	movlw	5
  1035     06AC  00F2               	movwf	___wmul@multiplicand
  1036     06AD  3000               	movlw	0
  1037     06AE  00F3               	movwf	___wmul@multiplicand+1
  1038     06AF  120A  118A  227A  120A  118A  	fcall	___wmul
  1039     06B4  0871               	movf	?___wmul+1,w
  1040     06B5  00F9               	movwf	___awdiv@dividend+1
  1041     06B6  0870               	movf	?___wmul,w
  1042     06B7  00F8               	movwf	___awdiv@dividend
  1043     06B8  120A  118A  24C5  120A  118A  	fcall	___awdiv
  1044     06BD  0877               	movf	?___awdiv+1,w
  1045     06BE  1283               	bcf	3,5	;RP0=0, select bank0
  1046     06BF  1303               	bcf	3,6	;RP1=0, select bank0
  1047     06C0  00AB               	movwf	_unidad1+1
  1048     06C1  0876               	movf	?___awdiv,w
  1049     06C2  00AA               	movwf	_unidad1
  1050     06C3                     l1555:
  1051                           
  1052                           ;main.c: 75:         decima1 = ((vol1*5)/10)%10;
  1053     06C3  300A               	movlw	10
  1054     06C4  00CA               	movwf	___awmod@divisor
  1055     06C5  3000               	movlw	0
  1056     06C6  00CB               	movwf	___awmod@divisor+1
  1057     06C7  300A               	movlw	10
  1058     06C8  00F6               	movwf	___awdiv@divisor
  1059     06C9  3000               	movlw	0
  1060     06CA  00F7               	movwf	___awdiv@divisor+1
  1061     06CB  082F               	movf	_vol1+1,w
  1062     06CC  00F1               	movwf	___wmul@multiplier+1
  1063     06CD  082E               	movf	_vol1,w
  1064     06CE  00F0               	movwf	___wmul@multiplier
  1065     06CF  3005               	movlw	5
  1066     06D0  00F2               	movwf	___wmul@multiplicand
  1067     06D1  3000               	movlw	0
  1068     06D2  00F3               	movwf	___wmul@multiplicand+1
  1069     06D3  120A  118A  227A  120A  118A  	fcall	___wmul
  1070     06D8  0871               	movf	?___wmul+1,w
  1071     06D9  00F9               	movwf	___awdiv@dividend+1
  1072     06DA  0870               	movf	?___wmul,w
  1073     06DB  00F8               	movwf	___awdiv@dividend
  1074     06DC  120A  118A  24C5  120A  118A  	fcall	___awdiv
  1075     06E1  0877               	movf	?___awdiv+1,w
  1076     06E2  1283               	bcf	3,5	;RP0=0, select bank0
  1077     06E3  1303               	bcf	3,6	;RP1=0, select bank0
  1078     06E4  00CD               	movwf	___awmod@dividend+1
  1079     06E5  0876               	movf	?___awdiv,w
  1080     06E6  00CC               	movwf	___awmod@dividend
  1081     06E7  120A  118A  240D  120A  118A  	fcall	___awmod
  1082     06EC  1283               	bcf	3,5	;RP0=0, select bank0
  1083     06ED  1303               	bcf	3,6	;RP1=0, select bank0
  1084     06EE  084B               	movf	?___awmod+1,w
  1085     06EF  00A9               	movwf	_decima1+1
  1086     06F0  084A               	movf	?___awmod,w
  1087     06F1  00A8               	movwf	_decima1
  1088     06F2                     l1557:
  1089                           
  1090                           ;main.c: 76:         centesima1 = (vol1*5)%10;
  1091     06F2  300A               	movlw	10
  1092     06F3  00CA               	movwf	___awmod@divisor
  1093     06F4  3000               	movlw	0
  1094     06F5  00CB               	movwf	___awmod@divisor+1
  1095     06F6  082F               	movf	_vol1+1,w
  1096     06F7  00F1               	movwf	___wmul@multiplier+1
  1097     06F8  082E               	movf	_vol1,w
  1098     06F9  00F0               	movwf	___wmul@multiplier
  1099     06FA  3005               	movlw	5
  1100     06FB  00F2               	movwf	___wmul@multiplicand
  1101     06FC  3000               	movlw	0
  1102     06FD  00F3               	movwf	___wmul@multiplicand+1
  1103     06FE  120A  118A  227A  120A  118A  	fcall	___wmul
  1104     0703  0871               	movf	?___wmul+1,w
  1105     0704  1283               	bcf	3,5	;RP0=0, select bank0
  1106     0705  1303               	bcf	3,6	;RP1=0, select bank0
  1107     0706  00CD               	movwf	___awmod@dividend+1
  1108     0707  0870               	movf	?___wmul,w
  1109     0708  00CC               	movwf	___awmod@dividend
  1110     0709  120A  118A  240D  120A  118A  	fcall	___awmod
  1111     070E  1283               	bcf	3,5	;RP0=0, select bank0
  1112     070F  1303               	bcf	3,6	;RP1=0, select bank0
  1113     0710  084B               	movf	?___awmod+1,w
  1114     0711  00A7               	movwf	_centesima1+1
  1115     0712  084A               	movf	?___awmod,w
  1116     0713  00A6               	movwf	_centesima1
  1117     0714                     l1559:
  1118                           
  1119                           ;main.c: 77:         Lcd_Set_Cursor(2,1);
  1120     0714  01F4               	clrf	Lcd_Set_Cursor@b
  1121     0715  0AF4               	incf	Lcd_Set_Cursor@b,f
  1122     0716  3002               	movlw	2
  1123     0717  120A  118A  23C7  120A  118A  	fcall	_Lcd_Set_Cursor
  1124     071C                     l1561:
  1125                           
  1126                           ;main.c: 78:         sprintf(buffer, "%d.%d%dV" , unidad1 , decima1 , centesima1 );
  1127     071C  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1128     071D  1283               	bcf	3,5	;RP0=0, select bank0
  1129     071E  1303               	bcf	3,6	;RP1=0, select bank0
  1130     071F  00C6               	movwf	sprintf@f
  1131     0720  082B               	movf	_unidad1+1,w
  1132     0721  00C8               	movwf	?_sprintf+2
  1133     0722  082A               	movf	_unidad1,w
  1134     0723  00C7               	movwf	?_sprintf+1
  1135     0724  0829               	movf	_decima1+1,w
  1136     0725  00CA               	movwf	?_sprintf+4
  1137     0726  0828               	movf	_decima1,w
  1138     0727  00C9               	movwf	?_sprintf+3
  1139     0728  0827               	movf	_centesima1+1,w
  1140     0729  00CC               	movwf	?_sprintf+6
  1141     072A  0826               	movf	_centesima1,w
  1142     072B  00CB               	movwf	?_sprintf+5
  1143     072C  3032               	movlw	(low (_buffer| 0))& (0+255)
  1144     072D  120A  118A  252E  120A  118A  	fcall	_sprintf
  1145     0732                     l1563:
  1146                           
  1147                           ;main.c: 79:         Lcd_Write_String(buffer);
  1148     0732  3032               	movlw	(low (_buffer| 0))& (0+255)
  1149     0733  00F5               	movwf	Lcd_Write_String@a
  1150     0734  3000               	movlw	0
  1151     0735  00F6               	movwf	Lcd_Write_String@a+1
  1152     0736  120A  118A  2341  120A  118A  	fcall	_Lcd_Write_String
  1153     073B                     l1565:
  1154                           
  1155                           ;main.c: 82:         vol2 = map(voltaje2, 0, 255, 0, 100);
  1156     073B  3000               	movlw	0
  1157     073C  1283               	bcf	3,5	;RP0=0, select bank0
  1158     073D  1303               	bcf	3,6	;RP1=0, select bank0
  1159     073E  00CA               	movwf	map@inputmin
  1160     073F  00CB               	movwf	map@inputmin+1
  1161     0740  30FF               	movlw	255
  1162     0741  00CC               	movwf	map@inputmax
  1163     0742  3000               	movlw	0
  1164     0743  00CD               	movwf	map@inputmax+1
  1165     0744  3000               	movlw	0
  1166     0745  00CE               	movwf	map@outmin
  1167     0746  00CF               	movwf	map@outmin+1
  1168     0747  3064               	movlw	100
  1169     0748  00D0               	movwf	map@outmax
  1170     0749  3000               	movlw	0
  1171     074A  00D1               	movwf	map@outmax+1
  1172     074B  0830               	movf	_voltaje2,w
  1173     074C  120A  118A  22D2  120A  118A  	fcall	_map
  1174     0751  1283               	bcf	3,5	;RP0=0, select bank0
  1175     0752  1303               	bcf	3,6	;RP1=0, select bank0
  1176     0753  084B               	movf	?_map+1,w
  1177     0754  00AD               	movwf	_vol2+1
  1178     0755  084A               	movf	?_map,w
  1179     0756  00AC               	movwf	_vol2
  1180     0757                     l1567:
  1181                           
  1182                           ;main.c: 83:         unidad2 = (vol2*5)/100;
  1183     0757  3064               	movlw	100
  1184     0758  00F6               	movwf	___awdiv@divisor
  1185     0759  3000               	movlw	0
  1186     075A  00F7               	movwf	___awdiv@divisor+1
  1187     075B  082D               	movf	_vol2+1,w
  1188     075C  00F1               	movwf	___wmul@multiplier+1
  1189     075D  082C               	movf	_vol2,w
  1190     075E  00F0               	movwf	___wmul@multiplier
  1191     075F  3005               	movlw	5
  1192     0760  00F2               	movwf	___wmul@multiplicand
  1193     0761  3000               	movlw	0
  1194     0762  00F3               	movwf	___wmul@multiplicand+1
  1195     0763  120A  118A  227A  120A  118A  	fcall	___wmul
  1196     0768  0871               	movf	?___wmul+1,w
  1197     0769  00F9               	movwf	___awdiv@dividend+1
  1198     076A  0870               	movf	?___wmul,w
  1199     076B  00F8               	movwf	___awdiv@dividend
  1200     076C  120A  118A  24C5  120A  118A  	fcall	___awdiv
  1201     0771  0877               	movf	?___awdiv+1,w
  1202     0772  1283               	bcf	3,5	;RP0=0, select bank0
  1203     0773  1303               	bcf	3,6	;RP1=0, select bank0
  1204     0774  00A5               	movwf	_unidad2+1
  1205     0775  0876               	movf	?___awdiv,w
  1206     0776  00A4               	movwf	_unidad2
  1207     0777                     l1569:
  1208                           
  1209                           ;main.c: 84:         decima2 = ((vol2*5)/10)%10;
  1210     0777  300A               	movlw	10
  1211     0778  00CA               	movwf	___awmod@divisor
  1212     0779  3000               	movlw	0
  1213     077A  00CB               	movwf	___awmod@divisor+1
  1214     077B  300A               	movlw	10
  1215     077C  00F6               	movwf	___awdiv@divisor
  1216     077D  3000               	movlw	0
  1217     077E  00F7               	movwf	___awdiv@divisor+1
  1218     077F  082D               	movf	_vol2+1,w
  1219     0780  00F1               	movwf	___wmul@multiplier+1
  1220     0781  082C               	movf	_vol2,w
  1221     0782  00F0               	movwf	___wmul@multiplier
  1222     0783  3005               	movlw	5
  1223     0784  00F2               	movwf	___wmul@multiplicand
  1224     0785  3000               	movlw	0
  1225     0786  00F3               	movwf	___wmul@multiplicand+1
  1226     0787  120A  118A  227A  120A  118A  	fcall	___wmul
  1227     078C  0871               	movf	?___wmul+1,w
  1228     078D  00F9               	movwf	___awdiv@dividend+1
  1229     078E  0870               	movf	?___wmul,w
  1230     078F  00F8               	movwf	___awdiv@dividend
  1231     0790  120A  118A  24C5  120A  118A  	fcall	___awdiv
  1232     0795  0877               	movf	?___awdiv+1,w
  1233     0796  1283               	bcf	3,5	;RP0=0, select bank0
  1234     0797  1303               	bcf	3,6	;RP1=0, select bank0
  1235     0798  00CD               	movwf	___awmod@dividend+1
  1236     0799  0876               	movf	?___awdiv,w
  1237     079A  00CC               	movwf	___awmod@dividend
  1238     079B  120A  118A  240D  120A  118A  	fcall	___awmod
  1239     07A0  1283               	bcf	3,5	;RP0=0, select bank0
  1240     07A1  1303               	bcf	3,6	;RP1=0, select bank0
  1241     07A2  084B               	movf	?___awmod+1,w
  1242     07A3  00A3               	movwf	_decima2+1
  1243     07A4  084A               	movf	?___awmod,w
  1244     07A5  00A2               	movwf	_decima2
  1245     07A6                     l1571:
  1246                           
  1247                           ;main.c: 85:         centesima2 = (vol2*5)%10;
  1248     07A6  300A               	movlw	10
  1249     07A7  00CA               	movwf	___awmod@divisor
  1250     07A8  3000               	movlw	0
  1251     07A9  00CB               	movwf	___awmod@divisor+1
  1252     07AA  082D               	movf	_vol2+1,w
  1253     07AB  00F1               	movwf	___wmul@multiplier+1
  1254     07AC  082C               	movf	_vol2,w
  1255     07AD  00F0               	movwf	___wmul@multiplier
  1256     07AE  3005               	movlw	5
  1257     07AF  00F2               	movwf	___wmul@multiplicand
  1258     07B0  3000               	movlw	0
  1259     07B1  00F3               	movwf	___wmul@multiplicand+1
  1260     07B2  120A  118A  227A  120A  118A  	fcall	___wmul
  1261     07B7  0871               	movf	?___wmul+1,w
  1262     07B8  1283               	bcf	3,5	;RP0=0, select bank0
  1263     07B9  1303               	bcf	3,6	;RP1=0, select bank0
  1264     07BA  00CD               	movwf	___awmod@dividend+1
  1265     07BB  0870               	movf	?___wmul,w
  1266     07BC  00CC               	movwf	___awmod@dividend
  1267     07BD  120A  118A  240D  120A  118A  	fcall	___awmod
  1268     07C2  1283               	bcf	3,5	;RP0=0, select bank0
  1269     07C3  1303               	bcf	3,6	;RP1=0, select bank0
  1270     07C4  084B               	movf	?___awmod+1,w
  1271     07C5  00A1               	movwf	_centesima2+1
  1272     07C6  084A               	movf	?___awmod,w
  1273     07C7  00A0               	movwf	_centesima2
  1274     07C8                     l1573:
  1275                           
  1276                           ;main.c: 86:         Lcd_Set_Cursor(2,7);
  1277     07C8  3007               	movlw	7
  1278     07C9  00F4               	movwf	Lcd_Set_Cursor@b
  1279     07CA  3002               	movlw	2
  1280     07CB  120A  118A  23C7  120A  118A  	fcall	_Lcd_Set_Cursor
  1281     07D0                     l1575:
  1282                           
  1283                           ;main.c: 87:         sprintf(buffer, "%d.%d%dV" , unidad2 , decima2 , centesima2 );
  1284     07D0  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1285     07D1  1283               	bcf	3,5	;RP0=0, select bank0
  1286     07D2  1303               	bcf	3,6	;RP1=0, select bank0
  1287     07D3  00C6               	movwf	sprintf@f
  1288     07D4  0825               	movf	_unidad2+1,w
  1289     07D5  00C8               	movwf	?_sprintf+2
  1290     07D6  0824               	movf	_unidad2,w
  1291     07D7  00C7               	movwf	?_sprintf+1
  1292     07D8  0823               	movf	_decima2+1,w
  1293     07D9  00CA               	movwf	?_sprintf+4
  1294     07DA  0822               	movf	_decima2,w
  1295     07DB  00C9               	movwf	?_sprintf+3
  1296     07DC  0821               	movf	_centesima2+1,w
  1297     07DD  00CC               	movwf	?_sprintf+6
  1298     07DE  0820               	movf	_centesima2,w
  1299     07DF  00CB               	movwf	?_sprintf+5
  1300     07E0  3032               	movlw	(low (_buffer| 0))& (0+255)
  1301     07E1  120A  118A  252E  120A  118A  	fcall	_sprintf
  1302     07E6                     l1577:
  1303                           
  1304                           ;main.c: 88:         Lcd_Write_String(buffer);
  1305     07E6  3032               	movlw	(low (_buffer| 0))& (0+255)
  1306     07E7  00F5               	movwf	Lcd_Write_String@a
  1307     07E8  3000               	movlw	0
  1308     07E9  00F6               	movwf	Lcd_Write_String@a+1
  1309     07EA  120A  118A  2341  120A  118A  	fcall	_Lcd_Write_String
  1310     07EF  2E53               	goto	l1535
  1311     07F0  120A  118A  2800   	ljmp	start
  1312     07F3                     __end_of_main:
  1313                           
  1314                           	psect	text1
  1315     052E                     __ptext1:	
  1316 ;; *************** function _sprintf *****************
  1317 ;; Defined at:
  1318 ;;		line 505 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  sp              1    wreg     PTR unsigned char 
  1321 ;;		 -> buffer(20), 
  1322 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1323 ;;		 -> STR_5(9), STR_4(9), 
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;  sp              1   15[BANK0 ] PTR unsigned char 
  1326 ;;		 -> buffer(20), 
  1327 ;;  tmpval          4    0        struct .
  1328 ;;  val             2   13[BANK0 ] unsigned int 
  1329 ;;  cp              2    0        PTR const unsigned char 
  1330 ;;  len             2    0        unsigned int 
  1331 ;;  c               1   16[BANK0 ] unsigned char 
  1332 ;;  prec            1   12[BANK0 ] char 
  1333 ;;  flag            1   11[BANK0 ] unsigned char 
  1334 ;;  ap              1   10[BANK0 ] PTR void [1]
  1335 ;;		 -> ?_sprintf(2), 
  1336 ;; Return value:  Size  Location     Type
  1337 ;;                  2    0[BANK0 ] int 
  1338 ;; Registers used:
  1339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1340 ;; Tracked objects:
  1341 ;;		On entry : 0/0
  1342 ;;		On exit  : 0/0
  1343 ;;		Unchanged: 0/0
  1344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1345 ;;      Params:         0       7       0       0       0
  1346 ;;      Locals:         0       7       0       0       0
  1347 ;;      Temps:          0       3       0       0       0
  1348 ;;      Totals:         0      17       0       0       0
  1349 ;;Total ram usage:       17 bytes
  1350 ;; Hardware stack levels used: 1
  1351 ;; Hardware stack levels required when called: 1
  1352 ;; This function calls:
  1353 ;;		___lwdiv
  1354 ;;		___lwmod
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360     052E                     _sprintf:	
  1361                           ;psect for function _sprintf
  1362                           
  1363                           
  1364                           ;incstack = 0
  1365                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1366                           ;sprintf@sp stored from wreg
  1367     052E  1283               	bcf	3,5	;RP0=0, select bank0
  1368     052F  1303               	bcf	3,6	;RP1=0, select bank0
  1369     0530  00D5               	movwf	sprintf@sp
  1370     0531                     l1423:
  1371                           
  1372                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1373     0531  3047               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1374     0532  00D0               	movwf	sprintf@ap
  1375                           
  1376                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1377     0533  2DF3               	goto	l1475
  1378     0534                     l1425:
  1379                           
  1380                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1381     0534  3025               	movlw	37
  1382     0535  0656               	xorwf	sprintf@c,w
  1383     0536  1903               	btfsc	3,2
  1384     0537  2D39               	goto	u991
  1385     0538  2D3A               	goto	u990
  1386     0539                     u991:
  1387     0539  2D44               	goto	l1431
  1388     053A                     u990:
  1389     053A                     l1427:
  1390                           
  1391                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;E:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1392     053A  0855               	movf	sprintf@sp,w
  1393     053B  0084               	movwf	4
  1394     053C  0856               	movf	sprintf@c,w
  1395     053D  1383               	bcf	3,7	;select IRP bank0
  1396     053E  0080               	movwf	0
  1397     053F                     l1429:
  1398     053F  3001               	movlw	1
  1399     0540  00CD               	movwf	??_sprintf
  1400     0541  084D               	movf	??_sprintf,w
  1401     0542  07D5               	addwf	sprintf@sp,f
  1402                           
  1403                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1404     0543  2DF3               	goto	l1475
  1405     0544                     l1431:
  1406                           
  1407                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1408     0544  01D1               	clrf	sprintf@flag
  1409     0545                     l1435:	
  1410                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1411                           
  1412     0545  3001               	movlw	1
  1413     0546  07C6               	addwf	sprintf@f,f
  1414     0547  30FF               	movlw	-1
  1415     0548  0746               	addwf	sprintf@f,w
  1416     0549  0084               	movwf	4
  1417     054A  120A  118A  200D  120A  118A  	fcall	stringdir
  1418     054F  00D6               	movwf	sprintf@c
  1419     0550  00CD               	movwf	??_sprintf
  1420     0551  01CE               	clrf	??_sprintf+1
  1421                           
  1422                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1423                           ; Switch size 1, requested type "simple"
  1424                           ; Number of cases is 1, Range of values is 0 to 0
  1425                           ; switch strategies available:
  1426                           ; Name         Instructions Cycles
  1427                           ; simple_byte            4     3 (average)
  1428                           ; direct_byte           11     8 (fixed)
  1429                           ; jumptable            260     6 (fixed)
  1430                           ;	Chosen strategy is simple_byte
  1431     0552  084E               	movf	??_sprintf+1,w
  1432     0553  3A00               	xorlw	0	; case 0
  1433     0554  1903               	skipnz
  1434     0555  2D57               	goto	l1605
  1435     0556  2DF3               	goto	l1475
  1436     0557                     l1605:
  1437                           
  1438                           ; Switch size 1, requested type "simple"
  1439                           ; Number of cases is 3, Range of values is 0 to 105
  1440                           ; switch strategies available:
  1441                           ; Name         Instructions Cycles
  1442                           ; simple_byte           10     6 (average)
  1443                           ; jumptable            260     6 (fixed)
  1444                           ;	Chosen strategy is simple_byte
  1445     0557  084D               	movf	??_sprintf,w
  1446     0558  3A00               	xorlw	0	; case 0
  1447     0559  1903               	skipnz
  1448     055A  2E03               	goto	l1477
  1449     055B  3A64               	xorlw	100	; case 100
  1450     055C  1903               	skipnz
  1451     055D  2D62               	goto	l1437
  1452     055E  3A0D               	xorlw	13	; case 105
  1453     055F  1903               	skipnz
  1454     0560  2D62               	goto	l1437
  1455     0561  2DF3               	goto	l1475
  1456     0562                     l1437:
  1457                           
  1458                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1459     0562  0850               	movf	sprintf@ap,w
  1460     0563  0084               	movwf	4
  1461     0564  1383               	bcf	3,7	;select IRP bank0
  1462     0565  0800               	movf	0,w
  1463     0566  00D3               	movwf	sprintf@val
  1464     0567  0A84               	incf	4,f
  1465     0568  0800               	movf	0,w
  1466     0569  00D4               	movwf	sprintf@val+1
  1467     056A                     l1439:
  1468     056A  3002               	movlw	2
  1469     056B  00CD               	movwf	??_sprintf
  1470     056C  084D               	movf	??_sprintf,w
  1471     056D  07D0               	addwf	sprintf@ap,f
  1472     056E                     l1441:
  1473                           
  1474                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1475     056E  1FD4               	btfss	sprintf@val+1,7
  1476     056F  2D71               	goto	u1001
  1477     0570  2D72               	goto	u1000
  1478     0571                     u1001:
  1479     0571  2D7B               	goto	l1447
  1480     0572                     u1000:
  1481     0572                     l1443:
  1482                           
  1483                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1484     0572  3003               	movlw	3
  1485     0573  00CD               	movwf	??_sprintf
  1486     0574  084D               	movf	??_sprintf,w
  1487     0575  04D1               	iorwf	sprintf@flag,f
  1488     0576                     l1445:
  1489                           
  1490                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1491     0576  09D3               	comf	sprintf@val,f
  1492     0577  09D4               	comf	sprintf@val+1,f
  1493     0578  0AD3               	incf	sprintf@val,f
  1494     0579  1903               	skipnz
  1495     057A  0AD4               	incf	sprintf@val+1,f
  1496     057B                     l1447:
  1497                           
  1498                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1499     057B  01D6               	clrf	sprintf@c
  1500     057C  0AD6               	incf	sprintf@c,f
  1501     057D                     l1453:
  1502                           
  1503                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1504     057D  0856               	movf	sprintf@c,w
  1505     057E  00CD               	movwf	??_sprintf
  1506     057F  074D               	addwf	??_sprintf,w
  1507     0580  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1508     0581  0084               	movwf	4
  1509     0582  120A  118A  200D  120A  118A  	fcall	stringdir
  1510     0587  00CE               	movwf	??_sprintf+1
  1511     0588  120A  118A  200D  120A  118A  	fcall	stringdir
  1512     058D  00CF               	movwf	??_sprintf+2
  1513     058E  084F               	movf	??_sprintf+2,w
  1514     058F  0254               	subwf	sprintf@val+1,w
  1515     0590  1D03               	skipz
  1516     0591  2D94               	goto	u1015
  1517     0592  084E               	movf	??_sprintf+1,w
  1518     0593  0253               	subwf	sprintf@val,w
  1519     0594                     u1015:
  1520     0594  1803               	skipnc
  1521     0595  2D97               	goto	u1011
  1522     0596  2D98               	goto	u1010
  1523     0597                     u1011:
  1524     0597  2D99               	goto	l1457
  1525     0598                     u1010:
  1526     0598  2DA3               	goto	l1459
  1527     0599                     l1457:
  1528     0599  3001               	movlw	1
  1529     059A  00CD               	movwf	??_sprintf
  1530     059B  084D               	movf	??_sprintf,w
  1531     059C  07D6               	addwf	sprintf@c,f
  1532     059D  3005               	movlw	5
  1533     059E  0656               	xorwf	sprintf@c,w
  1534     059F  1D03               	btfss	3,2
  1535     05A0  2DA2               	goto	u1021
  1536     05A1  2DA3               	goto	u1020
  1537     05A2                     u1021:
  1538     05A2  2D7D               	goto	l1453
  1539     05A3                     u1020:
  1540     05A3                     l1459:
  1541                           
  1542                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1543     05A3  0851               	movf	sprintf@flag,w
  1544     05A4  3903               	andlw	3
  1545     05A5  1903               	btfsc	3,2
  1546     05A6  2DA8               	goto	u1031
  1547     05A7  2DA9               	goto	u1030
  1548     05A8                     u1031:
  1549     05A8  2DB2               	goto	l1465
  1550     05A9                     u1030:
  1551     05A9                     l1461:
  1552                           
  1553                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1554     05A9  0855               	movf	sprintf@sp,w
  1555     05AA  0084               	movwf	4
  1556     05AB  302D               	movlw	45
  1557     05AC  1383               	bcf	3,7	;select IRP bank0
  1558     05AD  0080               	movwf	0
  1559     05AE                     l1463:
  1560     05AE  3001               	movlw	1
  1561     05AF  00CD               	movwf	??_sprintf
  1562     05B0  084D               	movf	??_sprintf,w
  1563     05B1  07D5               	addwf	sprintf@sp,f
  1564     05B2                     l1465:
  1565                           
  1566                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };E:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1567     05B2  0856               	movf	sprintf@c,w
  1568     05B3  00D2               	movwf	sprintf@prec
  1569                           
  1570                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1571     05B4  2DEA               	goto	l1473
  1572     05B5                     l1467:
  1573                           
  1574                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;E:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1575     05B5  300A               	movlw	10
  1576     05B6  00F8               	movwf	___lwmod@divisor
  1577     05B7  3000               	movlw	0
  1578     05B8  00F9               	movwf	___lwmod@divisor+1
  1579     05B9  0852               	movf	sprintf@prec,w
  1580     05BA  00CD               	movwf	??_sprintf
  1581     05BB  074D               	addwf	??_sprintf,w
  1582     05BC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1583     05BD  0084               	movwf	4
  1584     05BE  120A  118A  200D  120A  118A  	fcall	stringdir
  1585     05C3  00F0               	movwf	___lwdiv@divisor
  1586     05C4  120A  118A  200D  120A  118A  	fcall	stringdir
  1587     05C9  00F1               	movwf	___lwdiv@divisor+1
  1588     05CA  0854               	movf	sprintf@val+1,w
  1589     05CB  00F3               	movwf	___lwdiv@dividend+1
  1590     05CC  0853               	movf	sprintf@val,w
  1591     05CD  00F2               	movwf	___lwdiv@dividend
  1592     05CE  120A  118A  2383  120A  118A  	fcall	___lwdiv
  1593     05D3  0871               	movf	?___lwdiv+1,w
  1594     05D4  00FB               	movwf	___lwmod@dividend+1
  1595     05D5  0870               	movf	?___lwdiv,w
  1596     05D6  00FA               	movwf	___lwmod@dividend
  1597     05D7  120A  118A  2307  120A  118A  	fcall	___lwmod
  1598     05DC  0878               	movf	?___lwmod,w
  1599     05DD  3E30               	addlw	48
  1600     05DE  1283               	bcf	3,5	;RP0=0, select bank0
  1601     05DF  1303               	bcf	3,6	;RP1=0, select bank0
  1602     05E0  00D6               	movwf	sprintf@c
  1603     05E1                     l1469:
  1604                           
  1605                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };E:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1606     05E1  0855               	movf	sprintf@sp,w
  1607     05E2  0084               	movwf	4
  1608     05E3  0856               	movf	sprintf@c,w
  1609     05E4  1383               	bcf	3,7	;select IRP bank0
  1610     05E5  0080               	movwf	0
  1611     05E6                     l1471:
  1612     05E6  3001               	movlw	1
  1613     05E7  00CD               	movwf	??_sprintf
  1614     05E8  084D               	movf	??_sprintf,w
  1615     05E9  07D5               	addwf	sprintf@sp,f
  1616     05EA                     l1473:
  1617                           
  1618                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1619     05EA  30FF               	movlw	255
  1620     05EB  00CD               	movwf	??_sprintf
  1621     05EC  084D               	movf	??_sprintf,w
  1622     05ED  07D2               	addwf	sprintf@prec,f
  1623     05EE  0A52               	incf	sprintf@prec,w
  1624     05EF  1D03               	btfss	3,2
  1625     05F0  2DF2               	goto	u1041
  1626     05F1  2DF3               	goto	u1040
  1627     05F2                     u1041:
  1628     05F2  2DB5               	goto	l1467
  1629     05F3                     u1040:
  1630     05F3                     l1475:
  1631                           
  1632                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1633     05F3  3001               	movlw	1
  1634     05F4  07C6               	addwf	sprintf@f,f
  1635     05F5  30FF               	movlw	-1
  1636     05F6  0746               	addwf	sprintf@f,w
  1637     05F7  0084               	movwf	4
  1638     05F8  120A  118A  200D  120A  118A  	fcall	stringdir
  1639     05FD  00D6               	movwf	sprintf@c
  1640     05FE  0856               	movf	sprintf@c,w
  1641     05FF  1D03               	btfss	3,2
  1642     0600  2E02               	goto	u1051
  1643     0601  2E03               	goto	u1050
  1644     0602                     u1051:
  1645     0602  2D34               	goto	l1425
  1646     0603                     u1050:
  1647     0603                     l1477:
  1648                           
  1649                           ;E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1650     0603  0855               	movf	sprintf@sp,w
  1651     0604  0084               	movwf	4
  1652     0605  1383               	bcf	3,7	;select IRP bank0
  1653     0606  0180               	clrf	0
  1654     0607                     l265:
  1655     0607  0008               	return
  1656     0608                     __end_of_sprintf:
  1657                           
  1658                           	psect	text2
  1659     0307                     __ptext2:	
  1660 ;; *************** function ___lwmod *****************
  1661 ;; Defined at:
  1662 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  divisor         2    8[COMMON] unsigned int 
  1665 ;;  dividend        2   10[COMMON] unsigned int 
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  counter         1   13[COMMON] unsigned char 
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  2    8[COMMON] unsigned int 
  1670 ;; Registers used:
  1671 ;;		wreg, status,2, status,0
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1677 ;;      Params:         4       0       0       0       0
  1678 ;;      Locals:         1       0       0       0       0
  1679 ;;      Temps:          1       0       0       0       0
  1680 ;;      Totals:         6       0       0       0       0
  1681 ;;Total ram usage:        6 bytes
  1682 ;; Hardware stack levels used: 1
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_sprintf
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690     0307                     ___lwmod:	
  1691                           ;psect for function ___lwmod
  1692                           
  1693     0307                     l1329:	
  1694                           ;incstack = 0
  1695                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1696                           
  1697     0307  0878               	movf	___lwmod@divisor,w
  1698     0308  0479               	iorwf	___lwmod@divisor+1,w
  1699     0309  1903               	btfsc	3,2
  1700     030A  2B0C               	goto	u861
  1701     030B  2B0D               	goto	u860
  1702     030C                     u861:
  1703     030C  2B3C               	goto	l1347
  1704     030D                     u860:
  1705     030D                     l1331:
  1706     030D  01FD               	clrf	___lwmod@counter
  1707     030E  0AFD               	incf	___lwmod@counter,f
  1708     030F  2B1B               	goto	l1337
  1709     0310                     l1333:
  1710     0310  3001               	movlw	1
  1711     0311                     u875:
  1712     0311  1003               	clrc
  1713     0312  0DF8               	rlf	___lwmod@divisor,f
  1714     0313  0DF9               	rlf	___lwmod@divisor+1,f
  1715     0314  3EFF               	addlw	-1
  1716     0315  1D03               	skipz
  1717     0316  2B11               	goto	u875
  1718     0317                     l1335:
  1719     0317  3001               	movlw	1
  1720     0318  00FC               	movwf	??___lwmod
  1721     0319  087C               	movf	??___lwmod,w
  1722     031A  07FD               	addwf	___lwmod@counter,f
  1723     031B                     l1337:
  1724     031B  1FF9               	btfss	___lwmod@divisor+1,7
  1725     031C  2B1E               	goto	u881
  1726     031D  2B1F               	goto	u880
  1727     031E                     u881:
  1728     031E  2B10               	goto	l1333
  1729     031F                     u880:
  1730     031F                     l1339:
  1731     031F  0879               	movf	___lwmod@divisor+1,w
  1732     0320  027B               	subwf	___lwmod@dividend+1,w
  1733     0321  1D03               	skipz
  1734     0322  2B25               	goto	u895
  1735     0323  0878               	movf	___lwmod@divisor,w
  1736     0324  027A               	subwf	___lwmod@dividend,w
  1737     0325                     u895:
  1738     0325  1C03               	skipc
  1739     0326  2B28               	goto	u891
  1740     0327  2B29               	goto	u890
  1741     0328                     u891:
  1742     0328  2B2F               	goto	l1343
  1743     0329                     u890:
  1744     0329                     l1341:
  1745     0329  0878               	movf	___lwmod@divisor,w
  1746     032A  02FA               	subwf	___lwmod@dividend,f
  1747     032B  0879               	movf	___lwmod@divisor+1,w
  1748     032C  1C03               	skipc
  1749     032D  03FB               	decf	___lwmod@dividend+1,f
  1750     032E  02FB               	subwf	___lwmod@dividend+1,f
  1751     032F                     l1343:
  1752     032F  3001               	movlw	1
  1753     0330                     u905:
  1754     0330  1003               	clrc
  1755     0331  0CF9               	rrf	___lwmod@divisor+1,f
  1756     0332  0CF8               	rrf	___lwmod@divisor,f
  1757     0333  3EFF               	addlw	-1
  1758     0334  1D03               	skipz
  1759     0335  2B30               	goto	u905
  1760     0336                     l1345:
  1761     0336  3001               	movlw	1
  1762     0337  02FD               	subwf	___lwmod@counter,f
  1763     0338  1D03               	btfss	3,2
  1764     0339  2B3B               	goto	u911
  1765     033A  2B3C               	goto	u910
  1766     033B                     u911:
  1767     033B  2B1F               	goto	l1339
  1768     033C                     u910:
  1769     033C                     l1347:
  1770     033C  087B               	movf	___lwmod@dividend+1,w
  1771     033D  00F9               	movwf	?___lwmod+1
  1772     033E  087A               	movf	___lwmod@dividend,w
  1773     033F  00F8               	movwf	?___lwmod
  1774     0340                     l551:
  1775     0340  0008               	return
  1776     0341                     __end_of___lwmod:
  1777                           
  1778                           	psect	text3
  1779     0383                     __ptext3:	
  1780 ;; *************** function ___lwdiv *****************
  1781 ;; Defined at:
  1782 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  divisor         2    0[COMMON] unsigned int 
  1785 ;;  dividend        2    2[COMMON] unsigned int 
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;  quotient        2    5[COMMON] unsigned int 
  1788 ;;  counter         1    7[COMMON] unsigned char 
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  2    0[COMMON] unsigned int 
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1798 ;;      Params:         4       0       0       0       0
  1799 ;;      Locals:         3       0       0       0       0
  1800 ;;      Temps:          1       0       0       0       0
  1801 ;;      Totals:         8       0       0       0       0
  1802 ;;Total ram usage:        8 bytes
  1803 ;; Hardware stack levels used: 1
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		_sprintf
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811     0383                     ___lwdiv:	
  1812                           ;psect for function ___lwdiv
  1813                           
  1814     0383                     l1303:	
  1815                           ;incstack = 0
  1816                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1817                           
  1818     0383  01F5               	clrf	___lwdiv@quotient
  1819     0384  01F6               	clrf	___lwdiv@quotient+1
  1820     0385                     l1305:
  1821     0385  0870               	movf	___lwdiv@divisor,w
  1822     0386  0471               	iorwf	___lwdiv@divisor+1,w
  1823     0387  1903               	btfsc	3,2
  1824     0388  2B8A               	goto	u791
  1825     0389  2B8B               	goto	u790
  1826     038A                     u791:
  1827     038A  2BC2               	goto	l1325
  1828     038B                     u790:
  1829     038B                     l1307:
  1830     038B  01F7               	clrf	___lwdiv@counter
  1831     038C  0AF7               	incf	___lwdiv@counter,f
  1832     038D  2B99               	goto	l1313
  1833     038E                     l1309:
  1834     038E  3001               	movlw	1
  1835     038F                     u805:
  1836     038F  1003               	clrc
  1837     0390  0DF0               	rlf	___lwdiv@divisor,f
  1838     0391  0DF1               	rlf	___lwdiv@divisor+1,f
  1839     0392  3EFF               	addlw	-1
  1840     0393  1D03               	skipz
  1841     0394  2B8F               	goto	u805
  1842     0395                     l1311:
  1843     0395  3001               	movlw	1
  1844     0396  00F4               	movwf	??___lwdiv
  1845     0397  0874               	movf	??___lwdiv,w
  1846     0398  07F7               	addwf	___lwdiv@counter,f
  1847     0399                     l1313:
  1848     0399  1FF1               	btfss	___lwdiv@divisor+1,7
  1849     039A  2B9C               	goto	u811
  1850     039B  2B9D               	goto	u810
  1851     039C                     u811:
  1852     039C  2B8E               	goto	l1309
  1853     039D                     u810:
  1854     039D                     l1315:
  1855     039D  3001               	movlw	1
  1856     039E                     u825:
  1857     039E  1003               	clrc
  1858     039F  0DF5               	rlf	___lwdiv@quotient,f
  1859     03A0  0DF6               	rlf	___lwdiv@quotient+1,f
  1860     03A1  3EFF               	addlw	-1
  1861     03A2  1D03               	skipz
  1862     03A3  2B9E               	goto	u825
  1863     03A4  0871               	movf	___lwdiv@divisor+1,w
  1864     03A5  0273               	subwf	___lwdiv@dividend+1,w
  1865     03A6  1D03               	skipz
  1866     03A7  2BAA               	goto	u835
  1867     03A8  0870               	movf	___lwdiv@divisor,w
  1868     03A9  0272               	subwf	___lwdiv@dividend,w
  1869     03AA                     u835:
  1870     03AA  1C03               	skipc
  1871     03AB  2BAD               	goto	u831
  1872     03AC  2BAE               	goto	u830
  1873     03AD                     u831:
  1874     03AD  2BB5               	goto	l1321
  1875     03AE                     u830:
  1876     03AE                     l1317:
  1877     03AE  0870               	movf	___lwdiv@divisor,w
  1878     03AF  02F2               	subwf	___lwdiv@dividend,f
  1879     03B0  0871               	movf	___lwdiv@divisor+1,w
  1880     03B1  1C03               	skipc
  1881     03B2  03F3               	decf	___lwdiv@dividend+1,f
  1882     03B3  02F3               	subwf	___lwdiv@dividend+1,f
  1883     03B4                     l1319:
  1884     03B4  1475               	bsf	___lwdiv@quotient,0
  1885     03B5                     l1321:
  1886     03B5  3001               	movlw	1
  1887     03B6                     u845:
  1888     03B6  1003               	clrc
  1889     03B7  0CF1               	rrf	___lwdiv@divisor+1,f
  1890     03B8  0CF0               	rrf	___lwdiv@divisor,f
  1891     03B9  3EFF               	addlw	-1
  1892     03BA  1D03               	skipz
  1893     03BB  2BB6               	goto	u845
  1894     03BC                     l1323:
  1895     03BC  3001               	movlw	1
  1896     03BD  02F7               	subwf	___lwdiv@counter,f
  1897     03BE  1D03               	btfss	3,2
  1898     03BF  2BC1               	goto	u851
  1899     03C0  2BC2               	goto	u850
  1900     03C1                     u851:
  1901     03C1  2B9D               	goto	l1315
  1902     03C2                     u850:
  1903     03C2                     l1325:
  1904     03C2  0876               	movf	___lwdiv@quotient+1,w
  1905     03C3  00F1               	movwf	?___lwdiv+1
  1906     03C4  0875               	movf	___lwdiv@quotient,w
  1907     03C5  00F0               	movwf	?___lwdiv
  1908     03C6                     l541:
  1909     03C6  0008               	return
  1910     03C7                     __end_of___lwdiv:
  1911                           
  1912                           	psect	text4
  1913     01EA                     __ptext4:	
  1914 ;; *************** function _spiWrite *****************
  1915 ;; Defined at:
  1916 ;;		line 34 in file "SPI.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  dat             1    wreg     unsigned char 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;  dat             1    0[COMMON] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1930 ;;      Params:         0       0       0       0       0
  1931 ;;      Locals:         1       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0
  1933 ;;      Totals:         1       0       0       0       0
  1934 ;;Total ram usage:        1 bytes
  1935 ;; Hardware stack levels used: 1
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_main
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943     01EA                     _spiWrite:	
  1944                           ;psect for function _spiWrite
  1945                           
  1946                           
  1947                           ;incstack = 0
  1948                           ; Regs used in _spiWrite: [wreg]
  1949                           ;spiWrite@dat stored from wreg
  1950     01EA  00F0               	movwf	spiWrite@dat
  1951     01EB                     l1415:
  1952                           
  1953                           ;SPI.c: 34: void spiWrite(unsigned char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  1954     01EB  0870               	movf	spiWrite@dat,w
  1955     01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1956     01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1957     01EE  0093               	movwf	19	;volatile
  1958     01EF                     l147:
  1959     01EF  0008               	return
  1960     01F0                     __end_of_spiWrite:
  1961                           
  1962                           	psect	text5
  1963     01FF                     __ptext5:	
  1964 ;; *************** function _spiRead *****************
  1965 ;; Defined at:
  1966 ;;		line 47 in file "SPI.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      unsigned char 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0, pclath, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1980 ;;      Params:         0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0
  1983 ;;      Totals:         0       0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used: 1
  1986 ;; Hardware stack levels required when called: 1
  1987 ;; This function calls:
  1988 ;;		_spiReceiveWait
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994     01FF                     _spiRead:	
  1995                           ;psect for function _spiRead
  1996                           
  1997     01FF                     l1417:	
  1998                           ;incstack = 0
  1999                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2000                           
  2001                           
  2002                           ;SPI.c: 49:     spiReceiveWait();
  2003     01FF  120A  118A  21F0  120A  118A  	fcall	_spiReceiveWait
  2004     0204                     l1419:
  2005                           
  2006                           ;SPI.c: 50:     return(SSPBUF);
  2007     0204  1283               	bcf	3,5	;RP0=0, select bank0
  2008     0205  1303               	bcf	3,6	;RP1=0, select bank0
  2009     0206  0813               	movf	19,w	;volatile
  2010     0207                     l155:
  2011     0207  0008               	return
  2012     0208                     __end_of_spiRead:
  2013                           
  2014                           	psect	text6
  2015     01F0                     __ptext6:	
  2016 ;; *************** function _spiReceiveWait *****************
  2017 ;; Defined at:
  2018 ;;		line 29 in file "SPI.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		None
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2032 ;;      Params:         0       0       0       0       0
  2033 ;;      Locals:         0       0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0
  2035 ;;      Totals:         0       0       0       0       0
  2036 ;;Total ram usage:        0 bytes
  2037 ;; Hardware stack levels used: 1
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_spiRead
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045     01F0                     _spiReceiveWait:	
  2046                           ;psect for function _spiReceiveWait
  2047                           
  2048     01F0                     l1243:	
  2049                           ;incstack = 0
  2050                           ; Regs used in _spiReceiveWait: []
  2051                           
  2052     01F0                     l141:	
  2053                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  2054                           
  2055     01F0  1683               	bsf	3,5	;RP0=1, select bank1
  2056     01F1  1303               	bcf	3,6	;RP1=0, select bank1
  2057     01F2  1C14               	btfss	20,0	;volatile
  2058     01F3  29F5               	goto	u641
  2059     01F4  29F6               	goto	u640
  2060     01F5                     u641:
  2061     01F5  29F0               	goto	l141
  2062     01F6                     u640:
  2063     01F6                     l144:
  2064     01F6  0008               	return
  2065     01F7                     __end_of_spiReceiveWait:
  2066                           
  2067                           	psect	text7
  2068     0238                     __ptext7:	
  2069 ;; *************** function _setup *****************
  2070 ;; Defined at:
  2071 ;;		line 92 in file "main.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;		None
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;		None
  2076 ;; Return value:  Size  Location     Type
  2077 ;;                  1    wreg      void 
  2078 ;; Registers used:
  2079 ;;		wreg, status,2, status,0, pclath, cstack
  2080 ;; Tracked objects:
  2081 ;;		On entry : 0/0
  2082 ;;		On exit  : 0/0
  2083 ;;		Unchanged: 0/0
  2084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2085 ;;      Params:         0       0       0       0       0
  2086 ;;      Locals:         0       0       0       0       0
  2087 ;;      Temps:          0       0       0       0       0
  2088 ;;      Totals:         0       0       0       0       0
  2089 ;;Total ram usage:        0 bytes
  2090 ;; Hardware stack levels used: 1
  2091 ;; Hardware stack levels required when called: 1
  2092 ;; This function calls:
  2093 ;;		_spiInit
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099     0238                     _setup:	
  2100                           ;psect for function _setup
  2101                           
  2102     0238                     l1355:	
  2103                           ;incstack = 0
  2104                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  2105                           
  2106                           
  2107                           ;main.c: 93:     ANSEL = 0;
  2108     0238  1683               	bsf	3,5	;RP0=1, select bank3
  2109     0239  1703               	bsf	3,6	;RP1=1, select bank3
  2110     023A  0188               	clrf	8	;volatile
  2111                           
  2112                           ;main.c: 94:     ANSELH = 0;
  2113     023B  0189               	clrf	9	;volatile
  2114     023C                     l1357:
  2115                           
  2116                           ;main.c: 96:     TRISCbits.TRISC2 = 0;
  2117     023C  1683               	bsf	3,5	;RP0=1, select bank1
  2118     023D  1303               	bcf	3,6	;RP1=0, select bank1
  2119     023E  1107               	bcf	7,2	;volatile
  2120     023F                     l1359:
  2121                           
  2122                           ;main.c: 97:     TRISDbits.TRISD5 = 0;
  2123     023F  1288               	bcf	8,5	;volatile
  2124                           
  2125                           ;main.c: 98:     TRISB = 0;
  2126     0240  0186               	clrf	6	;volatile
  2127                           
  2128                           ;main.c: 99:     TRISD = 0;
  2129     0241  0188               	clrf	8	;volatile
  2130                           
  2131                           ;main.c: 100:     PORTB = 0;
  2132     0242  1283               	bcf	3,5	;RP0=0, select bank0
  2133     0243  1303               	bcf	3,6	;RP1=0, select bank0
  2134     0244  0186               	clrf	6	;volatile
  2135                           
  2136                           ;main.c: 101:     PORTD = 0;
  2137     0245  0188               	clrf	8	;volatile
  2138     0246                     l1361:
  2139                           
  2140                           ;main.c: 102:     PORTCbits.RC2 = 1;
  2141     0246  1507               	bsf	7,2	;volatile
  2142     0247                     l1363:
  2143                           
  2144                           ;main.c: 103:     PORTDbits.RD5 = 1;
  2145     0247  1688               	bsf	8,5	;volatile
  2146     0248                     l1365:
  2147                           
  2148                           ;main.c: 105:     OSCCONbits.IRCF2 = 1;
  2149     0248  1683               	bsf	3,5	;RP0=1, select bank1
  2150     0249  1303               	bcf	3,6	;RP1=0, select bank1
  2151     024A  170F               	bsf	15,6	;volatile
  2152     024B                     l1367:
  2153                           
  2154                           ;main.c: 106:     OSCCONbits.IRCF1 = 1;
  2155     024B  168F               	bsf	15,5	;volatile
  2156     024C                     l1369:
  2157                           
  2158                           ;main.c: 107:     OSCCONbits.IRCF0 = 0;
  2159     024C  120F               	bcf	15,4	;volatile
  2160     024D                     l1371:
  2161                           
  2162                           ;main.c: 108:     OSCCONbits.SCS = 1;
  2163     024D  140F               	bsf	15,0	;volatile
  2164     024E                     l1373:
  2165                           
  2166                           ;main.c: 110:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LO
      +                          W, SPI_IDLE_2_ACTIVE);
  2167     024E  01F0               	clrf	spiInit@sDataSample
  2168     024F  01F1               	clrf	spiInit@sClockIdle
  2169     0250  01F2               	clrf	spiInit@sTransmitEdge
  2170     0251  3020               	movlw	32
  2171     0252  120A  118A  2208  120A  118A  	fcall	_spiInit
  2172     0257                     l76:
  2173     0257  0008               	return
  2174     0258                     __end_of_setup:
  2175                           
  2176                           	psect	text8
  2177     0208                     __ptext8:	
  2178 ;; *************** function _spiInit *****************
  2179 ;; Defined at:
  2180 ;;		line 12 in file "SPI.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  sType           1    wreg     enum E1292
  2183 ;;  sDataSample     1    0[COMMON] enum E1300
  2184 ;;  sClockIdle      1    1[COMMON] enum E1304
  2185 ;;  sTransmitEdg    1    2[COMMON] enum E1308
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  sType           1    3[COMMON] enum E1292
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         3       0       0       0       0
  2198 ;;      Locals:         1       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0
  2200 ;;      Totals:         4       0       0       0       0
  2201 ;;Total ram usage:        4 bytes
  2202 ;; Hardware stack levels used: 1
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_setup
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210     0208                     _spiInit:	
  2211                           ;psect for function _spiInit
  2212                           
  2213                           
  2214                           ;incstack = 0
  2215                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2216                           ;spiInit@sType stored from wreg
  2217     0208  00F3               	movwf	spiInit@sType
  2218     0209                     l1203:
  2219                           
  2220                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISCbits.TRISC5 =
      +                           0;
  2221     0209  1683               	bsf	3,5	;RP0=1, select bank1
  2222     020A  1303               	bcf	3,6	;RP1=0, select bank1
  2223     020B  1287               	bcf	7,5	;volatile
  2224                           
  2225                           ;SPI.c: 15:     if(sType & 0b00000100)
  2226     020C  1D73               	btfss	spiInit@sType,2
  2227     020D  2A0F               	goto	u621
  2228     020E  2A10               	goto	u620
  2229     020F                     u621:
  2230     020F  2A14               	goto	l1209
  2231     0210                     u620:
  2232     0210                     l1205:
  2233                           
  2234                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  2235     0210  0872               	movf	spiInit@sTransmitEdge,w
  2236     0211  0094               	movwf	20	;volatile
  2237     0212                     l1207:
  2238                           
  2239                           ;SPI.c: 18:         TRISCbits.TRISC3 = 1;
  2240     0212  1587               	bsf	7,3	;volatile
  2241                           
  2242                           ;SPI.c: 19:     }
  2243     0213  2A18               	goto	l137
  2244     0214                     l1209:
  2245                           
  2246                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2247     0214  0870               	movf	spiInit@sDataSample,w
  2248     0215  0472               	iorwf	spiInit@sTransmitEdge,w
  2249     0216  0094               	movwf	20	;volatile
  2250     0217                     l1211:
  2251                           
  2252                           ;SPI.c: 23:         TRISCbits.TRISC3 = 0;
  2253     0217  1187               	bcf	7,3	;volatile
  2254     0218                     l137:	
  2255                           ;SPI.c: 24:     }
  2256                           
  2257                           
  2258                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  2259     0218  0873               	movf	spiInit@sType,w
  2260     0219  0471               	iorwf	spiInit@sClockIdle,w
  2261     021A  1283               	bcf	3,5	;RP0=0, select bank0
  2262     021B  1303               	bcf	3,6	;RP1=0, select bank0
  2263     021C  0094               	movwf	20	;volatile
  2264     021D                     l138:
  2265     021D  0008               	return
  2266     021E                     __end_of_spiInit:
  2267                           
  2268                           	psect	text9
  2269     02D2                     __ptext9:	
  2270 ;; *************** function _map *****************
  2271 ;; Defined at:
  2272 ;;		line 46 in file "main.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  value           1    wreg     unsigned char 
  2275 ;;  inputmin        2    4[BANK0 ] int 
  2276 ;;  inputmax        2    6[BANK0 ] int 
  2277 ;;  outmin          2    8[BANK0 ] int 
  2278 ;;  outmax          2   10[BANK0 ] int 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  value           1   12[COMMON] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  2    4[BANK0 ] int 
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0, pclath, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2290 ;;      Params:         0       8       0       0       0
  2291 ;;      Locals:         1       0       0       0       0
  2292 ;;      Temps:          1       0       0       0       0
  2293 ;;      Totals:         2       8       0       0       0
  2294 ;;Total ram usage:       10 bytes
  2295 ;; Hardware stack levels used: 1
  2296 ;; Hardware stack levels required when called: 1
  2297 ;; This function calls:
  2298 ;;		___awdiv
  2299 ;;		___wmul
  2300 ;; This function is called by:
  2301 ;;		_main
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305     02D2                     _map:	
  2306                           ;psect for function _map
  2307                           
  2308                           
  2309                           ;incstack = 0
  2310                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  2311                           ;map@value stored from wreg
  2312     02D2  00FC               	movwf	map@value
  2313     02D3                     l1351:
  2314                           
  2315                           ;main.c: 47:     return ((value - inputmin)*(outmax-outmin)) / (inputmax-inputmin)+outmi
      +                          n;}
  2316     02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2317     02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2318     02D5  084A               	movf	map@inputmin,w
  2319     02D6  024C               	subwf	map@inputmax,w
  2320     02D7  00F6               	movwf	___awdiv@divisor
  2321     02D8  084B               	movf	map@inputmin+1,w
  2322     02D9  1C03               	skipc
  2323     02DA  0A4B               	incf	map@inputmin+1,w
  2324     02DB  024D               	subwf	map@inputmax+1,w
  2325     02DC  00F7               	movwf	___awdiv@divisor+1
  2326     02DD  087C               	movf	map@value,w
  2327     02DE  00FB               	movwf	??_map
  2328     02DF  084A               	movf	map@inputmin,w
  2329     02E0  027B               	subwf	??_map,w
  2330     02E1  00F0               	movwf	___wmul@multiplier
  2331     02E2  094B               	comf	map@inputmin+1,w
  2332     02E3  1803               	skipnc
  2333     02E4  3E01               	addlw	1
  2334     02E5  00F1               	movwf	___wmul@multiplier+1
  2335     02E6  084E               	movf	map@outmin,w
  2336     02E7  0250               	subwf	map@outmax,w
  2337     02E8  00F2               	movwf	___wmul@multiplicand
  2338     02E9  084F               	movf	map@outmin+1,w
  2339     02EA  1C03               	skipc
  2340     02EB  0A4F               	incf	map@outmin+1,w
  2341     02EC  0251               	subwf	map@outmax+1,w
  2342     02ED  00F3               	movwf	___wmul@multiplicand+1
  2343     02EE  120A  118A  227A  120A  118A  	fcall	___wmul
  2344     02F3  0871               	movf	?___wmul+1,w
  2345     02F4  00F9               	movwf	___awdiv@dividend+1
  2346     02F5  0870               	movf	?___wmul,w
  2347     02F6  00F8               	movwf	___awdiv@dividend
  2348     02F7  120A  118A  24C5  120A  118A  	fcall	___awdiv
  2349     02FC  1283               	bcf	3,5	;RP0=0, select bank0
  2350     02FD  1303               	bcf	3,6	;RP1=0, select bank0
  2351     02FE  084E               	movf	map@outmin,w
  2352     02FF  0776               	addwf	?___awdiv,w
  2353     0300  00CA               	movwf	?_map
  2354     0301  084F               	movf	map@outmin+1,w
  2355     0302  1803               	skipnc
  2356     0303  0A4F               	incf	map@outmin+1,w
  2357     0304  0777               	addwf	?___awdiv+1,w
  2358     0305  00CB               	movwf	?_map+1
  2359     0306                     l65:
  2360     0306  0008               	return
  2361     0307                     __end_of_map:
  2362                           
  2363                           	psect	text10
  2364     027A                     __ptext10:	
  2365 ;; *************** function ___wmul *****************
  2366 ;; Defined at:
  2367 ;;		line 15 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  multiplier      2    0[COMMON] unsigned int 
  2370 ;;  multiplicand    2    2[COMMON] unsigned int 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  product         2    4[COMMON] unsigned int 
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  2    0[COMMON] unsigned int 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2382 ;;      Params:         4       0       0       0       0
  2383 ;;      Locals:         2       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0
  2385 ;;      Totals:         6       0       0       0       0
  2386 ;;Total ram usage:        6 bytes
  2387 ;; Hardware stack levels used: 1
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_map
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396     027A                     ___wmul:	
  2397                           ;psect for function ___wmul
  2398                           
  2399     027A                     l1245:	
  2400                           ;incstack = 0
  2401                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2402                           
  2403     027A  01F4               	clrf	___wmul@product
  2404     027B  01F5               	clrf	___wmul@product+1
  2405     027C                     l1247:
  2406     027C  1C70               	btfss	___wmul@multiplier,0
  2407     027D  2A7F               	goto	u651
  2408     027E  2A80               	goto	u650
  2409     027F                     u651:
  2410     027F  2A86               	goto	l269
  2411     0280                     u650:
  2412     0280                     l1249:
  2413     0280  0872               	movf	___wmul@multiplicand,w
  2414     0281  07F4               	addwf	___wmul@product,f
  2415     0282  1803               	skipnc
  2416     0283  0AF5               	incf	___wmul@product+1,f
  2417     0284  0873               	movf	___wmul@multiplicand+1,w
  2418     0285  07F5               	addwf	___wmul@product+1,f
  2419     0286                     l269:
  2420     0286  3001               	movlw	1
  2421     0287                     u665:
  2422     0287  1003               	clrc
  2423     0288  0DF2               	rlf	___wmul@multiplicand,f
  2424     0289  0DF3               	rlf	___wmul@multiplicand+1,f
  2425     028A  3EFF               	addlw	-1
  2426     028B  1D03               	skipz
  2427     028C  2A87               	goto	u665
  2428     028D                     l1251:
  2429     028D  3001               	movlw	1
  2430     028E                     u675:
  2431     028E  1003               	clrc
  2432     028F  0CF1               	rrf	___wmul@multiplier+1,f
  2433     0290  0CF0               	rrf	___wmul@multiplier,f
  2434     0291  3EFF               	addlw	-1
  2435     0292  1D03               	skipz
  2436     0293  2A8E               	goto	u675
  2437     0294                     l1253:
  2438     0294  0870               	movf	___wmul@multiplier,w
  2439     0295  0471               	iorwf	___wmul@multiplier+1,w
  2440     0296  1D03               	btfss	3,2
  2441     0297  2A99               	goto	u681
  2442     0298  2A9A               	goto	u680
  2443     0299                     u681:
  2444     0299  2A7C               	goto	l1247
  2445     029A                     u680:
  2446     029A                     l1255:
  2447     029A  0875               	movf	___wmul@product+1,w
  2448     029B  00F1               	movwf	?___wmul+1
  2449     029C  0874               	movf	___wmul@product,w
  2450     029D  00F0               	movwf	?___wmul
  2451     029E                     l271:
  2452     029E  0008               	return
  2453     029F                     __end_of___wmul:
  2454                           
  2455                           	psect	text11
  2456     04C5                     __ptext11:	
  2457 ;; *************** function ___awdiv *****************
  2458 ;; Defined at:
  2459 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  divisor         2    6[COMMON] int 
  2462 ;;  dividend        2    8[COMMON] int 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;  quotient        2    2[BANK0 ] int 
  2465 ;;  sign            1    1[BANK0 ] unsigned char 
  2466 ;;  counter         1    0[BANK0 ] unsigned char 
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  2    6[COMMON] int 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2476 ;;      Params:         4       0       0       0       0
  2477 ;;      Locals:         0       4       0       0       0
  2478 ;;      Temps:          1       0       0       0       0
  2479 ;;      Totals:         5       4       0       0       0
  2480 ;;Total ram usage:        9 bytes
  2481 ;; Hardware stack levels used: 1
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_map
  2486 ;;		_main
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490     04C5                     ___awdiv:	
  2491                           ;psect for function ___awdiv
  2492                           
  2493     04C5                     l1259:	
  2494                           ;incstack = 0
  2495                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2496                           
  2497     04C5  1283               	bcf	3,5	;RP0=0, select bank0
  2498     04C6  1303               	bcf	3,6	;RP1=0, select bank0
  2499     04C7  01C7               	clrf	___awdiv@sign
  2500     04C8                     l1261:
  2501     04C8  1FF7               	btfss	___awdiv@divisor+1,7
  2502     04C9  2CCB               	goto	u691
  2503     04CA  2CCC               	goto	u690
  2504     04CB                     u691:
  2505     04CB  2CD3               	goto	l1267
  2506     04CC                     u690:
  2507     04CC                     l1263:
  2508     04CC  09F6               	comf	___awdiv@divisor,f
  2509     04CD  09F7               	comf	___awdiv@divisor+1,f
  2510     04CE  0AF6               	incf	___awdiv@divisor,f
  2511     04CF  1903               	skipnz
  2512     04D0  0AF7               	incf	___awdiv@divisor+1,f
  2513     04D1                     l1265:
  2514     04D1  01C7               	clrf	___awdiv@sign
  2515     04D2  0AC7               	incf	___awdiv@sign,f
  2516     04D3                     l1267:
  2517     04D3  1FF9               	btfss	___awdiv@dividend+1,7
  2518     04D4  2CD6               	goto	u701
  2519     04D5  2CD7               	goto	u700
  2520     04D6                     u701:
  2521     04D6  2CE0               	goto	l1273
  2522     04D7                     u700:
  2523     04D7                     l1269:
  2524     04D7  09F8               	comf	___awdiv@dividend,f
  2525     04D8  09F9               	comf	___awdiv@dividend+1,f
  2526     04D9  0AF8               	incf	___awdiv@dividend,f
  2527     04DA  1903               	skipnz
  2528     04DB  0AF9               	incf	___awdiv@dividend+1,f
  2529     04DC                     l1271:
  2530     04DC  3001               	movlw	1
  2531     04DD  00FA               	movwf	??___awdiv
  2532     04DE  087A               	movf	??___awdiv,w
  2533     04DF  06C7               	xorwf	___awdiv@sign,f
  2534     04E0                     l1273:
  2535     04E0  01C8               	clrf	___awdiv@quotient
  2536     04E1  01C9               	clrf	___awdiv@quotient+1
  2537     04E2                     l1275:
  2538     04E2  0876               	movf	___awdiv@divisor,w
  2539     04E3  0477               	iorwf	___awdiv@divisor+1,w
  2540     04E4  1903               	btfsc	3,2
  2541     04E5  2CE7               	goto	u711
  2542     04E6  2CE8               	goto	u710
  2543     04E7                     u711:
  2544     04E7  2D1F               	goto	l1295
  2545     04E8                     u710:
  2546     04E8                     l1277:
  2547     04E8  01C6               	clrf	___awdiv@counter
  2548     04E9  0AC6               	incf	___awdiv@counter,f
  2549     04EA  2CF6               	goto	l1283
  2550     04EB                     l1279:
  2551     04EB  3001               	movlw	1
  2552     04EC                     u725:
  2553     04EC  1003               	clrc
  2554     04ED  0DF6               	rlf	___awdiv@divisor,f
  2555     04EE  0DF7               	rlf	___awdiv@divisor+1,f
  2556     04EF  3EFF               	addlw	-1
  2557     04F0  1D03               	skipz
  2558     04F1  2CEC               	goto	u725
  2559     04F2                     l1281:
  2560     04F2  3001               	movlw	1
  2561     04F3  00FA               	movwf	??___awdiv
  2562     04F4  087A               	movf	??___awdiv,w
  2563     04F5  07C6               	addwf	___awdiv@counter,f
  2564     04F6                     l1283:
  2565     04F6  1FF7               	btfss	___awdiv@divisor+1,7
  2566     04F7  2CF9               	goto	u731
  2567     04F8  2CFA               	goto	u730
  2568     04F9                     u731:
  2569     04F9  2CEB               	goto	l1279
  2570     04FA                     u730:
  2571     04FA                     l1285:
  2572     04FA  3001               	movlw	1
  2573     04FB                     u745:
  2574     04FB  1003               	clrc
  2575     04FC  0DC8               	rlf	___awdiv@quotient,f
  2576     04FD  0DC9               	rlf	___awdiv@quotient+1,f
  2577     04FE  3EFF               	addlw	-1
  2578     04FF  1D03               	skipz
  2579     0500  2CFB               	goto	u745
  2580     0501  0877               	movf	___awdiv@divisor+1,w
  2581     0502  0279               	subwf	___awdiv@dividend+1,w
  2582     0503  1D03               	skipz
  2583     0504  2D07               	goto	u755
  2584     0505  0876               	movf	___awdiv@divisor,w
  2585     0506  0278               	subwf	___awdiv@dividend,w
  2586     0507                     u755:
  2587     0507  1C03               	skipc
  2588     0508  2D0A               	goto	u751
  2589     0509  2D0B               	goto	u750
  2590     050A                     u751:
  2591     050A  2D12               	goto	l1291
  2592     050B                     u750:
  2593     050B                     l1287:
  2594     050B  0876               	movf	___awdiv@divisor,w
  2595     050C  02F8               	subwf	___awdiv@dividend,f
  2596     050D  0877               	movf	___awdiv@divisor+1,w
  2597     050E  1C03               	skipc
  2598     050F  03F9               	decf	___awdiv@dividend+1,f
  2599     0510  02F9               	subwf	___awdiv@dividend+1,f
  2600     0511                     l1289:
  2601     0511  1448               	bsf	___awdiv@quotient,0
  2602     0512                     l1291:
  2603     0512  3001               	movlw	1
  2604     0513                     u765:
  2605     0513  1003               	clrc
  2606     0514  0CF7               	rrf	___awdiv@divisor+1,f
  2607     0515  0CF6               	rrf	___awdiv@divisor,f
  2608     0516  3EFF               	addlw	-1
  2609     0517  1D03               	skipz
  2610     0518  2D13               	goto	u765
  2611     0519                     l1293:
  2612     0519  3001               	movlw	1
  2613     051A  02C6               	subwf	___awdiv@counter,f
  2614     051B  1D03               	btfss	3,2
  2615     051C  2D1E               	goto	u771
  2616     051D  2D1F               	goto	u770
  2617     051E                     u771:
  2618     051E  2CFA               	goto	l1285
  2619     051F                     u770:
  2620     051F                     l1295:
  2621     051F  0847               	movf	___awdiv@sign,w
  2622     0520  1903               	btfsc	3,2
  2623     0521  2D23               	goto	u781
  2624     0522  2D24               	goto	u780
  2625     0523                     u781:
  2626     0523  2D29               	goto	l1299
  2627     0524                     u780:
  2628     0524                     l1297:
  2629     0524  09C8               	comf	___awdiv@quotient,f
  2630     0525  09C9               	comf	___awdiv@quotient+1,f
  2631     0526  0AC8               	incf	___awdiv@quotient,f
  2632     0527  1903               	skipnz
  2633     0528  0AC9               	incf	___awdiv@quotient+1,f
  2634     0529                     l1299:
  2635     0529  0849               	movf	___awdiv@quotient+1,w
  2636     052A  00F7               	movwf	?___awdiv+1
  2637     052B  0848               	movf	___awdiv@quotient,w
  2638     052C  00F6               	movwf	?___awdiv
  2639     052D                     l422:
  2640     052D  0008               	return
  2641     052E                     __end_of___awdiv:
  2642                           
  2643                           	psect	text12
  2644     040D                     __ptext12:	
  2645 ;; *************** function ___awmod *****************
  2646 ;; Defined at:
  2647 ;;		line 5 in file "E:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  divisor         2    4[BANK0 ] int 
  2650 ;;  dividend        2    6[BANK0 ] int 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  sign            1   13[COMMON] unsigned char 
  2653 ;;  counter         1   12[COMMON] unsigned char 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  2    4[BANK0 ] int 
  2656 ;; Registers used:
  2657 ;;		wreg, status,2, status,0
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2663 ;;      Params:         0       4       0       0       0
  2664 ;;      Locals:         2       0       0       0       0
  2665 ;;      Temps:          1       0       0       0       0
  2666 ;;      Totals:         3       4       0       0       0
  2667 ;;Total ram usage:        7 bytes
  2668 ;; Hardware stack levels used: 1
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_main
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675                           
  2676     040D                     ___awmod:	
  2677                           ;psect for function ___awmod
  2678                           
  2679     040D                     l1485:	
  2680                           ;incstack = 0
  2681                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2682                           
  2683     040D  01FD               	clrf	___awmod@sign
  2684     040E                     l1487:
  2685     040E  1283               	bcf	3,5	;RP0=0, select bank0
  2686     040F  1303               	bcf	3,6	;RP1=0, select bank0
  2687     0410  1FCD               	btfss	___awmod@dividend+1,7
  2688     0411  2C13               	goto	u1061
  2689     0412  2C14               	goto	u1060
  2690     0413                     u1061:
  2691     0413  2C1B               	goto	l1493
  2692     0414                     u1060:
  2693     0414                     l1489:
  2694     0414  09CC               	comf	___awmod@dividend,f
  2695     0415  09CD               	comf	___awmod@dividend+1,f
  2696     0416  0ACC               	incf	___awmod@dividend,f
  2697     0417  1903               	skipnz
  2698     0418  0ACD               	incf	___awmod@dividend+1,f
  2699     0419                     l1491:
  2700     0419  01FD               	clrf	___awmod@sign
  2701     041A  0AFD               	incf	___awmod@sign,f
  2702     041B                     l1493:
  2703     041B  1FCB               	btfss	___awmod@divisor+1,7
  2704     041C  2C1E               	goto	u1071
  2705     041D  2C1F               	goto	u1070
  2706     041E                     u1071:
  2707     041E  2C24               	goto	l1497
  2708     041F                     u1070:
  2709     041F                     l1495:
  2710     041F  09CA               	comf	___awmod@divisor,f
  2711     0420  09CB               	comf	___awmod@divisor+1,f
  2712     0421  0ACA               	incf	___awmod@divisor,f
  2713     0422  1903               	skipnz
  2714     0423  0ACB               	incf	___awmod@divisor+1,f
  2715     0424                     l1497:
  2716     0424  084A               	movf	___awmod@divisor,w
  2717     0425  044B               	iorwf	___awmod@divisor+1,w
  2718     0426  1903               	btfsc	3,2
  2719     0427  2C29               	goto	u1081
  2720     0428  2C2A               	goto	u1080
  2721     0429                     u1081:
  2722     0429  2C59               	goto	l1515
  2723     042A                     u1080:
  2724     042A                     l1499:
  2725     042A  01FC               	clrf	___awmod@counter
  2726     042B  0AFC               	incf	___awmod@counter,f
  2727     042C  2C38               	goto	l1505
  2728     042D                     l1501:
  2729     042D  3001               	movlw	1
  2730     042E                     u1095:
  2731     042E  1003               	clrc
  2732     042F  0DCA               	rlf	___awmod@divisor,f
  2733     0430  0DCB               	rlf	___awmod@divisor+1,f
  2734     0431  3EFF               	addlw	-1
  2735     0432  1D03               	skipz
  2736     0433  2C2E               	goto	u1095
  2737     0434                     l1503:
  2738     0434  3001               	movlw	1
  2739     0435  00FB               	movwf	??___awmod
  2740     0436  087B               	movf	??___awmod,w
  2741     0437  07FC               	addwf	___awmod@counter,f
  2742     0438                     l1505:
  2743     0438  1FCB               	btfss	___awmod@divisor+1,7
  2744     0439  2C3B               	goto	u1101
  2745     043A  2C3C               	goto	u1100
  2746     043B                     u1101:
  2747     043B  2C2D               	goto	l1501
  2748     043C                     u1100:
  2749     043C                     l1507:
  2750     043C  084B               	movf	___awmod@divisor+1,w
  2751     043D  024D               	subwf	___awmod@dividend+1,w
  2752     043E  1D03               	skipz
  2753     043F  2C42               	goto	u1115
  2754     0440  084A               	movf	___awmod@divisor,w
  2755     0441  024C               	subwf	___awmod@dividend,w
  2756     0442                     u1115:
  2757     0442  1C03               	skipc
  2758     0443  2C45               	goto	u1111
  2759     0444  2C46               	goto	u1110
  2760     0445                     u1111:
  2761     0445  2C4C               	goto	l1511
  2762     0446                     u1110:
  2763     0446                     l1509:
  2764     0446  084A               	movf	___awmod@divisor,w
  2765     0447  02CC               	subwf	___awmod@dividend,f
  2766     0448  084B               	movf	___awmod@divisor+1,w
  2767     0449  1C03               	skipc
  2768     044A  03CD               	decf	___awmod@dividend+1,f
  2769     044B  02CD               	subwf	___awmod@dividend+1,f
  2770     044C                     l1511:
  2771     044C  3001               	movlw	1
  2772     044D                     u1125:
  2773     044D  1003               	clrc
  2774     044E  0CCB               	rrf	___awmod@divisor+1,f
  2775     044F  0CCA               	rrf	___awmod@divisor,f
  2776     0450  3EFF               	addlw	-1
  2777     0451  1D03               	skipz
  2778     0452  2C4D               	goto	u1125
  2779     0453                     l1513:
  2780     0453  3001               	movlw	1
  2781     0454  02FC               	subwf	___awmod@counter,f
  2782     0455  1D03               	btfss	3,2
  2783     0456  2C58               	goto	u1131
  2784     0457  2C59               	goto	u1130
  2785     0458                     u1131:
  2786     0458  2C3C               	goto	l1507
  2787     0459                     u1130:
  2788     0459                     l1515:
  2789     0459  087D               	movf	___awmod@sign,w
  2790     045A  1903               	btfsc	3,2
  2791     045B  2C5D               	goto	u1141
  2792     045C  2C5E               	goto	u1140
  2793     045D                     u1141:
  2794     045D  2C63               	goto	l1519
  2795     045E                     u1140:
  2796     045E                     l1517:
  2797     045E  09CC               	comf	___awmod@dividend,f
  2798     045F  09CD               	comf	___awmod@dividend+1,f
  2799     0460  0ACC               	incf	___awmod@dividend,f
  2800     0461  1903               	skipnz
  2801     0462  0ACD               	incf	___awmod@dividend+1,f
  2802     0463                     l1519:
  2803     0463  084D               	movf	___awmod@dividend+1,w
  2804     0464  00CB               	movwf	?___awmod+1
  2805     0465  084C               	movf	___awmod@dividend,w
  2806     0466  00CA               	movwf	?___awmod
  2807     0467                     l435:
  2808     0467  0008               	return
  2809     0468                     __end_of___awmod:
  2810                           
  2811                           	psect	text13
  2812     0341                     __ptext13:	
  2813 ;; *************** function _Lcd_Write_String *****************
  2814 ;; Defined at:
  2815 ;;		line 98 in file "LCD.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  a               2    5[COMMON] PTR unsigned char 
  2818 ;;		 -> buffer(20), STR_3(4), STR_2(4), STR_1(4), 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  i               2   10[COMMON] int 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2830 ;;      Params:         2       0       0       0       0
  2831 ;;      Locals:         2       0       0       0       0
  2832 ;;      Temps:          3       0       0       0       0
  2833 ;;      Totals:         7       0       0       0       0
  2834 ;;Total ram usage:        7 bytes
  2835 ;; Hardware stack levels used: 1
  2836 ;; Hardware stack levels required when called: 2
  2837 ;; This function calls:
  2838 ;;		_Lcd_Write_Char
  2839 ;; This function is called by:
  2840 ;;		_main
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844     0341                     _Lcd_Write_String:	
  2845                           ;psect for function _Lcd_Write_String
  2846                           
  2847     0341                     l1407:	
  2848                           ;incstack = 0
  2849                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2850                           
  2851                           
  2852                           ;LCD.c: 99:     int i;;LCD.c: 100:     for (i = 0; a[i] != '\0'; i++)
  2853     0341  01FA               	clrf	Lcd_Write_String@i
  2854     0342  01FB               	clrf	Lcd_Write_String@i+1
  2855     0343  2B66               	goto	l1413
  2856     0344                     l1409:
  2857                           
  2858                           ;LCD.c: 101:         Lcd_Write_Char(a[i]);
  2859     0344  087A               	movf	Lcd_Write_String@i,w
  2860     0345  0775               	addwf	Lcd_Write_String@a,w
  2861     0346  00F8               	movwf	??_Lcd_Write_String+1
  2862     0347  0876               	movf	Lcd_Write_String@a+1,w
  2863     0348  00F7               	movwf	??_Lcd_Write_String
  2864     0349  1803               	skipnc
  2865     034A  0AF7               	incf	??_Lcd_Write_String,f
  2866     034B  1FFA               	btfss	Lcd_Write_String@i,7
  2867     034C  2B4E               	goto	u960
  2868     034D  03F7               	decf	??_Lcd_Write_String,f
  2869     034E                     u960:
  2870     034E  0877               	movf	??_Lcd_Write_String,w
  2871     034F  00F9               	movwf	??_Lcd_Write_String+2
  2872     0350  0879               	movf	??_Lcd_Write_String+2,w
  2873     0351  1283               	bcf	3,5	;RP0=0, select bank0
  2874     0352  1303               	bcf	3,6	;RP1=0, select bank0
  2875     0353  00FF               	movwf	btemp+1
  2876     0354  0878               	movf	??_Lcd_Write_String+1,w
  2877     0355  0084               	movwf	4
  2878     0356  120A  118A  2003  120A  118A  	fcall	stringtab
  2879     035B  120A  118A  229F  120A  118A  	fcall	_Lcd_Write_Char
  2880     0360                     l1411:
  2881     0360  3001               	movlw	1
  2882     0361  07FA               	addwf	Lcd_Write_String@i,f
  2883     0362  1803               	skipnc
  2884     0363  0AFB               	incf	Lcd_Write_String@i+1,f
  2885     0364  3000               	movlw	0
  2886     0365  07FB               	addwf	Lcd_Write_String@i+1,f
  2887     0366                     l1413:
  2888     0366  087A               	movf	Lcd_Write_String@i,w
  2889     0367  0775               	addwf	Lcd_Write_String@a,w
  2890     0368  00F8               	movwf	??_Lcd_Write_String+1
  2891     0369  0876               	movf	Lcd_Write_String@a+1,w
  2892     036A  00F7               	movwf	??_Lcd_Write_String
  2893     036B  1803               	skipnc
  2894     036C  0AF7               	incf	??_Lcd_Write_String,f
  2895     036D  1FFA               	btfss	Lcd_Write_String@i,7
  2896     036E  2B70               	goto	u970
  2897     036F  03F7               	decf	??_Lcd_Write_String,f
  2898     0370                     u970:
  2899     0370  0877               	movf	??_Lcd_Write_String,w
  2900     0371  00F9               	movwf	??_Lcd_Write_String+2
  2901     0372  0879               	movf	??_Lcd_Write_String+2,w
  2902     0373  1283               	bcf	3,5	;RP0=0, select bank0
  2903     0374  1303               	bcf	3,6	;RP1=0, select bank0
  2904     0375  00FF               	movwf	btemp+1
  2905     0376  0878               	movf	??_Lcd_Write_String+1,w
  2906     0377  0084               	movwf	4
  2907     0378  120A  118A  2003  120A  118A  	fcall	stringtab
  2908     037D  3A00               	xorlw	0
  2909     037E  1D03               	skipz
  2910     037F  2B81               	goto	u981
  2911     0380  2B82               	goto	u980
  2912     0381                     u981:
  2913     0381  2B44               	goto	l1409
  2914     0382                     u980:
  2915     0382                     l117:
  2916     0382  0008               	return
  2917     0383                     __end_of_Lcd_Write_String:
  2918                           
  2919                           	psect	text14
  2920     029F                     __ptext14:	
  2921 ;; *************** function _Lcd_Write_Char *****************
  2922 ;; Defined at:
  2923 ;;		line 83 in file "LCD.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  a               1    wreg     unsigned char 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;  a               1    4[COMMON] unsigned char 
  2928 ;;  y               1    3[COMMON] unsigned char 
  2929 ;;  temp            1    2[COMMON] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0, pclath, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2939 ;;      Params:         0       0       0       0       0
  2940 ;;      Locals:         3       0       0       0       0
  2941 ;;      Temps:          1       0       0       0       0
  2942 ;;      Totals:         4       0       0       0       0
  2943 ;;Total ram usage:        4 bytes
  2944 ;; Hardware stack levels used: 1
  2945 ;; Hardware stack levels required when called: 1
  2946 ;; This function calls:
  2947 ;;		_Lcd_Port
  2948 ;; This function is called by:
  2949 ;;		_Lcd_Write_String
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953     029F                     _Lcd_Write_Char:	
  2954                           ;psect for function _Lcd_Write_Char
  2955                           
  2956                           
  2957                           ;incstack = 0
  2958                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2959                           ;Lcd_Write_Char@a stored from wreg
  2960     029F  00F4               	movwf	Lcd_Write_Char@a
  2961     02A0                     l1223:
  2962                           
  2963                           ;LCD.c: 84:     char temp, y;;LCD.c: 85:     temp = a & 0x0F;
  2964     02A0  0874               	movf	Lcd_Write_Char@a,w
  2965     02A1  390F               	andlw	15
  2966     02A2  00F2               	movwf	Lcd_Write_Char@temp
  2967                           
  2968                           ;LCD.c: 86:     y = a & 0xF0;
  2969     02A3  0874               	movf	Lcd_Write_Char@a,w
  2970     02A4  39F0               	andlw	240
  2971     02A5  00F3               	movwf	Lcd_Write_Char@y
  2972     02A6                     l1225:
  2973                           
  2974                           ;LCD.c: 87:     PORTDbits.RD6 = 1;
  2975     02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2976     02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2977     02A8  1708               	bsf	8,6	;volatile
  2978     02A9                     l1227:
  2979                           
  2980                           ;LCD.c: 88:     Lcd_Port(y >> 4);
  2981     02A9  0873               	movf	Lcd_Write_Char@y,w
  2982     02AA  00F1               	movwf	??_Lcd_Write_Char
  2983     02AB  3004               	movlw	4
  2984     02AC                     u635:
  2985     02AC  1003               	clrc
  2986     02AD  0CF1               	rrf	??_Lcd_Write_Char,f
  2987     02AE  3EFF               	addlw	-1
  2988     02AF  1D03               	skipz
  2989     02B0  2AAC               	goto	u635
  2990     02B1  0871               	movf	??_Lcd_Write_Char,w
  2991     02B2  120A  118A  2258  120A  118A  	fcall	_Lcd_Port
  2992     02B7                     l1229:
  2993                           
  2994                           ;LCD.c: 89:     PORTDbits.RD7 = 1;
  2995     02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2996     02B8  1303               	bcf	3,6	;RP1=0, select bank0
  2997     02B9  1788               	bsf	8,7	;volatile
  2998     02BA                     l1231:
  2999                           
  3000                           ;LCD.c: 90:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3001     02BA  300D               	movlw	13
  3002     02BB  00F1               	movwf	??_Lcd_Write_Char
  3003     02BC                     u1187:
  3004     02BC  0BF1               	decfsz	??_Lcd_Write_Char,f
  3005     02BD  2ABC               	goto	u1187
  3006     02BE                     l1233:
  3007                           
  3008                           ;LCD.c: 91:     PORTDbits.RD7 = 0;
  3009     02BE  1283               	bcf	3,5	;RP0=0, select bank0
  3010     02BF  1303               	bcf	3,6	;RP1=0, select bank0
  3011     02C0  1388               	bcf	8,7	;volatile
  3012     02C1                     l1235:
  3013                           
  3014                           ;LCD.c: 92:     Lcd_Port(temp);
  3015     02C1  0872               	movf	Lcd_Write_Char@temp,w
  3016     02C2  120A  118A  2258  120A  118A  	fcall	_Lcd_Port
  3017     02C7                     l1237:
  3018                           
  3019                           ;LCD.c: 93:     PORTDbits.RD7 = 1;
  3020     02C7  1283               	bcf	3,5	;RP0=0, select bank0
  3021     02C8  1303               	bcf	3,6	;RP1=0, select bank0
  3022     02C9  1788               	bsf	8,7	;volatile
  3023     02CA                     l1239:
  3024                           
  3025                           ;LCD.c: 94:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3026     02CA  300D               	movlw	13
  3027     02CB  00F1               	movwf	??_Lcd_Write_Char
  3028     02CC                     u1197:
  3029     02CC  0BF1               	decfsz	??_Lcd_Write_Char,f
  3030     02CD  2ACC               	goto	u1197
  3031     02CE                     l1241:
  3032                           
  3033                           ;LCD.c: 95:     PORTDbits.RD7 = 0;
  3034     02CE  1283               	bcf	3,5	;RP0=0, select bank0
  3035     02CF  1303               	bcf	3,6	;RP1=0, select bank0
  3036     02D0  1388               	bcf	8,7	;volatile
  3037     02D1                     l111:
  3038     02D1  0008               	return
  3039     02D2                     __end_of_Lcd_Write_Char:
  3040                           
  3041                           	psect	text15
  3042     03C7                     __ptext15:	
  3043 ;; *************** function _Lcd_Set_Cursor *****************
  3044 ;; Defined at:
  3045 ;;		line 48 in file "LCD.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;  a               1    wreg     unsigned char 
  3048 ;;  b               1    4[COMMON] unsigned char 
  3049 ;; Auto vars:     Size  Location     Type
  3050 ;;  a               1    6[COMMON] unsigned char 
  3051 ;;  temp            1    9[COMMON] unsigned char 
  3052 ;;  y               1    8[COMMON] unsigned char 
  3053 ;;  z               1    7[COMMON] unsigned char 
  3054 ;; Return value:  Size  Location     Type
  3055 ;;                  1    wreg      void 
  3056 ;; Registers used:
  3057 ;;		wreg, status,2, status,0, pclath, cstack
  3058 ;; Tracked objects:
  3059 ;;		On entry : 0/0
  3060 ;;		On exit  : 0/0
  3061 ;;		Unchanged: 0/0
  3062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3063 ;;      Params:         1       0       0       0       0
  3064 ;;      Locals:         4       0       0       0       0
  3065 ;;      Temps:          1       0       0       0       0
  3066 ;;      Totals:         6       0       0       0       0
  3067 ;;Total ram usage:        6 bytes
  3068 ;; Hardware stack levels used: 1
  3069 ;; Hardware stack levels required when called: 2
  3070 ;; This function calls:
  3071 ;;		_Lcd_Cmd
  3072 ;; This function is called by:
  3073 ;;		_main
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077     03C7                     _Lcd_Set_Cursor:	
  3078                           ;psect for function _Lcd_Set_Cursor
  3079                           
  3080                           
  3081                           ;incstack = 0
  3082                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3083                           ;Lcd_Set_Cursor@a stored from wreg
  3084     03C7  00F6               	movwf	Lcd_Set_Cursor@a
  3085     03C8                     l1387:
  3086                           
  3087                           ;LCD.c: 49:     char temp, z, y;;LCD.c: 50:     if (a == 1) {
  3088     03C8  0376               	decf	Lcd_Set_Cursor@a,w
  3089     03C9  1D03               	btfss	3,2
  3090     03CA  2BCC               	goto	u921
  3091     03CB  2BCD               	goto	u920
  3092     03CC                     u921:
  3093     03CC  2BEA               	goto	l1397
  3094     03CD                     u920:
  3095     03CD                     l1389:
  3096                           
  3097                           ;LCD.c: 51:         temp = 0x80 + b - 1;
  3098     03CD  0874               	movf	Lcd_Set_Cursor@b,w
  3099     03CE  3E7F               	addlw	127
  3100     03CF  00F9               	movwf	Lcd_Set_Cursor@temp
  3101                           
  3102                           ;LCD.c: 52:         z = temp >> 4;
  3103     03D0  0879               	movf	Lcd_Set_Cursor@temp,w
  3104     03D1  00F5               	movwf	??_Lcd_Set_Cursor
  3105     03D2  3004               	movlw	4
  3106     03D3                     u935:
  3107     03D3  1003               	clrc
  3108     03D4  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3109     03D5  3EFF               	addlw	-1
  3110     03D6  1D03               	skipz
  3111     03D7  2BD3               	goto	u935
  3112     03D8  0875               	movf	??_Lcd_Set_Cursor,w
  3113     03D9  00F7               	movwf	Lcd_Set_Cursor@z
  3114     03DA                     l1391:
  3115                           
  3116                           ;LCD.c: 53:         y = temp & 0x0F;
  3117     03DA  0879               	movf	Lcd_Set_Cursor@temp,w
  3118     03DB  390F               	andlw	15
  3119     03DC  00F8               	movwf	Lcd_Set_Cursor@y
  3120     03DD                     l1393:
  3121                           
  3122                           ;LCD.c: 54:         Lcd_Cmd(z);
  3123     03DD  0877               	movf	Lcd_Set_Cursor@z,w
  3124     03DE  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3125     03E3                     l1395:
  3126                           
  3127                           ;LCD.c: 55:         Lcd_Cmd(y);
  3128     03E3  0878               	movf	Lcd_Set_Cursor@y,w
  3129     03E4  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3130                           
  3131                           ;LCD.c: 56:     } else if (a == 2) {
  3132     03E9  2C0C               	goto	l105
  3133     03EA                     l1397:
  3134     03EA  3002               	movlw	2
  3135     03EB  0676               	xorwf	Lcd_Set_Cursor@a,w
  3136     03EC  1D03               	btfss	3,2
  3137     03ED  2BEF               	goto	u941
  3138     03EE  2BF0               	goto	u940
  3139     03EF                     u941:
  3140     03EF  2C0C               	goto	l105
  3141     03F0                     u940:
  3142     03F0                     l1399:
  3143                           
  3144                           ;LCD.c: 57:         temp = 0xC0 + b - 1;
  3145     03F0  0874               	movf	Lcd_Set_Cursor@b,w
  3146     03F1  3EBF               	addlw	191
  3147     03F2  00F9               	movwf	Lcd_Set_Cursor@temp
  3148                           
  3149                           ;LCD.c: 58:         z = temp >> 4;
  3150     03F3  0879               	movf	Lcd_Set_Cursor@temp,w
  3151     03F4  00F5               	movwf	??_Lcd_Set_Cursor
  3152     03F5  3004               	movlw	4
  3153     03F6                     u955:
  3154     03F6  1003               	clrc
  3155     03F7  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3156     03F8  3EFF               	addlw	-1
  3157     03F9  1D03               	skipz
  3158     03FA  2BF6               	goto	u955
  3159     03FB  0875               	movf	??_Lcd_Set_Cursor,w
  3160     03FC  00F7               	movwf	Lcd_Set_Cursor@z
  3161     03FD                     l1401:
  3162                           
  3163                           ;LCD.c: 59:         y = temp & 0x0F;
  3164     03FD  0879               	movf	Lcd_Set_Cursor@temp,w
  3165     03FE  390F               	andlw	15
  3166     03FF  00F8               	movwf	Lcd_Set_Cursor@y
  3167     0400                     l1403:
  3168                           
  3169                           ;LCD.c: 60:         Lcd_Cmd(z);
  3170     0400  0877               	movf	Lcd_Set_Cursor@z,w
  3171     0401  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3172     0406                     l1405:
  3173                           
  3174                           ;LCD.c: 61:         Lcd_Cmd(y);
  3175     0406  0878               	movf	Lcd_Set_Cursor@y,w
  3176     0407  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3177     040C                     l105:
  3178     040C  0008               	return
  3179     040D                     __end_of_Lcd_Set_Cursor:
  3180                           
  3181                           	psect	text16
  3182     0468                     __ptext16:	
  3183 ;; *************** function _Lcd_Init *****************
  3184 ;; Defined at:
  3185 ;;		line 65 in file "LCD.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, status,2, status,0, pclath, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3199 ;;      Params:         0       0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0
  3201 ;;      Temps:          2       0       0       0       0
  3202 ;;      Totals:         2       0       0       0       0
  3203 ;;Total ram usage:        2 bytes
  3204 ;; Hardware stack levels used: 1
  3205 ;; Hardware stack levels required when called: 2
  3206 ;; This function calls:
  3207 ;;		_Lcd_Cmd
  3208 ;;		_Lcd_Port
  3209 ;; This function is called by:
  3210 ;;		_main
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214     0468                     _Lcd_Init:	
  3215                           ;psect for function _Lcd_Init
  3216                           
  3217     0468                     l1375:	
  3218                           ;incstack = 0
  3219                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3220                           
  3221                           
  3222                           ;LCD.c: 66:     Lcd_Port(0x00);
  3223     0468  3000               	movlw	0
  3224     0469  120A  118A  2258  120A  118A  	fcall	_Lcd_Port
  3225     046E                     l1377:
  3226                           
  3227                           ;LCD.c: 67:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3228     046E  301A               	movlw	26
  3229     046F  00F5               	movwf	??_Lcd_Init+1
  3230     0470  30F8               	movlw	248
  3231     0471  00F4               	movwf	??_Lcd_Init
  3232     0472                     u1207:
  3233     0472  0BF4               	decfsz	??_Lcd_Init,f
  3234     0473  2C72               	goto	u1207
  3235     0474  0BF5               	decfsz	??_Lcd_Init+1,f
  3236     0475  2C72               	goto	u1207
  3237     0476  0000               	nop
  3238     0477                     l1379:
  3239                           
  3240                           ;LCD.c: 68:     Lcd_Cmd(0x03);
  3241     0477  3003               	movlw	3
  3242     0478  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3243                           
  3244                           ;LCD.c: 69:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3245     047D  3007               	movlw	7
  3246     047E  00F5               	movwf	??_Lcd_Init+1
  3247     047F  307D               	movlw	125
  3248     0480  00F4               	movwf	??_Lcd_Init
  3249     0481                     u1217:
  3250     0481  0BF4               	decfsz	??_Lcd_Init,f
  3251     0482  2C81               	goto	u1217
  3252     0483  0BF5               	decfsz	??_Lcd_Init+1,f
  3253     0484  2C81               	goto	u1217
  3254     0485                     l1381:
  3255                           
  3256                           ;LCD.c: 70:     Lcd_Cmd(0x03);
  3257     0485  3003               	movlw	3
  3258     0486  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3259     048B                     l1383:
  3260                           
  3261                           ;LCD.c: 71:     _delay((unsigned long)((200)*(4000000/4000000.0)));
  3262     048B  3042               	movlw	66
  3263     048C  00F4               	movwf	??_Lcd_Init
  3264     048D                     u1227:
  3265     048D  0BF4               	decfsz	??_Lcd_Init,f
  3266     048E  2C8D               	goto	u1227
  3267     048F  0000               	nop
  3268                           
  3269                           ;LCD.c: 72:     Lcd_Cmd(0x03);
  3270     0490  3003               	movlw	3
  3271     0491  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3272                           
  3273                           ;LCD.c: 73:     Lcd_Cmd(0x02);
  3274     0496  3002               	movlw	2
  3275     0497  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3276                           
  3277                           ;LCD.c: 74:     Lcd_Cmd(0x02);
  3278     049C  3002               	movlw	2
  3279     049D  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3280                           
  3281                           ;LCD.c: 75:     Lcd_Cmd(0x08);
  3282     04A2  3008               	movlw	8
  3283     04A3  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3284                           
  3285                           ;LCD.c: 76:     Lcd_Cmd(0x00);
  3286     04A8  3000               	movlw	0
  3287     04A9  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3288                           
  3289                           ;LCD.c: 77:     Lcd_Cmd(0x0C);
  3290     04AE  300C               	movlw	12
  3291     04AF  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3292                           
  3293                           ;LCD.c: 78:     Lcd_Cmd(0x00);
  3294     04B4  3000               	movlw	0
  3295     04B5  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3296                           
  3297                           ;LCD.c: 79:     Lcd_Cmd(0x06);
  3298     04BA  3006               	movlw	6
  3299     04BB  120A  118A  221E  120A  118A  	fcall	_Lcd_Cmd
  3300     04C0                     l1385:
  3301                           
  3302                           ;LCD.c: 80:  _delay((unsigned long)((100)*(4000000/4000000.0)));
  3303     04C0  3021               	movlw	33
  3304     04C1  00F4               	movwf	??_Lcd_Init
  3305     04C2                     u1237:
  3306     04C2  0BF4               	decfsz	??_Lcd_Init,f
  3307     04C3  2CC2               	goto	u1237
  3308     04C4                     l108:
  3309     04C4  0008               	return
  3310     04C5                     __end_of_Lcd_Init:
  3311                           
  3312                           	psect	text17
  3313     021E                     __ptext17:	
  3314 ;; *************** function _Lcd_Cmd *****************
  3315 ;; Defined at:
  3316 ;;		line 35 in file "LCD.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  a               1    wreg     unsigned char 
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  a               1    3[COMMON] unsigned char 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  1    wreg      void 
  3323 ;; Registers used:
  3324 ;;		wreg, status,2, status,0, pclath, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3330 ;;      Params:         0       0       0       0       0
  3331 ;;      Locals:         1       0       0       0       0
  3332 ;;      Temps:          2       0       0       0       0
  3333 ;;      Totals:         3       0       0       0       0
  3334 ;;Total ram usage:        3 bytes
  3335 ;; Hardware stack levels used: 1
  3336 ;; Hardware stack levels required when called: 1
  3337 ;; This function calls:
  3338 ;;		_Lcd_Port
  3339 ;; This function is called by:
  3340 ;;		_Lcd_Set_Cursor
  3341 ;;		_Lcd_Init
  3342 ;;		_Lcd_Clear
  3343 ;;		_Lcd_Shift_Right
  3344 ;;		_Lcd_Shift_Left
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348     021E                     _Lcd_Cmd:	
  3349                           ;psect for function _Lcd_Cmd
  3350                           
  3351                           
  3352                           ;incstack = 0
  3353                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3354                           ;Lcd_Cmd@a stored from wreg
  3355     021E  00F3               	movwf	Lcd_Cmd@a
  3356     021F                     l1213:
  3357                           
  3358                           ;LCD.c: 36:     PORTDbits.RD6 = 0;
  3359     021F  1283               	bcf	3,5	;RP0=0, select bank0
  3360     0220  1303               	bcf	3,6	;RP1=0, select bank0
  3361     0221  1308               	bcf	8,6	;volatile
  3362     0222                     l1215:
  3363                           
  3364                           ;LCD.c: 37:     Lcd_Port(a);
  3365     0222  0873               	movf	Lcd_Cmd@a,w
  3366     0223  120A  118A  2258  120A  118A  	fcall	_Lcd_Port
  3367     0228                     l1217:
  3368                           
  3369                           ;LCD.c: 38:     PORTDbits.RD7 = 1;
  3370     0228  1283               	bcf	3,5	;RP0=0, select bank0
  3371     0229  1303               	bcf	3,6	;RP1=0, select bank0
  3372     022A  1788               	bsf	8,7	;volatile
  3373     022B                     l1219:
  3374                           
  3375                           ;LCD.c: 39:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3376     022B  3006               	movlw	6
  3377     022C  00F2               	movwf	??_Lcd_Cmd+1
  3378     022D  3030               	movlw	48
  3379     022E  00F1               	movwf	??_Lcd_Cmd
  3380     022F                     u1247:
  3381     022F  0BF1               	decfsz	??_Lcd_Cmd,f
  3382     0230  2A2F               	goto	u1247
  3383     0231  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3384     0232  2A2F               	goto	u1247
  3385     0233  0000               	nop
  3386     0234                     l1221:
  3387                           
  3388                           ;LCD.c: 40:     PORTDbits.RD7 = 0;
  3389     0234  1283               	bcf	3,5	;RP0=0, select bank0
  3390     0235  1303               	bcf	3,6	;RP1=0, select bank0
  3391     0236  1388               	bcf	8,7	;volatile
  3392     0237                     l96:
  3393     0237  0008               	return
  3394     0238                     __end_of_Lcd_Cmd:
  3395                           
  3396                           	psect	text18
  3397     0258                     __ptext18:	
  3398 ;; *************** function _Lcd_Port *****************
  3399 ;; Defined at:
  3400 ;;		line 13 in file "LCD.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  a               1    wreg     unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  a               1    0[COMMON] unsigned char 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  1    wreg      void 
  3407 ;; Registers used:
  3408 ;;		wreg
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3414 ;;      Params:         0       0       0       0       0
  3415 ;;      Locals:         1       0       0       0       0
  3416 ;;      Temps:          0       0       0       0       0
  3417 ;;      Totals:         1       0       0       0       0
  3418 ;;Total ram usage:        1 bytes
  3419 ;; Hardware stack levels used: 1
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_Lcd_Cmd
  3424 ;;		_Lcd_Init
  3425 ;;		_Lcd_Write_Char
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429     0258                     _Lcd_Port:	
  3430                           ;psect for function _Lcd_Port
  3431                           
  3432                           
  3433                           ;incstack = 0
  3434                           ; Regs used in _Lcd_Port: [wreg]
  3435                           ;Lcd_Port@a stored from wreg
  3436     0258  00F0               	movwf	Lcd_Port@a
  3437     0259                     l1193:
  3438                           
  3439                           ;LCD.c: 14:     if (a & 1)
  3440     0259  1C70               	btfss	Lcd_Port@a,0
  3441     025A  2A5C               	goto	u581
  3442     025B  2A5D               	goto	u580
  3443     025C                     u581:
  3444     025C  2A61               	goto	l85
  3445     025D                     u580:
  3446     025D                     l1195:
  3447                           
  3448                           ;LCD.c: 15:         PORTBbits.RB4 = 1;
  3449     025D  1283               	bcf	3,5	;RP0=0, select bank0
  3450     025E  1303               	bcf	3,6	;RP1=0, select bank0
  3451     025F  1606               	bsf	6,4	;volatile
  3452     0260  2A64               	goto	l86
  3453     0261                     l85:	
  3454                           ;LCD.c: 16:     else
  3455                           
  3456                           
  3457                           ;LCD.c: 17:         PORTBbits.RB4 = 0;
  3458     0261  1283               	bcf	3,5	;RP0=0, select bank0
  3459     0262  1303               	bcf	3,6	;RP1=0, select bank0
  3460     0263  1206               	bcf	6,4	;volatile
  3461     0264                     l86:
  3462                           
  3463                           ;LCD.c: 19:     if (a & 2)
  3464     0264  1CF0               	btfss	Lcd_Port@a,1
  3465     0265  2A67               	goto	u591
  3466     0266  2A68               	goto	u590
  3467     0267                     u591:
  3468     0267  2A6A               	goto	l87
  3469     0268                     u590:
  3470     0268                     l1197:
  3471                           
  3472                           ;LCD.c: 20:         PORTBbits.RB5 = 1;
  3473     0268  1686               	bsf	6,5	;volatile
  3474     0269  2A6B               	goto	l88
  3475     026A                     l87:	
  3476                           ;LCD.c: 21:     else
  3477                           
  3478                           
  3479                           ;LCD.c: 22:         PORTBbits.RB5 = 0;
  3480     026A  1286               	bcf	6,5	;volatile
  3481     026B                     l88:
  3482                           
  3483                           ;LCD.c: 24:     if (a & 4)
  3484     026B  1D70               	btfss	Lcd_Port@a,2
  3485     026C  2A6E               	goto	u601
  3486     026D  2A6F               	goto	u600
  3487     026E                     u601:
  3488     026E  2A71               	goto	l89
  3489     026F                     u600:
  3490     026F                     l1199:
  3491                           
  3492                           ;LCD.c: 25:         PORTBbits.RB6 = 1;
  3493     026F  1706               	bsf	6,6	;volatile
  3494     0270  2A72               	goto	l90
  3495     0271                     l89:	
  3496                           ;LCD.c: 26:     else
  3497                           
  3498                           
  3499                           ;LCD.c: 27:         PORTBbits.RB6 = 0;
  3500     0271  1306               	bcf	6,6	;volatile
  3501     0272                     l90:
  3502                           
  3503                           ;LCD.c: 29:     if (a & 8)
  3504     0272  1DF0               	btfss	Lcd_Port@a,3
  3505     0273  2A75               	goto	u611
  3506     0274  2A76               	goto	u610
  3507     0275                     u611:
  3508     0275  2A78               	goto	l91
  3509     0276                     u610:
  3510     0276                     l1201:
  3511                           
  3512                           ;LCD.c: 30:         PORTBbits.RB7 = 1;
  3513     0276  1786               	bsf	6,7	;volatile
  3514     0277  2A79               	goto	l93
  3515     0278                     l91:	
  3516                           ;LCD.c: 31:     else
  3517                           
  3518                           
  3519                           ;LCD.c: 32:         PORTBbits.RB7 = 0;
  3520     0278  1386               	bcf	6,7	;volatile
  3521     0279                     l93:
  3522     0279  0008               	return
  3523     027A                     __end_of_Lcd_Port:
  3524     007E                     btemp	set	126	;btemp
  3525     007E                     wtemp0	set	126
  3526                           
  3527                           	psect	idloc
  3528                           
  3529                           ;Config register IDLOC0 @ 0x2000
  3530                           ;	unspecified, using default values
  3531     2000                     	org	8192
  3532     2000  3FFF               	dw	16383
  3533                           
  3534                           ;Config register IDLOC1 @ 0x2001
  3535                           ;	unspecified, using default values
  3536     2001                     	org	8193
  3537     2001  3FFF               	dw	16383
  3538                           
  3539                           ;Config register IDLOC2 @ 0x2002
  3540                           ;	unspecified, using default values
  3541     2002                     	org	8194
  3542     2002  3FFF               	dw	16383
  3543                           
  3544                           ;Config register IDLOC3 @ 0x2003
  3545                           ;	unspecified, using default values
  3546     2003                     	org	8195
  3547     2003  3FFF               	dw	16383
  3548                           
  3549                           	psect	config
  3550                           
  3551                           ;Config register CONFIG1 @ 0x2007
  3552                           ;	Oscillator Selection bits
  3553                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3554                           ;	Watchdog Timer Enable bit
  3555                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3556                           ;	Power-up Timer Enable bit
  3557                           ;	PWRTE = OFF, PWRT disabled
  3558                           ;	RE3/MCLR pin function select bit
  3559                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3560                           ;	Code Protection bit
  3561                           ;	CP = OFF, Program memory code protection is disabled
  3562                           ;	Data Code Protection bit
  3563                           ;	CPD = OFF, Data memory code protection is disabled
  3564                           ;	Brown Out Reset Selection bits
  3565                           ;	BOREN = OFF, BOR disabled
  3566                           ;	Internal External Switchover bit
  3567                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3568                           ;	Fail-Safe Clock Monitor Enabled bit
  3569                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3570                           ;	Low Voltage Programming Enable bit
  3571                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3572                           ;	In-Circuit Debugger Mode bit
  3573                           ;	DEBUG = 0x1, unprogramme  3574     2007                     	org	8199
  3575     2007  20D4               	dw	8404
  3576                           
  3577                           ;Config register CONFIG2 @ 0x2008
  3578                           ;	Brown-out Reset Selection bit
  3579                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3580                           ;	Flash Program Memory Self Write Enable bits
  3581                           ;	WRT = OFF, Write protection off
  3582     2008                     	org	8200
  3583     2008  3FFF               	dw	16383

Data Sizes:
    Strings     21
    Constant    10
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     20      58
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> buffer(BANK0[20]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->___awmod
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_spiInit
    _map->___awdiv
    ___awdiv->___wmul
    ___awmod->___awdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf
    _map->___awdiv
    ___awmod->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    9406
                                             17 BANK0      3     3      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            ___awdiv
                            ___awmod
                             ___wmul
                                _map
                              _setup
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    18      7    1320
                                              0 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _map                                                 10     2      8    2978
                                             11 COMMON     2     2      0
                                              4 BANK0      8     0      8
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1156
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1060
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     904
                                             11 COMMON     3     3      0
                                              4 BANK0      4     0      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     648
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     760
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   ___awdiv
     ___wmul (ARG)
   ___awmod
     ___awdiv (ARG)
     ___wmul (ARG)
   ___wmul
   _map
     ___awdiv
     ___wmul
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      48       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     14      3A       5       72.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      48      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Feb 03 02:18:41 2023

                       pc 0002               map@inputmax 004C               map@inputmin 004A  
             _SSPSTATbits 0094                        l65 0306                        l90 0272  
                      l91 0278                        l76 0257                        l93 0279  
                      l85 0261                        l86 0264                        l87 026A  
                      l88 026B                        l96 0237                        l89 0271  
            ___awdiv@sign 0047                        fsr 0004       ___wmul@multiplicand 0072  
                     l111 02D1                       l105 040C                       l108 04C4  
                     l117 0382                       l141 01F0                       l144 01F6  
                     l137 0218                       l138 021D                       l155 0207  
                     l147 01EF                       l422 052D                       l271 029E  
                     l265 0607                       l435 0467                       l269 0286  
                     l541 03C6                       l551 0340                       u600 026F  
                     u601 026E                       u610 0276                       u611 0275  
                     u700 04D7                       u620 0210                       u701 04D6  
                     u621 020F                       u710 04E8                       u711 04E7  
                     u640 01F6                       u641 01F5                       u730 04FA  
                     u650 0280                       u810 039D                       u635 02AC  
                     u731 04F9                       u651 027F                       u811 039C  
                     u580 025D                       u581 025C                       u725 04EC  
                     u805 038F                       u590 0268                       u750 050B  
                     u830 03AE                       u910 033C                       u591 0267  
                     u751 050A                       u831 03AD                       u911 033B  
                     u920 03CD                       u680 029A                       u921 03CC  
                     u745 04FB                       u681 0299                       u665 0287  
                     u825 039E                       u905 0330                       u770 051F  
                     u690 04CC                       u850 03C2                       u771 051E  
                     u755 0507                       u691 04CB                       u675 028E  
                     u851 03C1                       u835 03AA                       u940 03F0  
                     u780 0524                       u860 030D                       u941 03EF  
                     u781 0523                       u765 0513                       u845 03B6  
                     u861 030C                       u790 038B                       u935 03D3  
                     u791 038A                       u960 034E                       u880 031F  
                     u881 031E                       u970 0370                       u890 0329  
                     u955 03F6                       u891 0328                       u875 0311  
                     u980 0382                       u981 0381                       u990 053A  
                     u895 0325                       u991 0539                       _map 02D2  
                     fsr0 0004                       indf 0000              ___awmod@sign 007D  
                    l1201 0276                      l1211 0217                      l1203 0209  
                    l1221 0234                      l1213 021F                      l1205 0210  
                    l1215 0222                      l1231 02BA                      l1223 02A0  
                    l1207 0212                      l1311 0395                      l1303 0383  
                    l1217 0228                      l1401 03FD                      l1241 02CE  
                    l1233 02BE                      l1225 02A6                      l1209 0214  
                    l1321 03B5                      l1313 0399                      l1305 0385  
                    l1219 022B                      l1403 0400                      l1235 02C1  
                    l1227 02A9                      l1411 0360                      l1251 028D  
                    l1243 01F0                      l1323 03BC                      l1315 039D  
                    l1307 038B                      l1331 030D                      l1405 0406  
                    l1237 02C7                      l1229 02B7                      l1413 0366  
                    l1501 042D                      l1261 04C8                      l1253 0294  
                    l1245 027A                      l1317 03AE                      l1309 038E  
                    l1325 03C2                      l1341 0329                      l1333 0310  
                    l1239 02CA                      l1407 0341                      l1511 044C  
                    l1503 0434                      l1271 04DC                      l1263 04CC  
                    l1255 029A                      l1247 027C                      l1351 02D3  
                    l1415 01EB                      l1319 03B4                      l1343 032F  
                    l1335 0317                      l1431 0544                      l1423 0531  
                    l1193 0259                      l1409 0344                      l1513 0453  
                    l1505 0438                      l1281 04F2                      l1273 04E0  
                    l1265 04D1                      l1249 0280                      l1361 0246  
                    l1417 01FF                      l1345 0336                      l1337 031B  
                    l1329 0307                      l1441 056E                      l1425 0534  
                    l1195 025D                      l1507 043C                      l1515 0459  
                    l1291 0512                      l1283 04F6                      l1275 04E2  
                    l1267 04D3                      l1259 04C5                      l1371 024D  
                    l1363 0247                      l1355 0238                      l1419 0204  
                    l1339 031F                      l1347 033C                      l1443 0572  
                    l1435 0545                      l1427 053A                      l1531 063C  
                    l1523 0608                      l1197 0268                      l1381 0485  
                    l1517 045E                      l1509 0446                      l1293 0519  
                    l1285 04FA                      l1277 04E8                      l1269 04D7  
                    l1373 024E                      l1365 0248                      l1357 023C  
                    l1461 05A9                      l1453 057D                      l1445 0576  
                    l1437 0562                      l1605 0557                      l1429 053F  
                    l1541 0664                      l1533 0645                      l1525 061A  
                    l1199 026F                      l1383 048B                      l1375 0468  
                    l1391 03DA                      l1519 0463                      l1287 050B  
                    l1279 04EB                      l1295 051F                      l1367 024B  
                    l1359 023F                      l1471 05E6                      l1463 05AE  
                    l1447 057B                      l1439 056A                      l1551 0689  
                    l1543 066C                      l1535 0653                      l1527 0623  
                    l1385 04C0                      l1377 046E                      l1393 03DD  
                    l1297 0524                      l1289 0511                      l1369 024C  
                    l1473 05EA                      l1465 05B2                      l1457 0599  
                    l1561 071C                      l1553 06A3                      l1545 066F  
                    l1537 0656                      l1529 0634                      l1379 0477  
                    l1395 03E3                      l1387 03C8                      l1491 0419  
                    l1299 0529                      l1467 05B5                      l1459 05A3  
                    l1475 05F3                      l1571 07A6                      l1563 0732  
                    l1555 06C3                      l1547 067E                      l1539 065C  
                    l1389 03CD                      l1397 03EA                      l1493 041B  
                    l1485 040D                      l1469 05E1                      l1477 0603  
                    l1573 07C8                      l1565 073B                      l1557 06F2  
                    l1549 0686                      l1399 03F0                      l1495 041F  
                    l1487 040E                      l1575 07D0                      l1567 0757  
                    l1559 0714                      l1497 0424                      l1489 0414  
                    l1577 07E6                      l1569 0777                      l1499 042A  
                    ?_map 004A                      STR_1 002A                      STR_2 0026  
                    STR_3 002E                      STR_4 001D                      STR_5 001D  
                    u1000 0572                      u1001 0571                      u1010 0598  
                    u1011 0597                      u1100 043C                      u1020 05A3  
                    u1101 043B                      u1021 05A2                      u1110 0446  
                    u1030 05A9                      u1111 0445                      u1031 05A8  
                    u1015 0594                      u1040 05F3                      u1041 05F2  
                    u1130 0459                      u1050 0603                      u1131 0458  
                    u1115 0442                      u1051 0602                      u1140 045E  
                    u1060 0414                      u1141 045D                      u1125 044D  
                    u1061 0413                      u1070 041F                      u1207 0472  
                    u1071 041E                      u1080 042A                      u1217 0481  
                    u1081 0429                      u1227 048D                      u1237 04C2  
                    u1157 064D                      u1247 022F                      u1095 042E  
                    u1167 0668                      u1177 0682                      u1187 02BC  
                    u1197 02CC         ?_Lcd_Write_String 0075                      _main 0608  
                    _vol1 002E                      _vol2 002C                      btemp 007E  
                    start 0000        ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 0238  
                   ??_map 007B                     ?_main 0070           __end_of___awdiv 052E  
         __end_of___awmod 0468                     _ANSEL 0188           ___awdiv@divisor 0076  
         __end_of___lwdiv 03C7           __end_of___lwmod 0341           ___awdiv@counter 0046  
                   _PORTB 0006                     _PORTD 0008                     _TRISB 0086  
                   _TRISD 0088           __end_of_dpowers 001D                     _setup 0238  
                   pclath 000A           __end_of_spiInit 021E           __end_of_spiRead 0208  
                   status 0003                     wtemp0 007E           __end_of_sprintf 0608  
        __end_of_Lcd_Init 04C5          __end_of_Lcd_Port 027A           __initialization 07F3  
            __end_of_main 07F3                    ??_main 0057          ___awdiv@dividend 0078  
                  ?_setup 0070                    _ANSELH 0189                 ??_Lcd_Cmd 0071  
                  _SSPCON 0014                    _SSPBUF 0013                    ___wmul 027A  
               ??___awdiv 007A                 ??___awmod 007B                 ??___lwdiv 0074  
               ??___lwmod 007C                    _buffer 0032          ___awdiv@quotient 0048  
         ___awmod@divisor 004A           ___awmod@counter 007C          __end_of_spiWrite 01F0  
               ??_spiInit 0073                 ??_spiRead 0070                 ??_sprintf 004D  
         Lcd_Set_Cursor@a 0076           Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078  
         Lcd_Set_Cursor@z 0077   __end_of__initialization 07FC            __pcstackCOMMON 0070  
           __end_of_setup 0258            _Lcd_Set_Cursor 03C7                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070                   ??_setup 0074                __pbssBANK0 0020  
              __pmaintext 0608                   ?___wmul 0070                _centesima1 0026  
              _centesima2 0020    __end_of_Lcd_Set_Cursor 040D                ??_Lcd_Init 0074  
              ??_Lcd_Port 0070                   _SSPSTAT 0094                __stringtab 0003  
          _Lcd_Write_Char 029F                   _Lcd_Cmd 021E                 ?_spiWrite 0070  
                 ___awdiv 04C5                   ___awmod 040D                   ___lwdiv 0383  
                 ___lwmod 0307                   _decima1 0028                   _decima2 0022  
         ?_Lcd_Set_Cursor 0074                   __ptext1 052E                   __ptext2 0307  
                 __ptext3 0383                   __ptext4 01EA                   __ptext5 01FF  
                 __ptext6 01F0                   __ptext7 0238                   __ptext8 0208  
                 __ptext9 02D2                   _dpowers 0013          ___awmod@dividend 004C  
                 _spiInit 0208                   _spiRead 01FF                   _unidad1 002A  
                 _unidad2 0024                   _sprintf 052E                   clrloop0 01F8  
  __end_of_Lcd_Write_Char 02D2      end_of_initialization 07FC                ??_spiWrite 0070  
               Lcd_Port@a 0070                 _PORTBbits 0006                 _PORTCbits 0007  
               _PORTDbits 0008                 _TRISCbits 0087                 _TRISDbits 0088  
             spiWrite@dat 0070           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075  
       Lcd_Write_String@i 007A            _spiReceiveWait 01F0            __end_of___wmul 029F  
        _Lcd_Write_String 0341       start_initialization 07F3               __end_of_map 0307  
  __end_of_spiReceiveWait 01F7                  ??___wmul 0074           Lcd_Write_Char@a 0074  
         Lcd_Write_Char@y 0073                 ___latbits 0002             __pcstackBANK0 0046  
                ?_Lcd_Cmd 0070               sprintf@flag 0051               sprintf@prec 0052  
        ___lwdiv@dividend 0072           ?_spiReceiveWait 0070          ??_Lcd_Set_Cursor 0075  
                ?___awdiv 0076                  ?___awmod 004A                  ?___lwdiv 0070  
                ?___lwmod 0078                 __pstrings 0003                  ?_spiInit 0070  
                ?_spiRead 0070          ___lwdiv@quotient 0075                  ?_sprintf 0046  
    spiInit@sTransmitEdge 0072            ___wmul@product 0074                 clear_ram0 01F7  
      spiInit@sDataSample 0070                  Lcd_Cmd@a 0073               __stringbase 0012  
       ___wmul@multiplier 0070                 map@outmax 0050                 map@outmin 004E  
        ??_Lcd_Write_Char 0071                  _Lcd_Init 0468                  _Lcd_Port 0258  
__end_of_Lcd_Write_String 0383        __end_of__stringtab 0013                sprintf@val 0053  
         ___lwdiv@divisor 0070           ___lwdiv@counter 0077                  __ptext10 027A  
                __ptext11 04C5                  __ptext12 040D                  __ptext13 0341  
                __ptext14 029F                  __ptext15 03C7                  __ptext16 0468  
                __ptext17 021E                  __ptext18 0258                  _spiWrite 01EA  
            spiInit@sType 0073                  map@value 007C         spiInit@sClockIdle 0071  
                _voltaje1 0031                  _voltaje2 0030        Lcd_Write_Char@temp 0072  
               sprintf@ap 0050                 sprintf@sp 0055          ___lwmod@dividend 007A  
        ??_spiReceiveWait 0070                 stringcode 000D                _OSCCONbits 008F  
      Lcd_Set_Cursor@temp 0079                  sprintf@c 0056                  sprintf@f 0046  
         ___lwmod@divisor 0078           ___lwmod@counter 007D                  stringdir 000D  
                stringtab 0003  
